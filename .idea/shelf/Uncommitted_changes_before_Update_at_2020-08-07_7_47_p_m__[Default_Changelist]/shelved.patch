Index: src/backend/models/Trade.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package backend.models;\r\n\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Date;\r\nimport java.util.UUID;\r\n\r\n/**\r\n * Represents a trade between two users\r\n */\r\npublic class Trade  implements Serializable, Idable {\r\n    private Date meetingTime;\r\n    private Date secondMeetingTime;\r\n    private String meetingLocation;\r\n    private int numEdits = 0;\r\n    private String firstUserOffer;\r\n    private String secondUserOffer;\r\n    private boolean hasFirstUserConfirmedRequest = true; // Whether trader1 has accepted the trade request\r\n    private boolean hasSecondUserConfirmedRequest = false; // Whether trader2 has accepted the trade request\r\n    private boolean isFirstUserConfirmed1 = false; // Whether trader1 has confirmed the first meeting\r\n    private boolean isSecondUserConfirmed1 = false; // Whether trader2 has confirmed the first meeting\r\n    private boolean isFirstUserConfirmed2 = false; // Whether trader1 has confirmed the second meeting\r\n    private boolean isSecondUserConfirmed2 = false; // Whether trader2 has confirmed the second meeting\r\n    private final String FIRST_USER_ID, SECOND_USER_ID;\r\n    private final int MAX_ALLOWED_NUM_EDITS;\r\n    private String message;\r\n    private final String id = UUID.randomUUID().toString();\r\n    private String userTurnToEdit;\r\n\r\n    /**\r\n     * Makes a new trade object\r\n     *\r\n     * @param firstUserId       the user id of the person initializing the trade\r\n     * @param secondUserId      the user id of the person the trade is being sent to\r\n     * @param meetingTime       when the meeting takes place\r\n     * @param secondMeetingTime when the second meeting takes place\r\n     * @param meetingLocation   where the meeting takes place\r\n     * @param firstUserOffer    the item id that the user who initialized the trade is willing to offer\r\n     * @param secondUserOffer   the item id that the user who got sent the trade is willing to offer\r\n     * @param allowedEdits      number of edits allowed before the trade is cancelled\r\n     * @param message           the message that goes with the trade\r\n     */\r\n    public Trade(String firstUserId, String secondUserId,\r\n                 Date meetingTime, Date secondMeetingTime,\r\n                 String meetingLocation, String firstUserOffer, String secondUserOffer, int allowedEdits, String message) {\r\n        super();\r\n        this.FIRST_USER_ID = firstUserId;\r\n        this.SECOND_USER_ID = secondUserId;\r\n        this.MAX_ALLOWED_NUM_EDITS = allowedEdits * 2;\r\n        this.userTurnToEdit = secondUserId;\r\n        this.meetingTime = meetingTime;\r\n        this.secondMeetingTime = secondMeetingTime;\r\n        this.meetingLocation = meetingLocation;\r\n        this.firstUserOffer = firstUserOffer;\r\n        this.secondUserOffer = secondUserOffer;\r\n        this.message = message;\r\n    }\r\n\r\n    /**\r\n     * The message along with the trade offer\r\n     * @return the message\r\n     */\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Sets the message with the trade offer\r\n     * @param message the message\r\n     */\r\n    public void setMessage(String message) {\r\n        this.message = message;\r\n    }\r\n\r\n    /**\r\n     * if first meeting is confirmed by the first user\r\n     *\r\n     * @return if the user that initialized the trade confirmed the first meeting\r\n     */\r\n    public boolean isFirstUserConfirmed1() {\r\n        return isFirstUserConfirmed1;\r\n    }\r\n\r\n    /**\r\n     * confirm the first meeting by the first user\r\n     *\r\n     * @param firstUserConfirmed1 if the user that initialized the trade confirmed the first meeting\r\n     */\r\n    public void setFirstUserConfirmed1(boolean firstUserConfirmed1) {\r\n        isFirstUserConfirmed1 = firstUserConfirmed1;\r\n    }\r\n\r\n    /**\r\n     * if the user that got sent the trade confirmed the first meeting\r\n     *\r\n     * @return if the user that got sent the trade confirmed the first meeting\r\n     */\r\n    public boolean isSecondUserConfirmed1() {\r\n        return isSecondUserConfirmed1;\r\n    }\r\n\r\n    /**\r\n     * if the user that got sent the trade confirmed the first meeting\r\n     *\r\n     * @param secondUserConfirmed1 if the user that got sent the trade confirmed the first meeting\r\n     */\r\n    public void setSecondUserConfirmed1(boolean secondUserConfirmed1) {\r\n        isSecondUserConfirmed1 = secondUserConfirmed1;\r\n    }\r\n\r\n    /**\r\n     * if the user that initialized the trade confirmed the second meeting\r\n     *\r\n     * @return if the user that initialized the trade confirmed the second meeting\r\n     */\r\n    public boolean isFirstUserConfirmed2() {\r\n        return isFirstUserConfirmed2;\r\n    }\r\n\r\n    /**\r\n     * if the user that initialized the trade confirmed the second meeting\r\n     *\r\n     * @param firstUserConfirmed2 if the user that initialized the trade confirmed the second meeting\r\n     */\r\n    public void setFirstUserConfirmed2(boolean firstUserConfirmed2) {\r\n        isFirstUserConfirmed2 = firstUserConfirmed2;\r\n    }\r\n\r\n    /**\r\n     * if the user that initialized the trade confirmed the second meeting\r\n     *\r\n     * @return if the user that initialized the trade confirmed the second meeting\r\n     */\r\n    public boolean isSecondUserConfirmed2() {\r\n        return isSecondUserConfirmed2;\r\n    }\r\n\r\n    /**\r\n     * if the user that got sent the trade confirmed the second meeting\r\n     *\r\n     * @param secondUserConfirmed2 if the user that got sent the trade confirmed the second meeting\r\n     */\r\n    public void setSecondUserConfirmed2(boolean secondUserConfirmed2) {\r\n        isSecondUserConfirmed2 = secondUserConfirmed2;\r\n    }\r\n\r\n    /**\r\n     * the user id of the person initializing the trade\r\n     *\r\n     * @return the user id of the person initializing the trade\r\n     */\r\n    public String getFirstUserId() {\r\n        return FIRST_USER_ID;\r\n    }\r\n\r\n    /**\r\n     * the user id of the person the trade is being sent to\r\n     *\r\n     * @return the user id of the person the trade is being sent to\r\n     */\r\n    public String getSecondUserId() {\r\n        return SECOND_USER_ID;\r\n    }\r\n\r\n    /**\r\n     * number of times the trade has been edited\r\n     *\r\n     * @return number of times the trade has been edited\r\n     */\r\n    public int getNumEdits() {\r\n        return numEdits;\r\n    }\r\n\r\n    /**\r\n     * the new meeting time for the first meeting\r\n     *\r\n     * @param meetingTime the new meeting time for the first meeting\r\n     */\r\n    public void setMeetingTime(Date meetingTime) {\r\n        this.meetingTime = meetingTime;\r\n    }\r\n\r\n    /**\r\n     * the new meeting time for the second meeting\r\n     *\r\n     * @param meetingTime the new meeting time for the second meeting\r\n     */\r\n    public void setSecondMeetingTime(Date meetingTime) {\r\n        secondMeetingTime = meetingTime;\r\n    }\r\n\r\n    /**\r\n     * when the first trade is taking place\r\n     *\r\n     * @return when the first trade is taking place\r\n     */\r\n    public Date getMeetingTime() {\r\n        return meetingTime;\r\n    }\r\n\r\n    /**\r\n     * when the second trade is taking place\r\n     *\r\n     * @return when the second trade is taking place\r\n     */\r\n    public Date getSecondMeetingTime() {\r\n        return secondMeetingTime;\r\n    }\r\n\r\n    /**\r\n     * where the trade is taking place\r\n     *\r\n     * @return where the trade is taking place\r\n     */\r\n    public String getMeetingLocation() {\r\n        return meetingLocation;\r\n    }\r\n\r\n    /**\r\n     * new meeting location\r\n     *\r\n     * @param location new meeting location\r\n     */\r\n    public void setMeetingLocation(String location) {\r\n        meetingLocation = location;\r\n    }\r\n\r\n    /**\r\n     * the id of the item that the user that initialized the trade is willing to offer\r\n     *\r\n     * @return the id of the item that the user that initialized the trade is willing to offer\r\n     */\r\n    public String getFirstUserOffer() {\r\n        return firstUserOffer;\r\n    }\r\n\r\n    /**\r\n     * the id of the item that the user that got sent the trade is willing to offer\r\n     *\r\n     * @return the id of the item that the user that got sent the trade is willing to offer\r\n     */\r\n    public String getSecondUserOffer() {\r\n        return secondUserOffer;\r\n    }\r\n\r\n    /**\r\n     * what the first user gives away (id)\r\n     *\r\n     * @param firstUserOffer what the first user gives away (id)\r\n     */\r\n    public void setFirstUserOffer(String firstUserOffer) {\r\n        this.firstUserOffer = firstUserOffer;\r\n    }\r\n\r\n    /**\r\n     * what the second user gives away (id)\r\n     *\r\n     * @param secondUserOffer what the second user gives away (id)\r\n     */\r\n    public void setSecondUserOffer(String secondUserOffer) {\r\n        this.secondUserOffer = secondUserOffer;\r\n    }\r\n\r\n    /**\r\n     * how many edits can be done\r\n     *\r\n     * @return how many edits can be done\r\n     */\r\n    public int getMaxAllowedEdits() {\r\n        return MAX_ALLOWED_NUM_EDITS;\r\n    }\r\n\r\n    /**\r\n     * the user id of the person's turn to edit the trade\r\n     *\r\n     * @return the user id of the person's turn to edit the trade\r\n     */\r\n    public String getUserTurnToEdit() {\r\n        return userTurnToEdit;\r\n    }\r\n\r\n\r\n    /**\r\n     * Change user's turn to edit trade\r\n     */\r\n    public void changeUserTurn() {\r\n        if (userTurnToEdit.equals(FIRST_USER_ID)) userTurnToEdit = SECOND_USER_ID;\r\n        else userTurnToEdit = FIRST_USER_ID;\r\n    }\r\n\r\n    /**\r\n     * number of edits\r\n     *\r\n     * @param num number of edits\r\n     */\r\n    public void setNumEdits(int num) {\r\n        this.numEdits = num;\r\n    }\r\n\r\n    /**\r\n     * if the first user has confirmed the trade request\r\n     *\r\n     * @return if the first user has confirmed the trade request\r\n     */\r\n    public boolean isHasFirstUserConfirmedRequest() {\r\n        return hasFirstUserConfirmedRequest;\r\n    }\r\n\r\n    /**\r\n     * changing the status if the first user confirmed the trade\r\n     *\r\n     * @param hasFirstUserConfirmedRequest changing the status if the first user confirmed the trade\r\n     */\r\n    public void setHasFirstUserConfirmedRequest(boolean hasFirstUserConfirmedRequest) {\r\n        this.hasFirstUserConfirmedRequest = hasFirstUserConfirmedRequest;\r\n    }\r\n\r\n    /**\r\n     * if the second user has confirmed the trade request\r\n     *\r\n     * @return if the second user has confirmed the trade request\r\n     */\r\n    public boolean isHasSecondUserConfirmedRequest() {\r\n        return hasSecondUserConfirmedRequest;\r\n    }\r\n\r\n    /**\r\n     * changing the status if the second user confirmed the trade\r\n     *\r\n     * @param hasSecondUserConfirmedRequest changing the status if the second user confirmed the trade\r\n     */\r\n    public void setHasSecondUserConfirmedRequest(boolean hasSecondUserConfirmedRequest) {\r\n        this.hasSecondUserConfirmedRequest = hasSecondUserConfirmedRequest;\r\n    }\r\n\r\n    /**\r\n     * checks if the trader is part of this trade\r\n     *\r\n     * @param traderId the trader id\r\n     * @return whether the trader is part of this trade\r\n     */\r\n    public boolean isTraderInTrade(String traderId) {\r\n        return this.getFirstUserId().equals(traderId) || this.getSecondUserId().equals(traderId);\r\n    }\r\n\r\n    /**\r\n     * Gets the id\r\n     * @return the id\r\n     */\r\n    @Override\r\n    public String getId() {\r\n        return id;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/backend/models/Trade.java	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ src/backend/models/Trade.java	(date 1596844027971)
@@ -81,15 +81,6 @@
         return isFirstUserConfirmed1;
     }
 
-    /**
-     * confirm the first meeting by the first user
-     *
-     * @param firstUserConfirmed1 if the user that initialized the trade confirmed the first meeting
-     */
-    public void setFirstUserConfirmed1(boolean firstUserConfirmed1) {
-        isFirstUserConfirmed1 = firstUserConfirmed1;
-    }
-
     /**
      * if the user that got sent the trade confirmed the first meeting
      *
@@ -99,14 +90,6 @@
         return isSecondUserConfirmed1;
     }
 
-    /**
-     * if the user that got sent the trade confirmed the first meeting
-     *
-     * @param secondUserConfirmed1 if the user that got sent the trade confirmed the first meeting
-     */
-    public void setSecondUserConfirmed1(boolean secondUserConfirmed1) {
-        isSecondUserConfirmed1 = secondUserConfirmed1;
-    }
 
     /**
      * if the user that initialized the trade confirmed the second meeting
@@ -117,14 +100,6 @@
         return isFirstUserConfirmed2;
     }
 
-    /**
-     * if the user that initialized the trade confirmed the second meeting
-     *
-     * @param firstUserConfirmed2 if the user that initialized the trade confirmed the second meeting
-     */
-    public void setFirstUserConfirmed2(boolean firstUserConfirmed2) {
-        isFirstUserConfirmed2 = firstUserConfirmed2;
-    }
 
     /**
      * if the user that initialized the trade confirmed the second meeting
@@ -135,15 +110,6 @@
         return isSecondUserConfirmed2;
     }
 
-    /**
-     * if the user that got sent the trade confirmed the second meeting
-     *
-     * @param secondUserConfirmed2 if the user that got sent the trade confirmed the second meeting
-     */
-    public void setSecondUserConfirmed2(boolean secondUserConfirmed2) {
-        isSecondUserConfirmed2 = secondUserConfirmed2;
-    }
-
     /**
      * the user id of the person initializing the trade
      *
@@ -343,6 +309,25 @@
         return this.getFirstUserId().equals(traderId) || this.getSecondUserId().equals(traderId);
     }
 
+    public void setUserConfirmed(String traderId){
+        if (traderId.equals(FIRST_USER_ID)){
+            if (!isFirstUserConfirmed1){
+                isFirstUserConfirmed1 = true;
+            }
+            else if (isFirstUserConfirmed1 && isSecondUserConfirmed1){
+                isFirstUserConfirmed2 = true;
+            }
+        }
+        else{
+            if (!isSecondUserConfirmed1){
+                isSecondUserConfirmed1 = true;
+            }
+            else if (isFirstUserConfirmed1 && isSecondUserConfirmed1){
+                isSecondUserConfirmed2 = true;
+            }
+        }
+    }
+
     /**
      * Gets the id
      * @return the id
Index: src/frontend/TemporarySetup.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frontend;\r\n\r\nimport backend.DatabaseFilePaths;\r\nimport backend.exceptions.*;\r\nimport backend.tradesystem.TraderProperties;\r\nimport backend.tradesystem.UserTypes;\r\nimport backend.tradesystem.admin_managers.HandleFrozenManager;\r\nimport backend.tradesystem.admin_managers.HandleItemRequestsManager;\r\nimport backend.tradesystem.general_managers.LoginManager;\r\nimport backend.tradesystem.general_managers.MessageManager;\r\nimport backend.tradesystem.general_managers.ReportManager;\r\nimport backend.tradesystem.queries.UserQuery;\r\nimport backend.tradesystem.trader_managers.TraderManager;\r\nimport backend.tradesystem.trader_managers.TradingManager;\r\n\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.Properties;\r\n\r\n/**\r\n * This class is not used in production and is only used to have an example interface full of users\r\n */\r\npublic class TemporarySetup {\r\n\r\n    /**\r\n     * Used to set up users\r\n     */\r\n    public TemporarySetup() {\r\n        debugSetup();\r\n//        regularSetup();\r\n    }\r\n\r\n    private void debugSetup(){\r\n        try {\r\n            refreshFiles(); // Deletes existing data in the ser files\r\n            String[] traders = new String[10];\r\n            String[] admins = new String[5];\r\n            LoginManager loginManager = new LoginManager();\r\n            TraderManager traderManager = new TraderManager();\r\n            HandleItemRequestsManager handleRequestsManager = new HandleItemRequestsManager();\r\n            HandleFrozenManager handleFrozenManager = new HandleFrozenManager();\r\n            MessageManager messageManager = new MessageManager();\r\n            TradingManager tradingManager = new TradingManager();\r\n            ReportManager reportManager = new ReportManager();\r\n            UserQuery userQuery = new UserQuery();\r\n            // Each trader has some items that are confirmed and not confirmed\r\n            // Username is trader{index here from 0 to 9 inclusive}\r\n            // Password is 'userPassword1'\r\n            for (int i = 0; i < traders.length; i++) {\r\n                traders[i] = loginManager.registerUser(\"trader\" + i, \"userPassword1\", UserTypes.TRADER);\r\n                traderManager.addRequestItem(traders[i], \"apple\" + i, \"sweet\" + i);\r\n                traderManager.addRequestItem(traders[i], \"banananana\" + i, \"disgusting\" + i);\r\n                traderManager.addRequestItem(traders[i], \"kiwi\" + i, \"from oceania\" + i);\r\n                handleRequestsManager.processItemRequest(traders[i], userQuery.getRequestedItems(traders[i]).get(0), true);\r\n                handleRequestsManager.processItemRequest(traders[i], userQuery.getRequestedItems(traders[i]).get(0), true);\r\n                handleRequestsManager.processItemRequest(traders[i], userQuery.getRequestedItems(traders[i]).get(0), true);\r\n                traderManager.addRequestItem(traders[i], \"requested\" + i, \"requested desc\" + i);\r\n                traderManager.addRequestItem(traders[i], \"another requested\" + i, \"bad desc requested\" + i);\r\n                traderManager.setCity(traders[i], \"Toronto\");\r\n            }\r\n            Date goodDate = new Date(System.currentTimeMillis() + 99999999);\r\n            Date goodDate2 = new Date(System.currentTimeMillis() + 999999999);\r\n            // Trades\r\n            for (int i = 1; i < traders.length / 2; i++) {\r\n                try {\r\n                    String acceptThis = tradingManager.requestTrade(traders[i], traders[traders.length - 1 - i], goodDate, goodDate2,\r\n                            \"123 bay street\", userQuery.getAvailableItems(traders[i]).get(0), userQuery.getAvailableItems(traders[traders.length - 1 - i]).get(0),\r\n                            3, \"give me your apple \" + i); // This is a temp trade\r\n                    String ongoing = tradingManager.requestTrade(traders[i], traders[traders.length - 1 - i], goodDate, null,\r\n                            \"123 bay street\", userQuery.getAvailableItems(traders[i]).get(1), userQuery.getAvailableItems(traders[traders.length - 1 - i]).get(1),\r\n                            3, \"give me your banana \" + i); // This is a perma trade\r\n                    String requestedOnly = tradingManager.requestTrade(traders[i], traders[traders.length - 1 - i], goodDate, goodDate2,\r\n                            \"123 bay street\", userQuery.getAvailableItems(traders[i]).get(2), userQuery.getAvailableItems(traders[traders.length - 1 - i]).get(2),\r\n                            3, \"I give you my kiwi \" + i); // this is for requesting temp trade\r\n                    // Only accepts request and doesn't confirm meetings so trade is ongoing\r\n                    tradingManager.acceptRequest(traders[traders.length - 1 - i], ongoing);\r\n                    // Confirms four meetings for a temporary trade and accepts request, meaning the trade is complete\r\n                    tradingManager.acceptRequest(traders[traders.length - 1 - i], acceptThis);\r\n                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis, true);\r\n                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis, true);\r\n                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis, true);\r\n                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis, true);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n            // List of admins\r\n            for (int i = 0; i < admins.length; i++) {\r\n                admins[i] = loginManager.registerUser(\"admin\" + i, \"userPassword1\", UserTypes.ADMIN);\r\n            }\r\n\r\n            // Each trader has a wishlist of one item\r\n            for (int i = 0; i < traders.length; i++)\r\n                traderManager.addToWishList(traders[i], userQuery.getAvailableItems(traders[i - 1 == -1 ? traders.length - 1 : i - 1]).get(0));\r\n            // For changing cities\r\n            traders[3] = traderManager.setCity(traders[3], \"new york\");\r\n            traders[4] = traderManager.setCity(traders[4], \"new york\");\r\n            traders[5] = traderManager.setCity(traders[5], \"new york\");\r\n            traders[6] = traderManager.setCity(traders[6], \"dallas\");\r\n            traders[7] = traderManager.setCity(traders[7], \"dallas\");\r\n            // For changing idle status\r\n            traders[0] = traderManager.setIdle(traders[0], true);\r\n            // For adding reviews\r\n            traderManager.addReview(traders[0], traders[3], 5.3, \"This guy was rude\");\r\n            traderManager.addReview(traders[2], traders[3], 2.3, \"This guy attacked me\");\r\n            traderManager.addReview(traders[1], traders[4], 9.3, \"This guy gave me free money\");\r\n            // For setting frozen status\r\n            handleFrozenManager.setFrozen(traders[8], true);\r\n            // For reporting users\r\n            reportManager.reportUser(traders[3], traders[6], \"This user drove off with my lambo and never gave me what I wanted\");\r\n            reportManager.reportUser(traders[1], traders[6], \"This user flew away with my helicopter and never gave me what I wanted\");\r\n            // For messaging users\r\n            messageManager.sendMessage(traders[5], traders[7], \"Dallas is pretty far can you come to New York instead\");\r\n            messageManager.sendMessage(traders[5], traders[7], \"Ik its a lot to ask but like yeehaw\");\r\n            messageManager.sendMessage(traders[5], traders[7], \"Dplease i got covid19 come to new yorkkk\");\r\n            messageManager.sendMessage(traders[5], traders[7], \"uk what fine, i never liked you anyway\");\r\n            messageManager.sendMessage(traders[4], traders[7], \"uk what fine, i never liked you anyway\");\r\n            messageManager.sendMessage(traders[0], traders[1], \"Can I buy your Ryerson hat for my pokemon cards\");\r\n\r\n        } catch (IOException | UserAlreadyExistsException | BadPasswordException | UserNotFoundException | AuthorizationException | TradableItemNotFoundException e) {\r\n            System.out.println(\"Temporary set up failed\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void regularSetup(){\r\n        try{\r\n            refreshFiles();\r\n            String[] traders = new String[8];\r\n            String[] traderNames = new String[]{\"Ilan\", \"James\", \"Navinn\", \"William\", \"Andrew\", \"Nilay\", \"Clara\", \"Morteza\"};\r\n                String[] traderPass = new String[]{\"bestTrader2020\", \"0verlyStr0ngP4ss\", \"123GUIsensei\", \"valorantPRO1\", \"superSearcher3000\", \"1234yaliN5678\", \"AW0nderfulP4ss\", \"designMaster100\"};\r\n            String[][] traderItems = new String[][]{{\"Ream of paper\", \"Nike Shoe\", \"Fancy Hat\"},\r\n                    {\"Steak\", \"Live Chicken\", \"Goat Milk\"},\r\n                    {\"MacBook\", \"ASUS motherboard\", \"Nvidia Geforce RTX 2080\"},\r\n                    {\"10 pencils\", \"Eraser\", \"Sharpener\"},\r\n                    {\"10 ounces of gold\", \"10 ounces of silver\", \"10 ounces of copper\"},\r\n                    {\"Watter Bottle\", \"Gatorade\", \"Coca-Cola bottle\"},\r\n                    {\"Monitor\", \"Keyboard\", \"Mouse\"},\r\n                    {\"Diamond\", \"Ruby\", \"Sapphire\"}};\r\n            String[][] traderDescriptions = new String[][]{{\"High quality\", \"very soft\", \"for special occasions\"},\r\n                    {\"Fresh and juicy\", \"Locally raised!\", \"Silky smooth and delicious\"},\r\n                    {\"Latest version\", \"Highest quality\", \"Used, but in perfect condition\"},\r\n                    {\"From Staples\", \"Best rubber in town!\", \"Has the sharpest blade of them all\"},\r\n                    {\"Rectangular piece of gold\", \"Rectangular piece of silver\", \"Rectangular piece of copper\"},\r\n                    {\"Evian water\", \"Blueberry flavour\", \"237 ml\"},\r\n                    {\"2k resolution, 144fps, 2ms delay\", \"mechanical\", \"bluetooth, 100-16000 dpi\"},\r\n                    {\"20 carat\", \"3 carat\", \"15 carat\"}};\r\n\r\n            String[] traderRequests = new String[]{\"Slippers\", \"An elephant\", \"IPod\", \"My house\", \"Silver thread\", \"Ice Cream Machine\", \"Webcam\", \"tissue box\"};\r\n            String[] traderRequestDescription = new String[]{\"Extremely comfortable\", \"from the circus!\", \"Collector's item\", \"Giant!\", \"Made of pure silver\", \"Worth $200\",\r\n                    \"Samsung, worth $200\", \"Silky smooth, Kleenex\"};\r\n\r\n            LoginManager loginManager = new LoginManager();\r\n            TraderManager traderManager = new TraderManager();\r\n            HandleItemRequestsManager handleRequestsManager = new HandleItemRequestsManager();\r\n            HandleFrozenManager handleFrozenManager = new HandleFrozenManager();\r\n            MessageManager messageManager = new MessageManager();\r\n            TradingManager tradingManager = new TradingManager();\r\n            ReportManager reportManager = new ReportManager();\r\n            UserQuery userQuery = new UserQuery();\r\n\r\n            try{\r\n                loginManager.registerUser(\"admin\", \"adminPassword1\", UserTypes.ADMIN);\r\n            }\r\n            catch (BadPasswordException | UserAlreadyExistsException e1){\r\n\r\n            }\r\n            for (int i = 0; i < traders.length; i++) {\r\n                System.out.println(i);\r\n                traders[i] = loginManager.registerUser(traderNames[i], traderPass[i], UserTypes.TRADER);\r\n                for (int j = 0; j < traderItems[0].length; j++)\r\n                    traderManager.addRequestItem(traders[i], traderItems[i][j], traderDescriptions[i][j]);\r\n                handleRequestsManager.processItemRequest(traders[i], userQuery.getRequestedItems(traders[i]).get(0), true);\r\n                handleRequestsManager.processItemRequest(traders[i], userQuery.getRequestedItems(traders[i]).get(0), true);\r\n                handleRequestsManager.processItemRequest(traders[i], userQuery.getRequestedItems(traders[i]).get(0), true);\r\n\r\n                traderManager.addRequestItem(traders[i], traderRequests[i], traderRequestDescription[i]);\r\n                traderManager.setCity(traders[i], \"Toronto\");\r\n            }\r\n\r\n            Date goodDate = new Date(System.currentTimeMillis() + 99999999);\r\n            Date goodDate2 = new Date(System.currentTimeMillis() + 999999999);\r\n            // Trades\r\n            for (int i = 1; i < traders.length / 2; i++) {\r\n                try {\r\n                    String acceptThis = tradingManager.requestTrade(traders[i], traders[traders.length - 1 - i], goodDate, goodDate2,\r\n                            \"123 bay street\", userQuery.getAvailableItems(traders[i]).get(0), userQuery.getAvailableItems(traders[traders.length - 1 - i]).get(0),\r\n                            3, \"Your item looks amazing. Lets trade!\"); // This is a temp trade\r\n                    String ongoing = tradingManager.requestTrade(traders[i], traders[traders.length - 1 - i], goodDate, null,\r\n                            \"123 bay street\", userQuery.getAvailableItems(traders[i]).get(1), userQuery.getAvailableItems(traders[traders.length - 1 - i]).get(1),\r\n                            3, \"This trade may seem strange, but I really need this item to impress my friends!\"); // This is a perma trade\r\n                    String requestedOnly = tradingManager.requestTrade(traders[i], traders[traders.length - 1 - i], goodDate, goodDate2,\r\n                            \"123 bay street\", userQuery.getAvailableItems(traders[i]).get(2), userQuery.getAvailableItems(traders[traders.length - 1 - i]).get(2),\r\n                            3, \"I'll be so grateful if you could accept this trade!\"); // this is for requesting temp trade\r\n                    // Only accepts request and doesn't confirm meetings so trade is ongoing\r\n                    tradingManager.acceptRequest(traders[traders.length - 1 - i], ongoing);\r\n                    // Confirms four meetings for a temporary trade and accepts request, meaning the trade is complete\r\n                    tradingManager.acceptRequest(traders[traders.length - 1 - i], acceptThis);\r\n                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis, true);\r\n                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis, true);\r\n                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis, true);\r\n                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis, true);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            for (int i = 0; i < traders.length; i++)\r\n                traderManager.addToWishList(traders[i], userQuery.getAvailableItems(traders[i - 1 == -1 ? traders.length - 1 : i - 1]).get(0));\r\n\r\n            traders[3] = traderManager.setCity(traders[3], \"new york\");\r\n            traders[4] = traderManager.setCity(traders[4], \"new york\");\r\n            traders[5] = traderManager.setCity(traders[5], \"new york\");\r\n            traders[6] = traderManager.setCity(traders[6], \"dallas\");\r\n            traders[7] = traderManager.setCity(traders[7], \"dallas\");\r\n            // For changing idle status\r\n            traders[0] = traderManager.setIdle(traders[0], true);\r\n            // For adding reviews\r\n            traderManager.addReview(traders[0], traders[3], 5.3, \"This guy was rude\");\r\n            traderManager.addReview(traders[2], traders[3], 2.3, \"This guy attacked me\");\r\n            traderManager.addReview(traders[1], traders[4], 9.3, \"This guy gave me free money\");\r\n            // For setting frozen status\r\n            handleFrozenManager.setFrozen(traders[2], true);\r\n            // For reporting users\r\n            reportManager.reportUser(traders[3], traders[6], \"This user drove off with my lambo and never gave me what I wanted\");\r\n            reportManager.reportUser(traders[1], traders[6], \"This user flew away with my helicopter and never gave me what I wanted\");\r\n            // For messaging users\r\n            messageManager.sendMessage(traders[5], traders[7], \"Dallas is pretty far can you come to New York instead\");\r\n            messageManager.sendMessage(traders[5], traders[7], \"Ik its a lot to ask but like yeehaw\");\r\n            messageManager.sendMessage(traders[5], traders[7], \"Dplease i got covid19 come to new yorkkk\");\r\n            messageManager.sendMessage(traders[5], traders[7], \"uk what fine, i never liked you anyway\");\r\n            messageManager.sendMessage(traders[4], traders[7], \"uk what fine, i never liked you anyway\");\r\n            messageManager.sendMessage(traders[0], traders[1], \"Yo man, that live chicken will love my backyard. How about we trade?\");\r\n        } catch (IOException | UserAlreadyExistsException | BadPasswordException | UserNotFoundException | AuthorizationException | TradableItemNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    // Deletes info in the ser files to reset it\r\n    private void refreshFiles() {\r\n        String[] paths = {DatabaseFilePaths.TRADE.getFilePath(), DatabaseFilePaths.TRADABLE_ITEM.getFilePath(),\r\n                DatabaseFilePaths.USER.getFilePath()};\r\n        for (String path : paths) {\r\n            try {\r\n                OutputStream buffer = new BufferedOutputStream(new FileOutputStream(path));\r\n                ObjectOutput output = new ObjectOutputStream(buffer);\r\n                output.writeObject(new ArrayList<>());\r\n                output.close();\r\n            } catch (IOException ignored) {\r\n            }\r\n        }\r\n        setProperty(TraderProperties.INCOMPLETE_TRADE_LIM, 3);\r\n        setProperty(TraderProperties.MINIMUM_AMOUNT_NEEDED_TO_BORROW, 1);\r\n        setProperty(TraderProperties.TRADE_LIMIT, 10);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the value of a property.\r\n     *\r\n     * @param propertyName  the property to change\r\n     * @param propertyValue the new value of that property\r\n     */\r\n    private void setProperty(TraderProperties propertyName, int propertyValue) {\r\n        try {\r\n            // get the file\r\n            File propertyFile = new File(DatabaseFilePaths.TRADER_CONFIG.getFilePath());\r\n            // initialize reader\r\n            FileReader reader = new FileReader(propertyFile);\r\n            // initialize properties object (to set data)\r\n            Properties properties = new Properties();\r\n            // associate this properties object with the file\r\n            properties.load(reader);\r\n            // set the property\r\n            properties.setProperty(propertyName.getProperty(), \"\" + propertyValue);\r\n\r\n            //update the file\r\n            FileWriter writer = new FileWriter(propertyFile);\r\n            properties.store(writer, \"\");\r\n            reader.close();\r\n            writer.close();\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/frontend/TemporarySetup.java	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ src/frontend/TemporarySetup.java	(date 1596843388916)
@@ -78,10 +78,10 @@
                     tradingManager.acceptRequest(traders[traders.length - 1 - i], ongoing);
                     // Confirms four meetings for a temporary trade and accepts request, meaning the trade is complete
                     tradingManager.acceptRequest(traders[traders.length - 1 - i], acceptThis);
-                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis, true);
-                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis, true);
-                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis, true);
-                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis, true);
+                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis);
+                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis);
+                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis);
+                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis);
                 } catch (Exception e) {
                     e.printStackTrace();
                 }
@@ -199,10 +199,10 @@
                     tradingManager.acceptRequest(traders[traders.length - 1 - i], ongoing);
                     // Confirms four meetings for a temporary trade and accepts request, meaning the trade is complete
                     tradingManager.acceptRequest(traders[traders.length - 1 - i], acceptThis);
-                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis, true);
-                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis, true);
-                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis, true);
-                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis, true);
+                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis);
+                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis);
+                    tradingManager.confirmMeetingGeneral(traders[i], acceptThis);
+                    tradingManager.confirmMeetingGeneral(traders[traders.length - 1 - i], acceptThis);
                 } catch (Exception e) {
                     e.printStackTrace();
                 }
Index: test/TestTrade.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import backend.exceptions.*;\r\nimport backend.models.TradableItem;\r\nimport backend.models.Trade;\r\nimport backend.models.users.Admin;\r\nimport backend.models.users.Trader;\r\nimport backend.models.users.User;\r\nimport backend.tradesystem.TraderProperties;\r\nimport backend.tradesystem.UserTypes;\r\nimport backend.tradesystem.admin_managers.HandleItemRequestsManager;\r\nimport backend.tradesystem.general_managers.LoginManager;\r\nimport backend.Database;\r\nimport java.util.Date;\r\n\r\nimport backend.tradesystem.queries.ItemQuery;\r\nimport backend.tradesystem.queries.TradeQuery;\r\nimport backend.tradesystem.queries.UserQuery;\r\nimport backend.tradesystem.trader_managers.TraderManager;\r\nimport backend.tradesystem.trader_managers.TradingManager;\r\nimport org.junit.*;\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Properties;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\npublic class TestTrade extends TestManager{\r\n    // Test branch set up\r\n    private TraderManager traderManager;\r\n    private LoginManager loginManager;\r\n    private HandleItemRequestsManager handleRequestsManager;\r\n    private TradingManager tradingManager;\r\n    private Database<User>  userDatabase;\r\n    private Database<Trade> tradeDatabase;\r\n    private Database<TradableItem> tradableItemDatabase;\r\n    private UserQuery userQuery;\r\n    private ItemQuery itemQuery;\r\n    private TradeQuery tradeQuery;\r\n\r\n    private Trader trader1;\r\n    private Trader trader2;\r\n    private Admin admin;\r\n    private final String USER_PATH = \"./test/testUsers.ser\";\r\n    private final String TRADABLE_ITEM_PATH = \"./test/testTradableItems.ser\";\r\n    private final String TRADE_PATH = \"./test/testTrades.ser\";\r\n    private final String TRADER_PROPERTY_FILE_PATH = \"./test/trader.properties\";\r\n    private Date goodDate = new Date(System.currentTimeMillis() + 99999999);\r\n    private Date goodDate2 = new Date(System.currentTimeMillis() + 999999999);\r\n\r\n    public TestTrade() throws IOException {\r\n        super();\r\n    }\r\n\r\n    @Before\r\n    public void beforeEach() {\r\n        try {\r\n            userQuery = new UserQuery(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            tradeQuery = new TradeQuery(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            itemQuery = new ItemQuery(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            traderManager = new TraderManager(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            loginManager = new LoginManager(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH, TRADER_PROPERTY_FILE_PATH);\r\n            tradingManager = new TradingManager(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            handleRequestsManager = new HandleItemRequestsManager(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            userDatabase = new Database<>(USER_PATH);\r\n            tradeDatabase = new Database<>(TRADE_PATH);\r\n            tradableItemDatabase = new Database<>(TRADABLE_ITEM_PATH);\r\n            trader1 = getTrader(loginManager.registerUser(\"user\", \"passssssssS11\", UserTypes.TRADER));\r\n            trader2 = getTrader(loginManager.registerUser(\"user1\", \"passssssssS11\", UserTypes.TRADER));\r\n            admin = (Admin) getUser(loginManager.registerUser(\"admin\", \"passssssssS11\", UserTypes.ADMIN));\r\n            traderManager.addRequestItem(trader1.getId(), \"apple\", \"sweet\");\r\n            traderManager.addRequestItem(trader1.getId(), \"apple1\", \"sweet1\");\r\n            traderManager.addRequestItem(trader1.getId(), \"apple2\", \"sweet2\");\r\n            traderManager.addRequestItem(trader2.getId(), \"pear1\", \"disgusting\");\r\n            traderManager.addRequestItem(trader2.getId(), \"pear2\", \"disgusting2\");\r\n            traderManager.addRequestItem(trader2.getId(), \"pear3\", \"disgusting3\");\r\n            handleRequestsManager.processItemRequest(trader1.getId(), userQuery.getRequestedItems(trader1.getId()).get(0), true);\r\n            handleRequestsManager.processItemRequest(trader1.getId(), userQuery.getRequestedItems(trader1.getId()).get(0), true);\r\n            handleRequestsManager.processItemRequest(trader1.getId(),userQuery.getRequestedItems(trader1.getId()).get(0), true);\r\n            handleRequestsManager.processItemRequest(trader2.getId(), userQuery.getRequestedItems(trader2.getId()).get(0), true);\r\n            handleRequestsManager.processItemRequest(trader2.getId(), userQuery.getRequestedItems(trader2.getId()).get(0), true);\r\n            handleRequestsManager.processItemRequest(trader2.getId(), userQuery.getRequestedItems(trader2.getId()).get(0), true);\r\n            update();\r\n\r\n        } catch (IOException ignored) {\r\n            fail(\"ERRORS WITH SETTING UP DATABASE FILES\");\r\n        } catch (UserAlreadyExistsException ignored) {\r\n            fail(\"REGISTERING USER ERROR\");\r\n        } catch (UserNotFoundException | AuthorizationException | TradableItemNotFoundException | BadPasswordException e) {\r\n            e.printStackTrace();\r\n            fail();\r\n        }\r\n    }\r\n\r\n    @After\r\n    public void afterEach() {\r\n        String[] paths = {USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH};\r\n        for (String path : paths) {\r\n            try {\r\n                OutputStream buffer = new BufferedOutputStream(new FileOutputStream(path));\r\n                ObjectOutput output = new ObjectOutputStream(buffer);\r\n                output.writeObject(new ArrayList<>());\r\n                output.close();\r\n            } catch (IOException ignored) {\r\n            }\r\n        }\r\n        setProperty(TraderProperties.INCOMPLETE_TRADE_LIM, 3);\r\n        setProperty(TraderProperties.MINIMUM_AMOUNT_NEEDED_TO_BORROW, 1);\r\n        setProperty(TraderProperties.TRADE_LIMIT, 10);\r\n    }\r\n\r\n    @Test\r\n    public void testTemporaryTrade() {\r\n        try{\r\n            String item1 = userQuery.getAvailableItems(trader1.getId()).get(0);\r\n            String item2 = userQuery.getAvailableItems(trader2.getId()).get(0);\r\n            Trade trade = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, goodDate2, \"home\",\r\n                    item1, item2, 3, \"This is a trade\"));\r\n            // make sure that the trades are requested\r\n            update();\r\n            assertEquals(userQuery.getRequestedTrades(trader1.getId()).get(0), userQuery.getRequestedTrades(trader2.getId()).get(0));\r\n            //makes sure that the items are still in each person's inventory\r\n            assertEquals(userQuery.getAvailableItems(trader1.getId()).get(0), item1);\r\n            assertEquals(userQuery.getAvailableItems(trader2.getId()).get(0), item2);\r\n\r\n\r\n            trader1.getAvailableItems().remove(item1);\r\n            getUserDatabase().update(trader1);\r\n            // make sure trader1 can no longer accept the trade\r\n            try {\r\n                tradingManager.acceptRequest(trader1.getId(), trade.getId());\r\n                fail(\"Accept request should not work\");\r\n            } catch (CannotTradeException e){\r\n                //GOOD!\r\n            }\r\n            trader1.getAvailableItems().add(item1);\r\n            getUserDatabase().update(trader1);\r\n            // Once trader2 accepts ...\r\n            assertTrue(tradingManager.acceptRequest(trader2.getId(), trade.getId()));\r\n            update();\r\n            // make sure the trades are correctly in their respective lists\r\n            assertEquals(trader1.getAcceptedTrades().get(0), trader2.getAcceptedTrades().get(0));\r\n            // and that they're no longer requested\r\n            assertTrue(trader1.getRequestedTrades().size() == 0);\r\n            assertTrue(trader2.getRequestedTrades().size() == 0);\r\n            // and that the items are no longer in the trader's inventories\r\n            assertFalse(trader1.getAvailableItems().contains(item1));\r\n            assertFalse(trader2.getAvailableItems().contains(item2));\r\n\r\n            //confirm trade\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId(), true);\r\n            // Make sure nothing changed after first confirmation\r\n            assertNotEquals(trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1), item2);\r\n            assertNotEquals(trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1), item1);\r\n            assertEquals(0, trader1.getTradeCount());\r\n            assertEquals(0, trader2.getTradeCount());\r\n            assertEquals(0, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(0, trader1.getTotalItemsBorrowed());\r\n\r\n            // Make sure confirming first meeting again does nothing\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId(), true);\r\n            assertNotEquals(trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1), item2);\r\n            assertNotEquals(trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1), item1);\r\n            assertEquals(0, trader1.getTradeCount());\r\n            assertEquals(0, trader2.getTradeCount());\r\n            assertEquals(0, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(0, trader1.getTotalItemsBorrowed());\r\n\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId(), true);\r\n\r\n            //check the trade is now in the completed trades\r\n            update();\r\n            // check that the trade is still accepted\r\n            assertTrue(trader1.getAcceptedTrades().size() == 1);\r\n            assertTrue(trader2.getAcceptedTrades().size() == 1);\r\n            // check that the items are in the correct pos\r\n            assertEquals(trader1.getOngoingItems().get(trader1.getOngoingItems().size()-1), item2);\r\n            assertEquals(trader2.getOngoingItems().get(trader2.getOngoingItems().size()-1), item1);\r\n            assertEquals(0, trader1.getTradeCount());\r\n            assertEquals(0, trader2.getTradeCount());\r\n            assertEquals(0, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(0, trader1.getTotalItemsBorrowed());\r\n\r\n\r\n\r\n            /*\r\n            * THIS POINT MARKS WHERE THE SECOND MEETING IS BEING TESTED\r\n            * */\r\n\r\n//            trader1.getAvailableItems().remove(item2);\r\n//            userDatabase.update(trader1);\r\n//            try {\r\n//                tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId(), true);\r\n//                fail();\r\n//            }catch (CannotTradeException e){\r\n//\r\n//            }\r\n//            try {\r\n//                tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId(), true);\r\n//                fail();\r\n//            }catch (CannotTradeException e){\r\n//\r\n//            }\r\n//            trader1.getAvailableItems().add(item2);\r\n//            userDatabase.update(trader1);\r\n\r\n            // This part makes sure that the incomplete trade count does not affect trade confirmation\r\n            trader1.getAcceptedTrades().add(\"a\");\r\n            trader1.getAcceptedTrades().add(\"b\");\r\n            trader1.getAcceptedTrades().add(\"c\");\r\n            userDatabase.update(trader1);\r\n\r\n\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId(), true);\r\n            // Make sure nothing has changed after first confirmation.\r\n            update();\r\n            // check that the trade is still accepted\r\n            assertTrue(trader1.getAcceptedTrades().size() == 4);\r\n            assertTrue(trader2.getAcceptedTrades().size() == 1);\r\n            // check that the items are in the correct pos\r\n            assertEquals(trader1.getOngoingItems().get(trader1.getOngoingItems().size()-1), item2);\r\n            assertEquals(trader2.getOngoingItems().get(trader2.getOngoingItems().size()-1), item1);\r\n            assertEquals(0, trader1.getTradeCount());\r\n            assertEquals(0, trader2.getTradeCount());\r\n            assertEquals(0, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(0, trader1.getTotalItemsBorrowed());\r\n\r\n            // Make sure confirming again will not do anything\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId(), true);\r\n            update();\r\n            // check that the trade is still accepted\r\n            assertTrue(trader1.getAcceptedTrades().size() == 4);\r\n            assertTrue(trader2.getAcceptedTrades().size() == 1);\r\n            // check that the items are in the correct pos\r\n            assertEquals(trader1.getOngoingItems().get(trader1.getOngoingItems().size()-1), item2);\r\n            assertEquals(trader2.getOngoingItems().get(trader2.getOngoingItems().size()-1), item1);\r\n            assertEquals(0, trader1.getTradeCount());\r\n            assertEquals(0, trader2.getTradeCount());\r\n            assertEquals(0, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(0, trader1.getTotalItemsBorrowed());\r\n\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId(), true);\r\n            //check the trade is now in the completed trades\r\n            update();\r\n            assertEquals(trader1.getCompletedTrades().get(0), trade.getId());\r\n            assertEquals(trader2.getCompletedTrades().get(0), trade.getId());\r\n            // check that the trade is no longer in the accepted trades\r\n            assertTrue(trader1.getAcceptedTrades().size() == 3);\r\n            assertTrue(trader2.getAcceptedTrades().size() == 0);\r\n            // check that the items are in the correct pos\r\n            assertEquals(trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1), item1);\r\n            assertEquals(trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1), item2);\r\n            assertEquals(1, trader1.getTradeCount());\r\n            assertEquals(1, trader2.getTradeCount());\r\n            assertEquals(0, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(0, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader1.getOngoingItems().size());\r\n            assertEquals(0, trader2.getOngoingItems().size());\r\n            assertFalse(trader1.getAvailableItems().contains(item2));\r\n            assertFalse(trader2.getAvailableItems().contains(item1));\r\n\r\n\r\n    } catch (UserNotFoundException | AuthorizationException | CannotTradeException | TradeNotFoundException e) {\r\n        fail(e.getMessage());\r\n        e.printStackTrace();\r\n    }\r\n    }\r\n\r\n    @Test\r\n    public void testPermanentTrade(){\r\n        try {\r\n            String item1 = trader1.getAvailableItems().get(0);\r\n            String item2 = trader2.getAvailableItems().get(0);\r\n            Trade trade = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"home\",\r\n                    item1, item2, 3, \"This is a trade\"));\r\n            // make sure that the trades are requested\r\n            update();\r\n            assertEquals(trader1.getRequestedTrades().get(0), trader2.getRequestedTrades().get(0));\r\n            //makes sure that the items are still in each person's inventory\r\n            assertEquals(trader1.getAvailableItems().get(0), item1);\r\n            assertEquals(trader2.getAvailableItems().get(0), item2);\r\n            trader1.getAvailableItems().remove(item1);\r\n            userDatabase.update(trader1);\r\n            // make sure trader1 can no longer accept the trade\r\n            try {\r\n                tradingManager.acceptRequest(trader1.getId(), trade.getId());\r\n                fail(\"Accept request should not work\");\r\n            } catch (CannotTradeException e){\r\n                //GOOD!\r\n            }\r\n            trader1.getAvailableItems().add(item1);\r\n            userDatabase.update(trader1);\r\n            //make sure trader1 can accept the trade\r\n            tradingManager.acceptRequest(trader1.getId(), trade.getId());\r\n            // Once trader2 accepts ...\r\n            assertTrue(tradingManager.acceptRequest(trader2.getId(), trade.getId()));\r\n            update();\r\n            // make sure the trades are correctly in their respective lists\r\n            assertEquals(trader1.getAcceptedTrades().get(0), trader2.getAcceptedTrades().get(0));\r\n            // and that they're no longer requested\r\n            assertTrue(trader1.getRequestedTrades().size() == 0);\r\n            assertTrue(trader2.getRequestedTrades().size() == 0);\r\n            // and that the items are no longer in the trader's inventories\r\n            assertFalse(trader1.getAvailableItems().contains(item1));\r\n            assertFalse(trader2.getAvailableItems().contains(item2));\r\n\r\n            // This part makes sure that the incomplete trade count does not affect trade confirmation\r\n            trader1.getAcceptedTrades().add(\"a\");\r\n            trader1.getAcceptedTrades().add(\"b\");\r\n            trader1.getAcceptedTrades().add(\"c\");\r\n            userDatabase.update(trader1);\r\n\r\n            //confirm trade\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId(), true);\r\n\r\n            //check the trade is now in the completed trades\r\n            update();\r\n            assertEquals(trader1.getCompletedTrades().get(0), trade.getId());\r\n            assertEquals(trader2.getCompletedTrades().get(0), trade.getId());\r\n            // check that the trade is no longer in the accepted trades\r\n            assertTrue(trader1.getAcceptedTrades().size() == 3);\r\n            assertTrue(trader2.getAcceptedTrades().size() == 0);\r\n            // check that the items are in the correct pos\r\n            assertEquals(trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1), item2);\r\n            assertEquals(trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1), item1);\r\n            assertEquals(1, trader1.getTradeCount());\r\n            assertEquals(1, trader2.getTradeCount());\r\n            assertEquals(0, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(0, trader1.getTotalItemsBorrowed());\r\n\r\n\r\n        } catch (UserNotFoundException | AuthorizationException | CannotTradeException | TradeNotFoundException e) {\r\n            fail(e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testEditTrade(){\r\n        try {\r\n            String item1 = trader1.getAvailableItems().get(0);\r\n            String item2 = trader2.getAvailableItems().get(0);\r\n            String item3 = trader1.getAvailableItems().get(1);\r\n            String item4 = trader2.getAvailableItems().get(1);\r\n\r\n            Trade trade1 = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"home\",\r\n                    item1, item2, 1, \"This is a trade\"));\r\n\r\n            ///Trade is requested\r\n            update();\r\n            assertEquals(trader1.getRequestedTrades().get(0), trader2.getRequestedTrades().get(0));\r\n            assertEquals(trader1.getRequestedTrades().get(0), trade1.getId());\r\n\r\n            try {\r\n                tradingManager.counterTradeOffer(trader1.getId(), trade1.getId(), goodDate, null, \"...\",\r\n                        item3, item4, \"\");\r\n                fail(\"This user should not be able to send an edited trade offer\");\r\n            } catch (CannotTradeException e) {\r\n                assertEquals(\"A previous trade offer has already been sent\", e.getMessage());\r\n            }\r\n\r\n            try {\r\n                tradingManager.counterTradeOffer(trader2.getId(), trade1.getId(), goodDate, null, \"...\",\r\n                        item3, item4, \"\");\r\n                fail(\"This user is giving items they don't have\");\r\n            } catch (CannotTradeException e) {\r\n                assertEquals(\"One of the traders does not have the required item!\", e.getMessage());\r\n            }\r\n\r\n            tradingManager.counterTradeOffer(trader2.getId(), trade1.getId(), goodDate, goodDate2, \"Home\",\r\n                    item4, item3, \"\");\r\n            //Trade should have same ID and location in trades\r\n            update();\r\n            assertEquals(trader1.getRequestedTrades().get(0), trader2.getRequestedTrades().get(0));\r\n            assertEquals(trader1.getRequestedTrades().get(0), trade1.getId());\r\n\r\n            Trade editedTrade = getTrade(trader1.getRequestedTrades().get(0));\r\n\r\n            // Comparing edited trade to the parameters we passed to it\r\n            update();\r\n            assertEquals(editedTrade.getId(), trade1.getId());\r\n            assertEquals(editedTrade.getFirstUserOffer(), item3);\r\n            assertEquals(editedTrade.getSecondUserOffer(), item4);\r\n            assertEquals(editedTrade.getMeetingTime(), goodDate);\r\n            assertEquals(editedTrade.getMeetingLocation(), \"Home\");\r\n            assertEquals(editedTrade.getSecondMeetingTime(), goodDate2);\r\n\r\n            try {\r\n                tradingManager.counterTradeOffer(trader1.getId(), trade1.getId(), goodDate, null, \"...\",\r\n                        item2, item1, \"\");\r\n                fail(\"You cant send an offer for an item you dont have\");\r\n            } catch (CannotTradeException e) {\r\n                assertEquals(\"One of the traders does not have the required item!\", e.getMessage());\r\n            }\r\n\r\n            try {\r\n                tradingManager.counterTradeOffer(trader2.getId(), trade1.getId(), goodDate, null, \"...\",\r\n                        item2, item1, \"\");\r\n                fail(\"This trader already sent an offer.\");\r\n            } catch (CannotTradeException e) {\r\n                assertEquals(\"A previous trade offer has already been sent\", e.getMessage());\r\n            }\r\n\r\n            tradingManager.counterTradeOffer(trader1.getId(), trade1.getId(), goodDate, null, \"...\",\r\n                    item1, item2, \"\");\r\n\r\n            //Trade should have same ID and location in trades\r\n            update();\r\n            assertEquals(trader1.getRequestedTrades().get(0), trader2.getRequestedTrades().get(0));\r\n            assertEquals(trader1.getRequestedTrades().get(0), trade1.getId());\r\n\r\n            editedTrade = getTrade(trader1.getRequestedTrades().get(0));\r\n\r\n            // Comparing edited trade to the parameters we passed to it\r\n            update();\r\n            assertEquals(editedTrade.getId(), trade1.getId());\r\n            assertEquals(editedTrade.getFirstUserOffer(), item1);\r\n            assertEquals(editedTrade.getSecondUserOffer(), item2);\r\n\r\n            try{\r\n                tradingManager.counterTradeOffer(trader2.getId(), trade1.getId(), goodDate, null, \"...\",\r\n                        item4, item3, \"\");\r\n                fail(\"Trade limit should be exceeded\");\r\n            }\r\n            catch(CannotTradeException e){\r\n                assertEquals(\"Too many edits. Trade is cancelled.\", e.getMessage());\r\n            }\r\n\r\n            tradingManager.acceptRequest(trader2.getId(), trade1.getId());\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), trade1.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), trade1.getId(), true);\r\n\r\n            update();\r\n            assertEquals(item2, trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1));\r\n            assertEquals(item1, trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1));\r\n\r\n\r\n\r\n            /*\r\n            *******************************\r\n\r\n            Testing lends\r\n\r\n            *******************************\r\n            */\r\n\r\n            Trade trade2 = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"...\",\r\n                    item3, \"\", 3, \"\"));\r\n\r\n            tradingManager.counterTradeOffer(trader2.getId(), trade2.getId(), goodDate, null, \"...\", item4, \"\", \"\");\r\n\r\n            try{\r\n                tradingManager.acceptRequest(trader1.getId(), trade2.getId());\r\n                fail(\"This user should not have enough lent to borrow\");\r\n            }\r\n            catch (CannotTradeException e){\r\n                assertEquals(e.getMessage(), \"The trader who originally sent the trade can't borrow\");\r\n            }\r\n\r\n            tradingManager.counterTradeOffer(trader1.getId(), trade2.getId(), goodDate, null, \"...\", item3, \"\", \"\");\r\n            tradingManager.counterTradeOffer(trader2.getId(), trade2.getId(), goodDate, null, \"...\", \"\", item3, \"\");\r\n\r\n            tradingManager.acceptRequest(trader1.getId(), trade2.getId());\r\n            update();\r\n            assertEquals(0, trader1.getTotalAcceptedBorrows());\r\n            assertEquals(0, trader2.getTotalAcceptedBorrows());\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), trade2.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), trade2.getId(), true);\r\n            update();\r\n            assertEquals(item2, trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1));\r\n            assertEquals(item3, trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1));\r\n            assertEquals(1, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader1.getTotalAcceptedBorrows());\r\n\r\n                        /*\r\n            *******************************\r\n\r\n            Testing borrows\r\n\r\n            *******************************\r\n            */\r\n\r\n\r\n\r\n            Trade trade3 = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"...\",\r\n                    \"\", item3, 3, \"\"));\r\n            Trade trade4 = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, goodDate2, \"...\",\r\n                    \"\", item1, 3, \"\"));\r\n\r\n            tradingManager.counterTradeOffer(trader2.getId(), trade3.getId(), goodDate, null, \"...\", item3, \"\", \"\");\r\n\r\n            tradingManager.acceptRequest(trader1.getId(), trade3.getId());\r\n            update();\r\n            assertEquals(1, trader1.getTotalAcceptedBorrows());\r\n\r\n            try{\r\n                tradingManager.acceptRequest(trader2.getId(), trade4.getId());\r\n                fail(\"Alraedy accepted a borrow\");\r\n            }\r\n            catch (CannotTradeException e){\r\n                assertEquals(e.getMessage(), \"The trader who originally sent the trade can't borrow\");\r\n            }\r\n\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), trade3.getId(), true);\r\n\r\n            update();\r\n            assertEquals(1, trader1.getTotalAcceptedBorrows());\r\n\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), trade3.getId(), true);\r\n\r\n            update();\r\n            assertEquals(0, trader1.getTotalAcceptedBorrows());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(1, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalAcceptedBorrows());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n\r\n            try{\r\n                tradingManager.acceptRequest(trader2.getId(), trade4.getId());\r\n                fail(\"Trader 1 needs to borrow more\");\r\n            }\r\n            catch (CannotTradeException e){\r\n                assertEquals(e.getMessage(), \"The trader who originally sent the trade can't borrow\");\r\n            }\r\n            trader1.setTotalItemsLent(12300);\r\n            updateUserDatabase(trader1);\r\n\r\n            tradingManager.acceptRequest(trader2.getId(), trade4.getId());\r\n            update();\r\n            assertEquals(1, trader1.getTotalAcceptedBorrows());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalAcceptedBorrows());\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), trade4.getId(), true);\r\n            update();\r\n            assertEquals(1, trader1.getTotalAcceptedBorrows());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalAcceptedBorrows());\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), trade4.getId(), true);\r\n            update();\r\n            assertEquals(1, trader1.getTotalAcceptedBorrows());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalAcceptedBorrows());\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), trade4.getId(), true);\r\n            update();\r\n            assertEquals(1, trader1.getTotalAcceptedBorrows());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalAcceptedBorrows());\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), trade4.getId(), true);\r\n            update();\r\n            assertEquals(0, trader1.getTotalAcceptedBorrows());\r\n            assertEquals(2, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalAcceptedBorrows());\r\n\r\n\r\n\r\n\r\n        } catch (CannotTradeException | UserNotFoundException | AuthorizationException | TradeNotFoundException e) {\r\n            fail();\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testLendTrade(){\r\n        try {\r\n            String item1 = trader1.getAvailableItems().get(0);\r\n            String item2 = trader2.getAvailableItems().get(0);\r\n\r\n\r\n            trader1.setTradeCount(10);\r\n            userDatabase.update(trader1);\r\n\r\n            try {\r\n                tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"Home\",\r\n                        item1, \"\", 1, \"This is a lend\");\r\n                fail(\"Trade limit is exceeded\");\r\n            }\r\n            catch (CannotTradeException e){\r\n                assertEquals(\"This user cannot trade due to trading restrictions\", e.getMessage());\r\n            }\r\n            trader1.setTradeCount(0);\r\n            userDatabase.update(trader1);\r\n            Trade t = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"Home\",\r\n                        item1, \"\", 1, \"This is a lend\"));\r\n\r\n            update();\r\n            assertEquals(trader1.getRequestedTrades().get(0), trader2.getRequestedTrades().get(0));\r\n            assertEquals(trader1.getAvailableItems().size(), 3);\r\n            assertEquals(trader2.getAvailableItems().size(), 3);\r\n            tradingManager.acceptRequest(trader1.getId(), t.getId());\r\n            tradingManager.acceptRequest(trader2.getId(), t.getId());\r\n            update();\r\n            assertEquals(trader1.getAcceptedTrades().get(0), trader2.getAcceptedTrades().get(0));\r\n            assertEquals(trader1.getRequestedTrades().size(), 0);\r\n            assertEquals(0, trader2.getRequestedTrades().size());\r\n\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);\r\n\r\n            update();\r\n            assertEquals(trader1.getAvailableItems().size(), 2);\r\n            assertEquals(trader2.getAvailableItems().size(), 3);\r\n\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);\r\n\r\n            update();\r\n            assertEquals(1, trader1.getCompletedTrades().size());\r\n            assertEquals(0, trader1.getAcceptedTrades().size());\r\n            assertEquals(2, trader1.getAvailableItems().size());\r\n\r\n            assertEquals(1, trader2.getCompletedTrades().size());\r\n            assertEquals(0, trader2.getAcceptedTrades().size());\r\n            assertEquals(4, trader2.getAvailableItems().size());\r\n            assertEquals(item1, trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1));\r\n\r\n            assertEquals(1, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(0, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(1, trader1.getTradeCount());\r\n            assertEquals(1, trader2.getTradeCount());\r\n\r\n            String item3 = trader1.getAvailableItems().get(0);\r\n            String item4 = trader2.getAvailableItems().get(0);\r\n            try {\r\n                tradingManager.requestTrade(trader2.getId(), trader1.getId(), goodDate, goodDate2, \"home\",\r\n                        item3, \"\", 1, \"This is a lend2\");\r\n                fail(\"Offering an item i dont' have\");\r\n            }\r\n            catch (AuthorizationException e){\r\n                assertEquals(\"The trade offer contains an item that the user does not have\", e.getMessage());\r\n            }\r\n            t= getTrade(tradingManager.requestTrade(trader2.getId(), trader1.getId(), goodDate, goodDate2, \"home\",\r\n                    item4, \"\", 1, \"This is a lend2\"));\r\n\r\n            tradingManager.acceptRequest(trader1.getId(), t.getId());\r\n            update();\r\n            assertEquals(3, trader2.getAvailableItems().size());\r\n            assertEquals(2, trader1.getAvailableItems().size());\r\n            assertEquals(1, trader2.getOngoingItems().size());\r\n            assertEquals(0, trader1.getOngoingItems().size());\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);\r\n\r\n\r\n            update();\r\n            assertEquals(1, trader1.getTradeCount());\r\n            assertEquals(1, trader2.getTradeCount());\r\n            assertEquals(1, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(3, trader2.getAvailableItems().size());\r\n            assertEquals(2, trader1.getAvailableItems().size());\r\n            assertEquals(0, trader2.getOngoingItems().size());\r\n            assertEquals(1, trader1.getOngoingItems().size());\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);\r\n            update();\r\n            assertEquals(2, trader1.getTradeCount());\r\n            assertEquals(2, trader2.getTradeCount());\r\n            assertEquals(1, trader1.getTotalItemsLent());\r\n            assertEquals(1, trader2.getTotalItemsLent());\r\n            assertEquals(4, trader2.getAvailableItems().size());\r\n            assertEquals(2, trader1.getAvailableItems().size());\r\n            assertEquals(0, trader2.getOngoingItems().size());\r\n            assertEquals(0, trader1.getOngoingItems().size());\r\n\r\n        } catch (UserNotFoundException | TradeNotFoundException | AuthorizationException | CannotTradeException e) {\r\n            e.printStackTrace();\r\n            fail();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testBorrowTrade(){\r\n        try{\r\n\r\n            String item1 = trader1.getAvailableItems().get(0);\r\n            String item2 = trader2.getAvailableItems().get(0);\r\n\r\n            try {\r\n                tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"Home\",\r\n                        \"\", item1, 1, \"This is a lend\");\r\n                fail(\"Did not lend first\");\r\n            }\r\n            catch (CannotTradeException e){\r\n                assertEquals(\"You have not lent enough to borrow\", e.getMessage());\r\n            }\r\n\r\n            trader1.setTotalItemsLent(1);\r\n            userDatabase.update(trader1);\r\n\r\n            try {\r\n                tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"Home\",\r\n                        \"\", item1, 1, \"This is a lend\");\r\n                fail(\"The item does not exist in the other person's inventory\");\r\n            }\r\n            catch (AuthorizationException e){\r\n                assertEquals(\"The trade offer contains an item that the user does not have\", e.getMessage());\r\n            }\r\n\r\n            trader1.setTradeCount(10);\r\n            userDatabase.update(trader1);\r\n\r\n            try {\r\n                tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"Home\",\r\n                        \"\", item2, 1, \"This is a lend\");\r\n                fail(\"Trade limit is exceeded\");\r\n            }\r\n            catch (CannotTradeException e){\r\n                assertEquals(\"This user cannot trade due to trading restrictions\", e.getMessage());\r\n            }\r\n            trader1.setTradeCount(0);\r\n            userDatabase.update(trader1);\r\n            Trade t = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"Home\",\r\n                    \"\", item2, 1, \"This is a lend\"));\r\n\r\n            update();\r\n            assertEquals(trader1.getRequestedTrades().get(0), trader2.getRequestedTrades().get(0));\r\n            assertEquals(trader1.getAvailableItems().size(), 3);\r\n            assertEquals(trader2.getAvailableItems().size(), 3);\r\n            tradingManager.acceptRequest(trader1.getId(), t.getId());\r\n            tradingManager.acceptRequest(trader2.getId(), t.getId());\r\n            update();\r\n            assertEquals(trader1.getAcceptedTrades().get(0), trader2.getAcceptedTrades().get(0));\r\n            assertEquals(trader1.getRequestedTrades().size(), 0);\r\n            assertEquals(0, trader2.getRequestedTrades().size());\r\n\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);\r\n\r\n            update();\r\n            assertEquals(trader1.getAvailableItems().size(), 3);\r\n            assertEquals(trader2.getAvailableItems().size(), 2);\r\n\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);\r\n\r\n            update();\r\n            assertEquals(1, trader1.getCompletedTrades().size());\r\n            assertEquals(0, trader1.getAcceptedTrades().size());\r\n            assertEquals(2, trader2.getAvailableItems().size());\r\n\r\n            assertEquals(1, trader2.getCompletedTrades().size());\r\n            assertEquals(0, trader2.getAcceptedTrades().size());\r\n            assertEquals(4, trader1.getAvailableItems().size());\r\n            assertEquals(item2, trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1));\r\n\r\n            assertEquals(1, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(1, trader1.getTradeCount());\r\n            assertEquals(1, trader2.getTradeCount());\r\n\r\n            String item3 = trader1.getAvailableItems().get(0);\r\n            String item4 = trader2.getAvailableItems().get(0);\r\n\r\n            try {\r\n                tradingManager.requestTrade(trader2.getId(), trader1.getId(), goodDate, goodDate2, \"home\",\r\n                        \"\",item3, 1, \"This is a lend2\");\r\n                fail(\"Have not borrowed\");\r\n            }\r\n            catch (CannotTradeException e){\r\n                assertEquals(\"You have not lent enough to borrow\", e.getMessage());\r\n            }\r\n\r\n            trader2.setTotalItemsLent(1);\r\n            userDatabase.update(trader2);\r\n\r\n            try {\r\n                tradingManager.requestTrade(trader2.getId(), trader1.getId(), goodDate, goodDate2, \"home\",\r\n                        \"\",item4, 1, \"This is a lend2\");\r\n                fail(\"Offering an item i dont' have\");\r\n            }\r\n            catch (AuthorizationException e){\r\n                assertEquals(\"The trade offer contains an item that the user does not have\", e.getMessage());\r\n            }\r\n            t= getTrade(tradingManager.requestTrade(trader2.getId(), trader1.getId(), goodDate, goodDate2, \"home\",\r\n                    \"\", item3, 1, \"This is a lend2\"));\r\n\r\n            tradingManager.acceptRequest(trader1.getId(), t.getId());\r\n            update();\r\n            assertEquals(2, trader2.getAvailableItems().size());\r\n            assertEquals(3, trader1.getAvailableItems().size());\r\n            assertEquals(0, trader2.getOngoingItems().size());\r\n            assertEquals(1, trader1.getOngoingItems().size());\r\n\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);\r\n\r\n\r\n            update();\r\n            assertEquals(1, trader1.getTradeCount());\r\n            assertEquals(1, trader2.getTradeCount());\r\n            assertEquals(1, trader1.getTotalItemsLent());\r\n            assertEquals(1, trader2.getTotalItemsLent());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(2, trader2.getAvailableItems().size());\r\n            assertEquals(3, trader1.getAvailableItems().size());\r\n            assertEquals(1, trader2.getOngoingItems().size());\r\n            assertEquals(0, trader1.getOngoingItems().size());\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);\r\n            update();\r\n            assertEquals(2, trader1.getTradeCount());\r\n            assertEquals(2, trader2.getTradeCount());\r\n            assertEquals(1, trader1.getTotalItemsLent());\r\n            assertEquals(1, trader2.getTotalItemsLent());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(1, trader2.getTotalItemsBorrowed());\r\n            assertEquals(2, trader2.getAvailableItems().size());\r\n            assertEquals(4, trader1.getAvailableItems().size());\r\n            assertEquals(0, trader2.getOngoingItems().size());\r\n            assertEquals(0, trader1.getOngoingItems().size());\r\n\r\n        } catch (UserNotFoundException | TradeNotFoundException | AuthorizationException | CannotTradeException e) {\r\n            e.printStackTrace();\r\n            fail();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testRescindTradeOffer(){\r\n        try {\r\n            String item1 = trader1.getAvailableItems().get(0);\r\n            String item2 = trader1.getAvailableItems().get(1);\r\n            String item4 = trader2.getAvailableItems().get(0);\r\n            String item5 = trader2.getAvailableItems().get(1);\r\n            trader1.setTotalItemsLent(trader1.getTotalItemsLent() + 1);\r\n            userDatabase.update(trader1);\r\n            Trade t1 = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, goodDate2, \"home\",\r\n                    item1, \"\", 1, \"This is a lend2\"));\r\n            Trade t2 =getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"home\",\r\n                    item2, item4, 1, \"This is a lend2\"));\r\n            Trade t3 =getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"home\",\r\n                    \"\", item5, 1, \"This is a lend2\"));\r\n\r\n            update();\r\n            assertTrue(trader1.getRequestedTrades().contains(t1.getId()));\r\n            assertTrue(trader1.getRequestedTrades().contains(t2.getId()));\r\n            assertTrue(trader1.getRequestedTrades().contains(t3.getId()));\r\n            assertTrue(trader2.getRequestedTrades().contains(t1.getId()));\r\n            assertTrue(trader2.getRequestedTrades().contains(t2.getId()));\r\n            assertTrue(trader2.getRequestedTrades().contains(t3.getId()));\r\n            // Only the sender, trader1, has accepted this trade\r\n\r\n            tradingManager.rescindTradeRequest(t1.getId());\r\n            update();\r\n            assertFalse(trader1.getRequestedTrades().contains(t1.getId()));\r\n            assertFalse(trader2.getRequestedTrades().contains(t1.getId()));\r\n\r\n            // This trade will be accepted.\r\n            tradingManager.acceptRequest(trader2.getId(), t2.getId());\r\n            // Now it is accepted.\r\n            try{\r\n                tradingManager.rescindTradeRequest(t2.getId());\r\n                fail();\r\n            } catch (Exception e){\r\n\r\n            }\r\n\r\n            // This other trade will be confirmed\r\n            tradingManager.acceptRequest(trader2.getId(), t3.getId());\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), t3.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), t3.getId(), true);\r\n            try{\r\n                tradingManager.rescindTradeRequest(t3.getId());\r\n                fail();\r\n            } catch (Exception e){\r\n\r\n            }\r\n\r\n        }\r\n        catch (Exception e){\r\n            e.printStackTrace();\r\n            fail();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testRescindAcceptedTrade(){\r\n        try {\r\n            String item1 = trader1.getAvailableItems().get(0);\r\n            String item2 = trader1.getAvailableItems().get(1);\r\n            String item4 = trader2.getAvailableItems().get(0);\r\n            String item5 = trader2.getAvailableItems().get(1);\r\n            trader1.setTotalItemsLent(1);\r\n            userDatabase.update(trader1);\r\n            Trade t1 = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, goodDate2, \"home\",\r\n                    item1, \"\", 1, \"This is a lend2\"));\r\n            Trade t2 =getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"home\",\r\n                    item2, item4, 1, \"This is a lend2\"));\r\n            Trade t3 =getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, null, \"home\",\r\n                    \"\", item5, 1, \"This is a lend2\"));\r\n\r\n            update();\r\n            assertTrue(trader1.getRequestedTrades().contains(t1.getId()));\r\n            assertTrue(trader1.getRequestedTrades().contains(t2.getId()));\r\n            assertTrue(trader1.getRequestedTrades().contains(t3.getId()));\r\n            assertTrue(trader2.getRequestedTrades().contains(t1.getId()));\r\n            assertTrue(trader2.getRequestedTrades().contains(t2.getId()));\r\n            assertTrue(trader2.getRequestedTrades().contains(t3.getId()));\r\n            // Only the sender, trader1, has accepted this trade\r\n            update();\r\n            try{\r\n                tradingManager.rescindOngoingTrade(t1.getId());\r\n                fail();\r\n            } catch (Exception e){\r\n\r\n            }\r\n\r\n\r\n            // This trade will be accepted.\r\n            tradingManager.acceptRequest(trader2.getId(), t2.getId());\r\n            // Now it is accepted.\r\n            update();\r\n            assertFalse(trader1.getRequestedTrades().contains(t2.getId()));\r\n            assertFalse(trader2.getRequestedTrades().contains(t2.getId()));\r\n            assertTrue(trader1.getAcceptedTrades().contains(t2.getId()));\r\n            assertTrue(trader2.getAcceptedTrades().contains(t2.getId()));\r\n            assertFalse(trader1.getAvailableItems().contains(item2));\r\n            assertFalse(trader2.getAvailableItems().contains(item4));\r\n            tradingManager.rescindOngoingTrade(t2.getId());\r\n            update();\r\n            assertFalse(trader1.getAcceptedTrades().contains(t2.getId()));\r\n            assertFalse(trader1.getAcceptedTrades().contains(t2.getId()));\r\n            assertTrue(trader1.getAvailableItems().contains(item2));\r\n            assertTrue(trader2.getAvailableItems().contains(item4));\r\n            // This other trade will be confirmed\r\n            tradingManager.acceptRequest(trader2.getId(), t3.getId());\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), t3.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), t3.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader1.getId(), t3.getId(), true);\r\n            tradingManager.confirmMeetingGeneral(trader2.getId(), t3.getId(), true);\r\n            try{\r\n                tradingManager.rescindTradeRequest(t3.getId());\r\n                fail();\r\n            } catch (Exception e){\r\n\r\n            }\r\n            Trade lend = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, goodDate2, \"home\",\r\n                    item1, \"\", 1, \"This is a lend2\"));\r\n            tradingManager.acceptRequest(trader2.getId(), lend.getId());\r\n            tradingManager.rescindOngoingTrade(lend.getId());\r\n            update();\r\n            assertEquals(trader1.getAvailableItems().get(trader1.getAvailableItems().size() - 1), item1);\r\n            assertFalse(trader1.getAvailableItems().contains(\"\"));\r\n            assertFalse(trader2.getAvailableItems().contains(\"\"));\r\n            assertEquals(1, trader1.getTradeCount());\r\n            assertEquals(1, trader2.getTradeCount());\r\n            assertEquals(1, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n\r\n            trader1.setTotalItemsLent(2);\r\n            userDatabase.update(trader1);\r\n            Trade borrow = getTrade(tradingManager.requestTrade(trader1.getId(), trader2.getId(), goodDate, goodDate2, \"home\",\r\n                    \"\", item4, 1, \"This is a lend2\"));\r\n            tradingManager.acceptRequest(trader2.getId(), borrow.getId());\r\n            tradingManager.rescindOngoingTrade(borrow.getId());\r\n            update();\r\n            assertEquals(trader1.getAvailableItems().get(trader1.getAvailableItems().size() - 1), item1);\r\n            assertFalse(trader1.getAvailableItems().contains(\"\"));\r\n            assertFalse(trader2.getAvailableItems().contains(\"\"));\r\n            assertEquals(1, trader1.getTradeCount());\r\n            assertEquals(1, trader2.getTradeCount());\r\n            assertEquals(2, trader1.getTotalItemsLent());\r\n            assertEquals(0, trader2.getTotalItemsBorrowed());\r\n            assertEquals(1, trader1.getTotalItemsBorrowed());\r\n            assertEquals(0, trader2.getTotalItemsLent());\r\n        }\r\n        catch (Exception e){\r\n            e.printStackTrace();\r\n            fail();\r\n        }\r\n    }\r\n\r\n    private void update(){\r\n        try {\r\n            trader1 = getTrader(trader1.getId());\r\n            trader2 = getTrader(trader2.getId());\r\n            admin = (Admin) getUser(admin.getId());\r\n\r\n        } catch (UserNotFoundException | AuthorizationException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the current value of the specified trader property\r\n     * @param propertyType the type of property\r\n     * @return the value of the specified trader property\r\n     */\r\n    private int getProperty(TraderProperties propertyType){\r\n        try {\r\n            // get the file\r\n            File propertyFile = new File(TRADER_PROPERTY_FILE_PATH);\r\n            // initialize the reader of this file\r\n            FileReader reader = new FileReader(propertyFile);\r\n            // initialize properties object\r\n            Properties properties = new Properties();\r\n            // associate properties object with this file.\r\n            properties.load(reader);\r\n            // we're not going to use reader anymore, so close it\r\n            reader.close();\r\n            // return the integer value of that property\r\n            return Integer.parseInt(properties.getProperty(propertyType.getProperty()));\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a property.\r\n     * @param propertyName the property to change\r\n     * @param propertyValue the new value of that property\r\n     */\r\n    private void setProperty(TraderProperties propertyName, int propertyValue){\r\n        try {\r\n            // get the file\r\n            File propertyFile = new File(TRADER_PROPERTY_FILE_PATH);\r\n            // initialize reader\r\n            FileReader reader = new FileReader(propertyFile);\r\n            // initialize properties object (to set data)\r\n            Properties properties = new Properties();\r\n            // associate this properties object with the file\r\n            properties.load(reader);\r\n            // set the property\r\n            properties.setProperty(propertyName.getProperty(), \"\" + propertyValue);\r\n\r\n            //update the file\r\n            FileWriter writer = new FileWriter(propertyFile);\r\n            properties.store(writer, \"\");\r\n            reader.close();\r\n            writer.close();\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private Trade trade(String id1, String id2, Date date1, Date date2, String location, String item1, String item2, int edits, String message){\r\n        Trade t = new Trade(id1, id2, date1, date2, location,\r\n                item1, item2, edits, message);\r\n        return t;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/TestTrade.java	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ test/TestTrade.java	(date 1596843806652)
@@ -147,7 +147,7 @@
             assertFalse(trader2.getAvailableItems().contains(item2));
 
             //confirm trade
-            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId());
             // Make sure nothing changed after first confirmation
             assertNotEquals(trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1), item2);
             assertNotEquals(trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1), item1);
@@ -159,7 +159,7 @@
             assertEquals(0, trader1.getTotalItemsBorrowed());
 
             // Make sure confirming first meeting again does nothing
-            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId());
             assertNotEquals(trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1), item2);
             assertNotEquals(trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1), item1);
             assertEquals(0, trader1.getTradeCount());
@@ -169,9 +169,8 @@
             assertEquals(0, trader2.getTotalItemsBorrowed());
             assertEquals(0, trader1.getTotalItemsBorrowed());
 
-            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId());
 
-            //check the trade is now in the completed trades
             update();
             // check that the trade is still accepted
             assertTrue(trader1.getAcceptedTrades().size() == 1);
@@ -216,12 +215,12 @@
             userDatabase.update(trader1);
 
 
-            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId());
             // Make sure nothing has changed after first confirmation.
             update();
             // check that the trade is still accepted
-            assertTrue(trader1.getAcceptedTrades().size() == 4);
-            assertTrue(trader2.getAcceptedTrades().size() == 1);
+            assertEquals(4,trader1.getAcceptedTrades().size());
+            assertEquals(1, trader2.getAcceptedTrades().size());
             // check that the items are in the correct pos
             assertEquals(trader1.getOngoingItems().get(trader1.getOngoingItems().size()-1), item2);
             assertEquals(trader2.getOngoingItems().get(trader2.getOngoingItems().size()-1), item1);
@@ -233,7 +232,7 @@
             assertEquals(0, trader1.getTotalItemsBorrowed());
 
             // Make sure confirming again will not do anything
-            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId());
             update();
             // check that the trade is still accepted
             assertTrue(trader1.getAcceptedTrades().size() == 4);
@@ -248,7 +247,7 @@
             assertEquals(0, trader2.getTotalItemsBorrowed());
             assertEquals(0, trader1.getTotalItemsBorrowed());
 
-            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId());
             //check the trade is now in the completed trades
             update();
             assertEquals(trader1.getCompletedTrades().get(0), trade.getId());
@@ -322,8 +321,8 @@
             userDatabase.update(trader1);
 
             //confirm trade
-            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), trade.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), trade.getId());
 
             //check the trade is now in the completed trades
             update();
@@ -441,8 +440,8 @@
             }
 
             tradingManager.acceptRequest(trader2.getId(), trade1.getId());
-            tradingManager.confirmMeetingGeneral(trader1.getId(), trade1.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), trade1.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), trade1.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), trade1.getId());
 
             update();
             assertEquals(item2, trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1));
@@ -478,8 +477,8 @@
             update();
             assertEquals(0, trader1.getTotalAcceptedBorrows());
             assertEquals(0, trader2.getTotalAcceptedBorrows());
-            tradingManager.confirmMeetingGeneral(trader1.getId(), trade2.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), trade2.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), trade2.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), trade2.getId());
             update();
             assertEquals(item2, trader1.getAvailableItems().get(trader1.getAvailableItems().size()-1));
             assertEquals(item3, trader2.getAvailableItems().get(trader2.getAvailableItems().size()-1));
@@ -516,12 +515,12 @@
                 assertEquals(e.getMessage(), "The trader who originally sent the trade can't borrow");
             }
 
-            tradingManager.confirmMeetingGeneral(trader1.getId(), trade3.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), trade3.getId());
 
             update();
             assertEquals(1, trader1.getTotalAcceptedBorrows());
 
-            tradingManager.confirmMeetingGeneral(trader2.getId(), trade3.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader2.getId(), trade3.getId());
 
             update();
             assertEquals(0, trader1.getTotalAcceptedBorrows());
@@ -547,25 +546,25 @@
             assertEquals(1, trader1.getTotalItemsBorrowed());
             assertEquals(0, trader2.getTotalItemsLent());
             assertEquals(0, trader2.getTotalAcceptedBorrows());
-            tradingManager.confirmMeetingGeneral(trader1.getId(), trade4.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), trade4.getId());
             update();
             assertEquals(1, trader1.getTotalAcceptedBorrows());
             assertEquals(1, trader1.getTotalItemsBorrowed());
             assertEquals(0, trader2.getTotalItemsLent());
             assertEquals(0, trader2.getTotalAcceptedBorrows());
-            tradingManager.confirmMeetingGeneral(trader2.getId(), trade4.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader2.getId(), trade4.getId());
             update();
             assertEquals(1, trader1.getTotalAcceptedBorrows());
             assertEquals(1, trader1.getTotalItemsBorrowed());
             assertEquals(0, trader2.getTotalItemsLent());
             assertEquals(0, trader2.getTotalAcceptedBorrows());
-            tradingManager.confirmMeetingGeneral(trader1.getId(), trade4.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), trade4.getId());
             update();
             assertEquals(1, trader1.getTotalAcceptedBorrows());
             assertEquals(1, trader1.getTotalItemsBorrowed());
             assertEquals(0, trader2.getTotalItemsLent());
             assertEquals(0, trader2.getTotalAcceptedBorrows());
-            tradingManager.confirmMeetingGeneral(trader2.getId(), trade4.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader2.getId(), trade4.getId());
             update();
             assertEquals(0, trader1.getTotalAcceptedBorrows());
             assertEquals(2, trader1.getTotalItemsBorrowed());
@@ -615,13 +614,13 @@
             assertEquals(trader1.getRequestedTrades().size(), 0);
             assertEquals(0, trader2.getRequestedTrades().size());
 
-            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId());
 
             update();
             assertEquals(trader1.getAvailableItems().size(), 2);
             assertEquals(trader2.getAvailableItems().size(), 3);
 
-            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId());
 
             update();
             assertEquals(1, trader1.getCompletedTrades().size());
@@ -659,8 +658,8 @@
             assertEquals(2, trader1.getAvailableItems().size());
             assertEquals(1, trader2.getOngoingItems().size());
             assertEquals(0, trader1.getOngoingItems().size());
-            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId());
 
 
             update();
@@ -672,8 +671,8 @@
             assertEquals(2, trader1.getAvailableItems().size());
             assertEquals(0, trader2.getOngoingItems().size());
             assertEquals(1, trader1.getOngoingItems().size());
-            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId());
             update();
             assertEquals(2, trader1.getTradeCount());
             assertEquals(2, trader2.getTradeCount());
@@ -745,13 +744,13 @@
             assertEquals(trader1.getRequestedTrades().size(), 0);
             assertEquals(0, trader2.getRequestedTrades().size());
 
-            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId());
 
             update();
             assertEquals(trader1.getAvailableItems().size(), 3);
             assertEquals(trader2.getAvailableItems().size(), 2);
 
-            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId());
 
             update();
             assertEquals(1, trader1.getCompletedTrades().size());
@@ -803,8 +802,8 @@
             assertEquals(0, trader2.getOngoingItems().size());
             assertEquals(1, trader1.getOngoingItems().size());
 
-            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId());
 
 
             update();
@@ -818,8 +817,8 @@
             assertEquals(3, trader1.getAvailableItems().size());
             assertEquals(1, trader2.getOngoingItems().size());
             assertEquals(0, trader1.getOngoingItems().size());
-            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), t.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), t.getId());
             update();
             assertEquals(2, trader1.getTradeCount());
             assertEquals(2, trader2.getTradeCount());
@@ -880,8 +879,8 @@
 
             // This other trade will be confirmed
             tradingManager.acceptRequest(trader2.getId(), t3.getId());
-            tradingManager.confirmMeetingGeneral(trader1.getId(), t3.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), t3.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), t3.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), t3.getId());
             try{
                 tradingManager.rescindTradeRequest(t3.getId());
                 fail();
@@ -947,10 +946,10 @@
             assertTrue(trader2.getAvailableItems().contains(item4));
             // This other trade will be confirmed
             tradingManager.acceptRequest(trader2.getId(), t3.getId());
-            tradingManager.confirmMeetingGeneral(trader1.getId(), t3.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), t3.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader1.getId(), t3.getId(), true);
-            tradingManager.confirmMeetingGeneral(trader2.getId(), t3.getId(), true);
+            tradingManager.confirmMeetingGeneral(trader1.getId(), t3.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), t3.getId());
+            tradingManager.confirmMeetingGeneral(trader1.getId(), t3.getId());
+            tradingManager.confirmMeetingGeneral(trader2.getId(), t3.getId());
             try{
                 tradingManager.rescindTradeRequest(t3.getId());
                 fail();
Index: src/backend/tradesystem/trader_managers/TradingManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package backend.tradesystem.trader_managers;\r\n\r\n\r\nimport backend.exceptions.*;\r\nimport backend.models.Trade;\r\nimport backend.models.users.Trader;\r\nimport backend.tradesystem.Manager;\r\n\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\n/**\r\n * Used for trading\r\n */\r\npublic class TradingManager extends Manager {\r\n\r\n    /**\r\n     * Initialize the objects to get items from databases\r\n     *\r\n     * @throws IOException if something goes wrong with getting database\r\n     */\r\n    public TradingManager() throws IOException {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Making the database objects with set file paths\r\n     *\r\n     * @param userFilePath         the user database file path\r\n     * @param tradableItemFilePath the tradable item database file path\r\n     * @param tradeFilePath        the trade database file path\r\n     * @throws IOException issues with getting the file path\r\n     */\r\n    public TradingManager(String userFilePath, String tradableItemFilePath, String tradeFilePath) throws IOException {\r\n        super(userFilePath, tradableItemFilePath, tradeFilePath);\r\n    }\r\n\r\n    /**\r\n     * Adds a new trade to the system and acknowledges that it is a requested trade between two users in the trade.\r\n     * A trade is a borrow if the the item the first user is offering is \"\".\r\n     * A trade is a lend if the item the second user is offering is \"\".\r\n     *\r\n     * @param traderId1         The id of the trader sending the trade\r\n     * @param traderId2         The id of the trader receiving the trade\r\n     * @param meetingTime       The first meeting time for the trade\r\n     * @param secondMeetingTime The second meeting time for the trade. Null for this means the trade is permanent\r\n     * @param location          The location the trade will occur\r\n     * @param firstUserOfferId  The trade sender's offer (empty string for trader1 to offer nothing)\r\n     * @param secondUserOfferId The trade receiver's offer (empty string for trader2 to offer nothing)\r\n     * @param allowedEdits      The amount of times each trader can edit the trade\r\n     * @param message           The message that will be sent along with this trade\r\n     * @return the trade object's id\r\n     * @throws UserNotFoundException  the user that wants to be traded with doesn't exist\r\n     * @throws AuthorizationException the item for trading cannot be traded\r\n     * @throws CannotTradeException   cannot request a trade\r\n     */\r\n    public String requestTrade(String traderId1, String traderId2, Date meetingTime, Date secondMeetingTime, String location,\r\n                               String firstUserOfferId, String secondUserOfferId, int allowedEdits, String message)\r\n            throws UserNotFoundException, AuthorizationException, CannotTradeException {\r\n        Trader trader = getTrader(traderId1);\r\n        Trader secondTrader = getTrader(traderId2);\r\n        if (traderId2.equals(traderId1)) throw new CannotTradeException(\"Cannot trade with yourself\");\r\n        if (firstUserOfferId.equals(\"\") && secondUserOfferId.equals(\"\")) {\r\n            throw new CannotTradeException(\"You must add items to the trade\");\r\n        }\r\n        // If neither trader can trade, throw an exception\r\n        if (!trader.canTrade())\r\n            throw new CannotTradeException(\"This user cannot trade due to trading restrictions\");\r\n        if (!secondTrader.canTrade())\r\n            throw new CannotTradeException(\"The user requested cannot trade due to trading restrictions\");\r\n        if (firstUserOfferId.equals(\"\") && !trader.canBorrow())\r\n            throw new CannotTradeException(\"You have not lent enough to borrow\");\r\n\r\n        // This is used to check if the items are in each user's inventory\r\n        if (!hasItem(trader, firstUserOfferId) || !hasItem(secondTrader, secondUserOfferId))\r\n            throw new AuthorizationException(\"The trade offer contains an item that the user does not have\");\r\n\r\n        // Check whether the two dates are valid.\r\n        if (!datesAreValid(meetingTime, secondMeetingTime)) {\r\n            throw new CannotTradeException(\"The suggested date(s) are not possible\");\r\n        }\r\n\r\n        // Check whether the trader has too many incomplete trades pending\r\n        if (trader.hasSurpassedIncompleteTradeLimit() || secondTrader.hasSurpassedIncompleteTradeLimit()) {\r\n            throw new CannotTradeException(\"One of the two users has too many active trades.\");\r\n        }\r\n        Trade trade = new Trade(traderId1, traderId2, meetingTime, secondMeetingTime,\r\n                location, firstUserOfferId, secondUserOfferId, allowedEdits, message);\r\n\r\n        // This trade has now been requested, so add it to the requested trades of each trader\r\n        trader.getRequestedTrades().add(trade.getId());\r\n        secondTrader.getRequestedTrades().add(trade.getId());\r\n\r\n        updateUserDatabase(trader);\r\n        updateTradeDatabase(trade);\r\n        updateUserDatabase(secondTrader);\r\n        return trade.getId();\r\n    }\r\n\r\n    /**\r\n     * For accepting a trade request\r\n     *\r\n     * @param traderId the trader confirming the meeting\r\n     * @param tradeId  the trade id\r\n     * @return true if the request was accepted\r\n     * @throws TradeNotFoundException if the trade wasn't found\r\n     * @throws AuthorizationException if the user is not a trader\r\n     * @throws UserNotFoundException  if the user doesn't exist\r\n     * @throws CannotTradeException   if trading limitations prevent the trade from happening\r\n     */\r\n    public boolean acceptRequest(String traderId, String tradeId) throws TradeNotFoundException, AuthorizationException, UserNotFoundException, CannotTradeException {\r\n        Trade trade = getTrade(tradeId);\r\n        if (!trade.isTraderInTrade(traderId))\r\n            throw new AuthorizationException(\"This trader doesn't belong to this trade\");\r\n        Trader trader = getTrader(trade.getFirstUserId());\r\n        Trader trader2 = getTrader(trade.getSecondUserId());\r\n\r\n        // Check that this trader has the ability to accept this trade\r\n        if (!trader.canTrade() || !trader2.canTrade())\r\n            throw new CannotTradeException(\"Trade limitations prevent this trade from being accepted\");\r\n        if (trade.getFirstUserOffer().equals(\"\") && !trader.canAcceptBorrow()) {\r\n            throw new CannotTradeException(\"The trader who originally sent the trade can't borrow\");\r\n        }\r\n        // Check to see that the items are available to trade\r\n        if (!hasItem(trader, trade.getFirstUserOffer()) || !hasItem(trader2, trade.getSecondUserOffer())) {\r\n            throw new CannotTradeException(\"One of the traders no longer has the required item for the trade\");\r\n        }\r\n\r\n        if (trade.getFirstUserId().equals(traderId))\r\n            trade.setHasFirstUserConfirmedRequest(true);\r\n        else\r\n            trade.setHasSecondUserConfirmedRequest(true);\r\n\r\n        updateUserDatabase(trader);\r\n        updateUserDatabase(trader2);\r\n\r\n        // If both users accepted then move items out of the inventory\r\n        if (trade.isHasFirstUserConfirmedRequest() && trade.isHasSecondUserConfirmedRequest()) {\r\n            trader.getAvailableItems().remove(trade.getFirstUserOffer());\r\n            trader2.getAvailableItems().remove(trade.getSecondUserOffer());\r\n            if (!trade.getFirstUserOffer().equals(\"\"))\r\n                trader.getOngoingItems().add(trade.getFirstUserOffer());\r\n            else\r\n                trader.setTotalAcceptedBorrows(trader.getTotalAcceptedBorrows() + 1);\r\n\r\n            if (!trade.getSecondUserOffer().equals(\"\"))\r\n                trader2.getOngoingItems().add(trade.getSecondUserOffer());\r\n\r\n            trader.getAcceptedTrades().add(tradeId);\r\n            trader2.getAcceptedTrades().add(tradeId);\r\n            trader.getRequestedTrades().remove(tradeId);\r\n            trader2.getRequestedTrades().remove(tradeId);\r\n            updateUserDatabase(trader);\r\n            updateUserDatabase(trader2);\r\n            removeInvalidRequests();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Confirms the first meeting\r\n     *\r\n     * @param traderId the trader confirming the meeting\r\n     * @param tradeId  id of the trade\r\n     * @param status   if the meeting is confirmed and the trade happened\r\n     * @throws TradeNotFoundException trade wasn't found\r\n     * @throws AuthorizationException this trade doesn't belong to this user\r\n     * @throws UserNotFoundException  if the user doesn't exist\r\n     */\r\n    private void confirmFirstMeeting(String traderId, String tradeId, boolean status) throws TradeNotFoundException, AuthorizationException, UserNotFoundException {\r\n        Trade trade = getTrade(tradeId);\r\n        if (!trade.isTraderInTrade(traderId))\r\n            throw new AuthorizationException(\"This trader doesn't belong to this trade\");\r\n        if (trade.getFirstUserId().equals(traderId)) trade.setFirstUserConfirmed1(status);\r\n        else if ((trade.getSecondUserId().equals(traderId))) trade.setSecondUserConfirmed1(status);\r\n\r\n        // If both users confirmed the first meeting meeting...\r\n        if (trade.isFirstUserConfirmed1() && trade.isSecondUserConfirmed1()) {\r\n            Trader trader1 = getTrader(trade.getFirstUserId());\r\n            Trader trader2 = getTrader(trade.getSecondUserId());\r\n\r\n            trader1.getOngoingItems().remove(trade.getFirstUserOffer());\r\n            trader2.getOngoingItems().remove(trade.getSecondUserOffer());\r\n\r\n            trader1.getWishlist().remove(trade.getSecondUserOffer());\r\n            trader2.getWishlist().remove(trade.getFirstUserOffer());\r\n\r\n            // If the trade happened to be permanent...\r\n            if (trade.getSecondMeetingTime() == null) {\r\n                trader1.getAcceptedTrades().remove(tradeId);\r\n                trader2.getAcceptedTrades().remove(tradeId);\r\n                trader1.getCompletedTrades().add(tradeId);\r\n                trader2.getCompletedTrades().add(tradeId);\r\n\r\n                // Add the necessary items to each traders inventory\r\n                if (!trade.getSecondUserOffer().equals(\"\"))\r\n                    trader1.getAvailableItems().add(trade.getSecondUserOffer());\r\n                if (!trade.getFirstUserOffer().equals(\"\"))\r\n                    trader2.getAvailableItems().add(trade.getFirstUserOffer());\r\n\r\n                trader1.setTradeCount(trader1.getTradeCount() + 1);\r\n                trader2.setTradeCount(trader2.getTradeCount() + 1);\r\n                if (trade.getFirstUserOffer().equals(\"\")) {\r\n                    trader1.setTotalItemsBorrowed(trader1.getTotalItemsBorrowed() + 1);\r\n                    trader1.setTotalAcceptedBorrows(trader1.getTotalAcceptedBorrows() - 1);\r\n                }\r\n                if (trade.getSecondUserOffer().equals(\"\"))\r\n                    trader1.setTotalItemsLent(trader1.getTotalItemsLent() + 1);\r\n            } else {\r\n                if (!trade.getSecondUserOffer().equals(\"\"))\r\n                    trader1.getOngoingItems().add(trade.getSecondUserOffer());\r\n                if (!trade.getFirstUserOffer().equals(\"\"))\r\n                    trader2.getOngoingItems().add(trade.getFirstUserOffer());\r\n            }\r\n\r\n            updateUserDatabase(trader1);\r\n            updateUserDatabase(trader2);\r\n        }\r\n        updateTradeDatabase(trade);\r\n    }\r\n\r\n    /**\r\n     * Confirms the second meeting.\r\n     * This method assumes that the items required for the trade to be conducted are still in the ongoing items of each\r\n     * trader (this should generally be true unless ongoing items was tampered with).\r\n     *\r\n     * @param traderId the trader confirming the meeting\r\n     * @param tradeId  id of the trade\r\n     * @param status   if the meeting is confirmed and the trade happened\r\n     * @throws TradeNotFoundException trade wasn't found\r\n     * @throws AuthorizationException this trade doesn't belong to this user\r\n     * @throws UserNotFoundException  if the other user of the trade is not found\r\n     */\r\n    private void confirmSecondMeeting(String traderId, String tradeId, boolean status) throws TradeNotFoundException, AuthorizationException, UserNotFoundException {\r\n        Trade trade = getTrade(tradeId);\r\n        Trader trader1 = getTrader(trade.getFirstUserId());\r\n        Trader trader2 = getTrader(trade.getSecondUserId());\r\n        if (trade.getSecondMeetingTime() == null) return;\r\n\r\n        if (!trade.isTraderInTrade(traderId))\r\n            throw new AuthorizationException(\"This trader doesn't belong to this trade\");\r\n        if (!trade.isFirstUserConfirmed1() || !trade.isSecondUserConfirmed1()) {\r\n            throw new AuthorizationException(\"First meeting hasn't been confirmed\");\r\n        }\r\n        if (trade.getFirstUserId().equals(traderId)) {\r\n            trade.setFirstUserConfirmed2(status);\r\n        } else if ((trade.getSecondUserId().equals(traderId))) {\r\n            trade.setSecondUserConfirmed2(status);\r\n        }\r\n\r\n        // If the second meeting has been confirmed...\r\n        if (trade.isFirstUserConfirmed1() && trade.isSecondUserConfirmed1() &&\r\n                trade.isFirstUserConfirmed2() && trade.isSecondUserConfirmed2()) {\r\n\r\n            trader1.getCompletedTrades().add(tradeId);\r\n            trader2.getCompletedTrades().add(tradeId);\r\n            trader1.getAcceptedTrades().remove(tradeId);\r\n            trader2.getAcceptedTrades().remove(tradeId);\r\n\r\n            // Update available items of first user / borrowed count\r\n            if (!trade.getFirstUserOffer().equals(\"\")) {\r\n                trader1.getAvailableItems().add(trade.getFirstUserOffer());\r\n                trader2.getOngoingItems().remove(trade.getFirstUserOffer());\r\n            } else {\r\n                trader1.setTotalItemsBorrowed(trader1.getTotalItemsBorrowed() + 1);\r\n                trader1.setTotalAcceptedBorrows(trader1.getTotalAcceptedBorrows() - 1);\r\n            }\r\n\r\n            // Update available items of the second trader / lent item count\r\n            if (!trade.getSecondUserOffer().equals(\"\")) {\r\n                trader2.getAvailableItems().add(trade.getSecondUserOffer());\r\n                trader1.getOngoingItems().remove(trade.getSecondUserOffer());\r\n            } else\r\n                trader1.setTotalItemsLent(trader1.getTotalItemsLent() + 1);\r\n\r\n\r\n            trader1.getWishlist().remove(trade.getFirstUserOffer());\r\n            trader2.getWishlist().remove(trade.getSecondUserOffer());\r\n            trader1.setTradeCount(trader1.getTradeCount() + 1);\r\n            trader2.setTradeCount(trader2.getTradeCount() + 1);\r\n            updateUserDatabase(trader1);\r\n            updateUserDatabase(trader2);\r\n        }\r\n        updateTradeDatabase(trade);\r\n    }\r\n\r\n    /**\r\n     * Confirms either the first or second meeting depending on which one is not confirmed.\r\n     * This method makes sure that the user can only confirm a second meeting once both traders\r\n     * have confirmed the first.\r\n     *\r\n     * @param traderId the trader confirming the meeting\r\n     * @param tradeId  id of the trade\r\n     * @param status   if the meeting is confirmed and the trade happened\r\n     * @throws TradeNotFoundException trade wasn't found\r\n     * @throws AuthorizationException this trade doesn't belong to this user\r\n     * @throws UserNotFoundException  if the other user of the trade is not found\r\n     */\r\n    public void confirmMeetingGeneral(String traderId, String tradeId, boolean status) throws TradeNotFoundException,\r\n            AuthorizationException, UserNotFoundException {\r\n        Trade t = getTrade(tradeId);\r\n        if (t.isFirstUserConfirmed1() && t.isSecondUserConfirmed1()) {\r\n            confirmSecondMeeting(traderId, tradeId, status);\r\n        } else {\r\n            confirmFirstMeeting(traderId, tradeId, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sending a counter offer\r\n     *\r\n     * @param traderId          the trader id sending the counter offer\r\n     * @param tradeId           the trade id\r\n     * @param meetingTime       the new time of the trade\r\n     * @param secondMeetingTime the second meeting time of the trade\r\n     * @param meetingLocation   the meeting location of the trade\r\n     * @param thisTraderOffer   the tradable item id that the current trader is offering\r\n     * @param thatTraderOffer   the tradable item id that the current trader wants from the other trader\r\n     * @param message           message of the offer\r\n     * @return the id of the trade\r\n     * @throws CannotTradeException   too many edits\r\n     * @throws TradeNotFoundException this trade doesn't exist\r\n     * @throws AuthorizationException this trade doesn't belong to this user\r\n     * @throws UserNotFoundException  user wasn't found\r\n     */\r\n    public String counterTradeOffer(String traderId, String tradeId, Date meetingTime, Date secondMeetingTime, String\r\n            meetingLocation, String thisTraderOffer, String thatTraderOffer, String message) throws\r\n            CannotTradeException, TradeNotFoundException, AuthorizationException, UserNotFoundException {\r\n        Trade trade = getTrade(tradeId);\r\n        Trader trader1 = getTrader(trade.getFirstUserId());\r\n        Trader trader2 = getTrader(trade.getSecondUserId());\r\n\r\n        if (!trade.isTraderInTrade(traderId))\r\n            throw new AuthorizationException(\"This trader doesn't belong to this trade\");\r\n        if (!getTrader(trade.getFirstUserId()).canTrade() || !getTrader(trade.getSecondUserId()).canTrade())\r\n            throw new CannotTradeException(\"Could not send a counter trade offer, one of the two traders cannot trade\");\r\n        if (thisTraderOffer.equals(\"\") && thatTraderOffer.equals(\"\")) {\r\n            throw new CannotTradeException(\"You must add items to the trade\");\r\n        }\r\n        if (trade.getNumEdits() >= trade.getMaxAllowedEdits()) {\r\n            throw new CannotTradeException(\"Too many edits. Trade is cancelled.\");\r\n        }\r\n        if (!datesAreValid(meetingTime, secondMeetingTime)) {\r\n            throw new CannotTradeException(\"The suggested date(s) are not possible\");\r\n        }\r\n\r\n        // if the trader sending the request is the first user...\r\n        if (trader1.getId().equals(traderId)) {\r\n            if (!hasItem(trader1, thisTraderOffer) || !hasItem(trader2, thatTraderOffer)) {\r\n                throw new CannotTradeException(\"One of the traders does not have the required item!\");\r\n            }\r\n        } else {\r\n            if (!hasItem(trader2, thisTraderOffer) || !hasItem(trader1, thatTraderOffer)) {\r\n                throw new CannotTradeException(\"One of the traders does not have the required item!\");\r\n            }\r\n        }\r\n\r\n        if (trade.getUserTurnToEdit().equals(traderId)) trade.changeUserTurn();\r\n        else throw new CannotTradeException(\"A previous trade offer has already been sent\");\r\n        trade.setMeetingTime(meetingTime);\r\n        trade.setSecondMeetingTime(secondMeetingTime);\r\n        trade.setMeetingLocation(meetingLocation);\r\n        trade.setMessage(message);\r\n        if (trade.getFirstUserId().equals(traderId)) {\r\n            trade.setFirstUserOffer(thisTraderOffer);\r\n            trade.setSecondUserOffer(thatTraderOffer);\r\n            trade.setHasFirstUserConfirmedRequest(true);\r\n            trade.setHasSecondUserConfirmedRequest(false);\r\n        } else {\r\n            trade.setSecondUserOffer(thisTraderOffer);\r\n            trade.setFirstUserOffer(thatTraderOffer);\r\n            trade.setHasFirstUserConfirmedRequest(false);\r\n            trade.setHasSecondUserConfirmedRequest(true);\r\n        }\r\n\r\n        trade.setNumEdits(trade.getNumEdits() + 1);\r\n        updateTradeDatabase(trade);\r\n        return trade.getId();\r\n    }\r\n\r\n\r\n    /**\r\n     * Cancels a trade request\r\n     *\r\n     * @param tradeID The id of the trade request\r\n     * @throws TradeNotFoundException trade doesn't exist in the user's requested trades\r\n     * @throws UserNotFoundException  the trader(s) can not be found\r\n     * @throws AuthorizationException couldn't find a trader type associated with the trade\r\n     */\r\n    public void rescindTradeRequest(String tradeID) throws TradeNotFoundException, UserNotFoundException, AuthorizationException {\r\n        Trade trade = getTrade(tradeID);\r\n        Trader firstTrader = getTrader(trade.getFirstUserId());\r\n        Trader secondTrader = getTrader(trade.getSecondUserId());\r\n        if (!firstTrader.getRequestedTrades().remove(tradeID)) {\r\n            throw new TradeNotFoundException(\"Trade request wasn't found\");\r\n        }\r\n        secondTrader.getRequestedTrades().remove(tradeID);\r\n        getTradeDatabase().delete(tradeID);\r\n        updateUserDatabase(firstTrader);\r\n        updateUserDatabase(secondTrader);\r\n    }\r\n\r\n    /**\r\n     * If the first meeting of a trade is not accepted yet, the trade can still be cancelled\r\n     * This method only should be used carefully since rescinding an ongoing trade after the real life trade has\r\n     * happened has dire consequences (scamming is able to happen)\r\n     *\r\n     * @param tradeID the id of the trade to undo\r\n     * @throws TradeNotFoundException trade doesn't exist in the user's accepted trades\r\n     * @throws UserNotFoundException  the trader(s) can not be found\r\n     * @throws AuthorizationException couldn't find a trader type associated with the trade\r\n     * @throws CannotTradeException   cannot complete this request because the trade could not be reversed\r\n     */\r\n    public void rescindOngoingTrade(String tradeID) throws\r\n            TradeNotFoundException, UserNotFoundException, AuthorizationException, CannotTradeException {\r\n        Trade trade = getTrade(tradeID);\r\n        Trader firstTrader = getTrader(trade.getFirstUserId());\r\n        Trader secondTrader = getTrader(trade.getSecondUserId());\r\n        if (!firstTrader.getAcceptedTrades().contains(trade.getId()))\r\n            throw new CannotTradeException(\"The trade is not accepted\");\r\n\r\n\r\n        // Remove trades\r\n        firstTrader.getAcceptedTrades().remove(tradeID);\r\n        secondTrader.getAcceptedTrades().remove(tradeID);\r\n\r\n        // Add items\r\n        if (!trade.getFirstUserOffer().equals(\"\"))\r\n            firstTrader.getAvailableItems().add(trade.getFirstUserOffer());\r\n        else {\r\n            firstTrader.setTotalAcceptedBorrows(firstTrader.getTotalAcceptedBorrows() - 1);\r\n        }\r\n        if (!trade.getSecondUserOffer().equals(\"\"))\r\n            secondTrader.getAvailableItems().add(trade.getSecondUserOffer());\r\n\r\n        firstTrader.getOngoingItems().remove(trade.getFirstUserOffer());\r\n        firstTrader.getOngoingItems().remove(trade.getSecondUserOffer());\r\n        secondTrader.getOngoingItems().remove(trade.getFirstUserOffer());\r\n        secondTrader.getOngoingItems().remove(trade.getSecondUserOffer());\r\n\r\n        // Update database\r\n        getTradeDatabase().delete(trade.getId());\r\n        updateUserDatabase(firstTrader);\r\n        updateUserDatabase(secondTrader);\r\n\r\n    }\r\n\r\n    /**\r\n     * Checks whether two given dates are valid\r\n     *\r\n     * @param d1 the first date time\r\n     * @param d2 the second date time\r\n     * @return true if the two dates are valid dates\r\n     */\r\n    private boolean datesAreValid(Date d1, Date d2) {\r\n        return System.currentTimeMillis() <= d1.getTime() && (d2 == null || d1.getTime() < d2.getTime());\r\n    }\r\n\r\n\r\n    /**\r\n     * Return whether this trader has this item, or if the item is just \"\" (meaning no item).\r\n     *\r\n     * @param trader the trader who's inventory we're checking\r\n     * @param item   the item we are looking for\r\n     * @return true if the item was found in the trader's inventory\r\n     */\r\n    private boolean hasItem(Trader trader, String item) {\r\n        return (item.equals(\"\") || trader.getAvailableItems().contains(item));\r\n    }\r\n\r\n\r\n    private void removeInvalidRequests() throws UserNotFoundException {\r\n        // Removes invalid trades\r\n\r\n        for (String id : getAllUsers()) {\r\n            if (!(getUser(id) instanceof Trader)) {\r\n                continue;\r\n            }\r\n            Trader trader = (Trader) getUser(id);\r\n            try {\r\n                for (int i = trader.getRequestedTrades().size() - 1; i >= 0; i--) {\r\n                    String tradeID = trader.getRequestedTrades().get(i);\r\n                    // Populate required variables.\r\n                    Trade t = getTrade(tradeID);\r\n                    Trader firstTrader = getTrader(t.getFirstUserId());\r\n                    Trader secondTrader = getTrader(t.getSecondUserId());\r\n\r\n                    // Figure out whether the trade is still valid.\r\n                    boolean isValid = (t.getFirstUserOffer().equals(\"\") || firstTrader.getAvailableItems().contains(t.getFirstUserOffer())) &&\r\n                            (t.getSecondUserOffer().equals(\"\") || secondTrader.getAvailableItems().contains(t.getSecondUserOffer()));\r\n\r\n                    if (!isValid) {\r\n                        firstTrader.getRequestedTrades().remove(i);\r\n                        secondTrader.getRequestedTrades().remove(i);\r\n                        getTradeDatabase().delete(tradeID);\r\n                        getUserDatabase().update(firstTrader);\r\n                        getUserDatabase().update(secondTrader);\r\n                    }\r\n                }\r\n            } catch (EntryNotFoundException | AuthorizationException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/backend/tradesystem/trader_managers/TradingManager.java	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ src/backend/tradesystem/trader_managers/TradingManager.java	(date 1596844027975)
@@ -163,17 +163,15 @@
      *
      * @param traderId the trader confirming the meeting
      * @param tradeId  id of the trade
-     * @param status   if the meeting is confirmed and the trade happened
      * @throws TradeNotFoundException trade wasn't found
      * @throws AuthorizationException this trade doesn't belong to this user
      * @throws UserNotFoundException  if the user doesn't exist
      */
-    private void confirmFirstMeeting(String traderId, String tradeId, boolean status) throws TradeNotFoundException, AuthorizationException, UserNotFoundException {
+    private void confirmFirstMeeting(String traderId, String tradeId) throws TradeNotFoundException, AuthorizationException, UserNotFoundException {
         Trade trade = getTrade(tradeId);
         if (!trade.isTraderInTrade(traderId))
             throw new AuthorizationException("This trader doesn't belong to this trade");
-        if (trade.getFirstUserId().equals(traderId)) trade.setFirstUserConfirmed1(status);
-        else if ((trade.getSecondUserId().equals(traderId))) trade.setSecondUserConfirmed1(status);
+        trade.setUserConfirmed(traderId);
 
         // If both users confirmed the first meeting meeting...
         if (trade.isFirstUserConfirmed1() && trade.isSecondUserConfirmed1()) {
@@ -227,12 +225,11 @@
      *
      * @param traderId the trader confirming the meeting
      * @param tradeId  id of the trade
-     * @param status   if the meeting is confirmed and the trade happened
      * @throws TradeNotFoundException trade wasn't found
      * @throws AuthorizationException this trade doesn't belong to this user
      * @throws UserNotFoundException  if the other user of the trade is not found
      */
-    private void confirmSecondMeeting(String traderId, String tradeId, boolean status) throws TradeNotFoundException, AuthorizationException, UserNotFoundException {
+    private void confirmSecondMeeting(String traderId, String tradeId) throws TradeNotFoundException, AuthorizationException, UserNotFoundException {
         Trade trade = getTrade(tradeId);
         Trader trader1 = getTrader(trade.getFirstUserId());
         Trader trader2 = getTrader(trade.getSecondUserId());
@@ -243,11 +240,7 @@
         if (!trade.isFirstUserConfirmed1() || !trade.isSecondUserConfirmed1()) {
             throw new AuthorizationException("First meeting hasn't been confirmed");
         }
-        if (trade.getFirstUserId().equals(traderId)) {
-            trade.setFirstUserConfirmed2(status);
-        } else if ((trade.getSecondUserId().equals(traderId))) {
-            trade.setSecondUserConfirmed2(status);
-        }
+        trade.setUserConfirmed(traderId);
 
         // If the second meeting has been confirmed...
         if (trade.isFirstUserConfirmed1() && trade.isSecondUserConfirmed1() &&
@@ -292,18 +285,17 @@
      *
      * @param traderId the trader confirming the meeting
      * @param tradeId  id of the trade
-     * @param status   if the meeting is confirmed and the trade happened
      * @throws TradeNotFoundException trade wasn't found
      * @throws AuthorizationException this trade doesn't belong to this user
      * @throws UserNotFoundException  if the other user of the trade is not found
      */
-    public void confirmMeetingGeneral(String traderId, String tradeId, boolean status) throws TradeNotFoundException,
+    public void confirmMeetingGeneral(String traderId, String tradeId) throws TradeNotFoundException,
             AuthorizationException, UserNotFoundException {
         Trade t = getTrade(tradeId);
         if (t.isFirstUserConfirmed1() && t.isSecondUserConfirmed1()) {
-            confirmSecondMeeting(traderId, tradeId, status);
+            confirmSecondMeeting(traderId, tradeId);
         } else {
-            confirmFirstMeeting(traderId, tradeId, status);
+            confirmFirstMeeting(traderId, tradeId);
         }
     }
 
Index: src/frontend/panels/trader_panel/trader_subpanels/trade_panels/OngoingTradesPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frontend.panels.trader_panel.trader_subpanels.trade_panels;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Color;\r\nimport java.awt.Dimension;\r\nimport java.awt.Font;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.GridBagLayout;\r\nimport java.awt.GridLayout;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JDialog;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTextArea;\r\n\r\nimport backend.exceptions.AuthorizationException;\r\nimport backend.exceptions.TradableItemNotFoundException;\r\nimport backend.exceptions.TradeNotFoundException;\r\nimport backend.exceptions.UserNotFoundException;\r\nimport backend.tradesystem.suggestion_strategies.Suggestion;\r\nimport backend.tradesystem.queries.TradeQuery;\r\nimport backend.tradesystem.queries.UserQuery;\r\nimport backend.tradesystem.suggestion_strategies.ExactWishlistSuggestion;\r\nimport backend.tradesystem.suggestion_strategies.SimilarWishlistSuggestion;\r\nimport backend.tradesystem.suggestion_strategies.SuggestLendStrategy;\r\nimport backend.tradesystem.suggestion_strategies.SuggestTradeStrategy;\r\nimport backend.tradesystem.trader_managers.TradingInfoManager;\r\nimport backend.tradesystem.trader_managers.TradingManager;\r\nimport frontend.panels.trader_panel.trader_subpanels.trade_panels.trade_modals.AddNewTradeModal;\r\nimport frontend.panels.trader_panel.trader_subpanels.trade_panels.trade_modals.TradeDetailsModal;\r\n\r\n/**\r\n * For showing ongoing trades\r\n */\r\npublic class OngoingTradesPanel extends JPanel implements ActionListener {\r\n\r\n    private String trader;\r\n\r\n    private final Font regular, bold, italic, boldItalic;\r\n\r\n    private final Color bg = new Color(51, 51, 51);\r\n    private final Color gray = new Color(196, 196, 196);\r\n    private final Color gray2 = new Color(142, 142, 142);\r\n    private final Color green = new Color(27, 158, 36);\r\n    private final Color red = new Color(219, 58, 52);\r\n\r\n    private final GridBagConstraints gbc = new GridBagConstraints();\r\n\r\n    private final TradeQuery tradeQuery = new TradeQuery();\r\n    private final UserQuery userQuery = new UserQuery();\r\n\r\n    private final TradingManager tradeManager = new TradingManager();\r\n    private final TradingInfoManager infoManager = new TradingInfoManager();\r\n\r\n    private final SimpleDateFormat dateFormat = new SimpleDateFormat(\"MMM dd yyyy HH:mm\", new Locale(\"en\", \"US\"));\r\n\r\n    private final SuggestLendStrategy normalSuggestLendStrategy = new ExactWishlistSuggestion();\r\n    private final SuggestTradeStrategy normalSuggestTradeStrategy = new ExactWishlistSuggestion();\r\n    private final SuggestLendStrategy similarSuggestLendStrategy = new SimilarWishlistSuggestion();\r\n    private final SuggestTradeStrategy similarSuggestTradeStrategy = new SimilarWishlistSuggestion();\r\n\r\n    /**\r\n     * For making a panel to show ongoing trades\r\n     * @param trader the trader id\r\n     * @param regular regular font\r\n     * @param bold bold font\r\n     * @param italic italics font\r\n     * @param boldItalic bold italics font\r\n     * @throws IOException if database files aren't found\r\n     * @throws UserNotFoundException if the trader isn't found\r\n     * @throws AuthorizationException if the trader isn't allowed to access this\r\n     * @throws TradeNotFoundException if the trade isn't found\r\n     */\r\n    public OngoingTradesPanel(String trader, Font regular, Font bold, Font italic, Font boldItalic)\r\n            throws IOException, UserNotFoundException, AuthorizationException, TradeNotFoundException {\r\n        this.trader = trader;\r\n        this.regular = regular;\r\n        this.bold = bold;\r\n        this.italic = italic;\r\n        this.boldItalic = boldItalic;\r\n\r\n        this.setLayout(new GridBagLayout());\r\n        gbc.fill = GridBagConstraints.BOTH;\r\n\r\n        JPanel ongoingTradesTitleHeader = setOngoingTradesTitleHeader();\r\n        gbc.gridy = 0;\r\n        gbc.weighty = 0.1;\r\n        this.add(ongoingTradesTitleHeader, gbc);\r\n\r\n        JPanel ongoingTradesHeader = setOngoingTradesHeader();\r\n        gbc.gridy = 1;\r\n        gbc.weighty = 0.1;\r\n        this.add(ongoingTradesHeader, gbc);\r\n\r\n        JScrollPane ongoingTradesScrollPane = setOngoingTradesScrollPane();\r\n        gbc.gridy = 2;\r\n        gbc.weighty = 0.8;\r\n        this.add(ongoingTradesScrollPane, gbc);\r\n    }\r\n\r\n    private JScrollPane setOngoingTradesScrollPane()\r\n            throws UserNotFoundException, AuthorizationException, TradeNotFoundException, IOException {\r\n        JScrollPane ongoingTradesScrollPane = new JScrollPane();\r\n\r\n        JPanel ongoingTradesContainer = setOngoingTradesContainer();\r\n\r\n        ongoingTradesScrollPane.setPreferredSize(new Dimension(1200, 325));\r\n        ongoingTradesScrollPane.setViewportView(ongoingTradesContainer);\r\n        ongoingTradesScrollPane.setBackground(gray);\r\n        ongoingTradesScrollPane.setBorder(null);\r\n\r\n        return ongoingTradesScrollPane;\r\n    }\r\n\r\n    private JPanel setOngoingTradesContainer()\r\n            throws UserNotFoundException, AuthorizationException, TradeNotFoundException, IOException {\r\n        JPanel ongoingTradesContainer = new JPanel();\r\n\r\n        List<String> acceptedTrades = trader.equals(\"\") ? new ArrayList<>() : userQuery.getAcceptedTrades(trader);\r\n\r\n        if (acceptedTrades.isEmpty())\r\n            return createNoTradesFoundPanel(\"<html><pre>No Ongoing Trades Found</pre></html>\");\r\n\r\n        int numRows = acceptedTrades.size();\r\n        numRows = numRows < 4 ? 4 : numRows;\r\n\r\n        ongoingTradesContainer.setLayout(new GridLayout(numRows, 1));\r\n        ongoingTradesContainer.setBackground(gray2);\r\n        ongoingTradesContainer.setBorder(null);\r\n\r\n        for (String tradeID : acceptedTrades) {\r\n            JPanel ongoingTradePanel = createOngoingTradePanel(tradeID);\r\n            ongoingTradesContainer.add(ongoingTradePanel);\r\n        }\r\n\r\n        return ongoingTradesContainer;\r\n    }\r\n\r\n    private JPanel createOngoingTradePanel(String tradeID) throws TradeNotFoundException, UserNotFoundException, IOException {\r\n        JPanel ongoingTradePanel = new JPanel(new GridLayout(1, 5, 10, 0));\r\n        ongoingTradePanel.setPreferredSize(new Dimension(1000, 75));\r\n        ongoingTradePanel.setBorder(BorderFactory.createLineBorder(bg));\r\n        ongoingTradePanel.setBackground(gray);\r\n\r\n        boolean isTraderFirstUser = tradeQuery.getFirstUserId(tradeID).equals(trader);\r\n\r\n        JLabel otherTraderName = new JLabel();\r\n\r\n        if (isTraderFirstUser)\r\n            otherTraderName.setText(userQuery.getUsername(tradeQuery.getSecondUserId(tradeID)));\r\n        else\r\n            otherTraderName.setText(userQuery.getUsername(tradeQuery.getFirstUserId(tradeID)));\r\n\r\n        otherTraderName.setFont(regular.deriveFont(20f));\r\n        otherTraderName.setForeground(Color.BLACK);\r\n        otherTraderName.setHorizontalAlignment(JLabel.LEFT);\r\n        otherTraderName.setBorder(BorderFactory.createEmptyBorder(0, 25, 0, 0));\r\n\r\n        JLabel tradeLocation = new JLabel(tradeQuery.getMeetingLocation(tradeID));\r\n        tradeLocation.setFont(regular.deriveFont(20f));\r\n        tradeLocation.setForeground(Color.BLACK);\r\n        tradeLocation.setHorizontalAlignment(JLabel.CENTER);\r\n\r\n        JLabel tradeMeetingTime = new JLabel();\r\n\r\n        if (tradeQuery.isFirstUserConfirmed1(tradeID) && tradeQuery.isSecondUserConfirmed1(tradeID)) {\r\n            tradeMeetingTime.setText(dateFormat.format(tradeQuery.getSecondMeetingTime(tradeID)));\r\n        } else {\r\n            tradeMeetingTime.setText(dateFormat.format(tradeQuery.getMeetingTime(tradeID)));\r\n        }\r\n\r\n        tradeMeetingTime.setFont(regular.deriveFont(20f));\r\n        tradeMeetingTime.setForeground(Color.BLACK);\r\n        tradeMeetingTime.setHorizontalAlignment(JLabel.CENTER);\r\n\r\n        JButton tradeDetailsButton = new JButton(\"Details\");\r\n        tradeDetailsButton.setFont(bold.deriveFont(20f));\r\n        tradeDetailsButton.setForeground(Color.WHITE);\r\n        tradeDetailsButton.setBackground(gray2);\r\n        tradeDetailsButton.setOpaque(true);\r\n        tradeDetailsButton.setBorder(BorderFactory.createLineBorder(gray, 15));\r\n\r\n        tradeDetailsButton.addActionListener(e -> {\r\n            try {\r\n                new TradeDetailsModal(tradeID, false, isTraderFirstUser, regular, bold, italic, boldItalic);\r\n            } catch (IOException | TradeNotFoundException | UserNotFoundException\r\n                    | TradableItemNotFoundException exception) {\r\n                exception.printStackTrace();\r\n            }\r\n        });\r\n\r\n        JButton tradeConfirmButton = setConfirmTradeButton(tradeID, isTraderFirstUser);\r\n\r\n        ongoingTradePanel.add(otherTraderName);\r\n        ongoingTradePanel.add(tradeLocation);\r\n        ongoingTradePanel.add(tradeMeetingTime);\r\n        ongoingTradePanel.add(tradeDetailsButton);\r\n        ongoingTradePanel.add(tradeConfirmButton);\r\n\r\n        return ongoingTradePanel;\r\n    }\r\n\r\n    private JButton setConfirmTradeButton(String tradeID, boolean isTraderFirstUser) throws TradeNotFoundException {\r\n        JButton tradeConfirmButton = new JButton();\r\n\r\n        boolean hasSecondMeeting = tradeQuery.getSecondMeetingTime(tradeID) != null;\r\n        boolean hasFirstMeetingCompleted = tradeQuery.isFirstUserConfirmed1(tradeID) && tradeQuery.isSecondUserConfirmed1(tradeID);\r\n        boolean hasSecondMeetingCompleted = tradeQuery.isFirstUserConfirmed2(tradeID) && tradeQuery.isSecondUserConfirmed2(tradeID);\r\n        boolean isTraderAbleToConfirm = true;\r\n        if(hasFirstMeetingCompleted && (hasSecondMeeting && !hasSecondMeetingCompleted)) {\r\n            isTraderAbleToConfirm = isTraderFirstUser ? !tradeQuery.isFirstUserConfirmed2(tradeID) : !tradeQuery.isSecondUserConfirmed2(tradeID); \r\n        } else if(!hasFirstMeetingCompleted) {\r\n            isTraderAbleToConfirm = isTraderFirstUser ? !tradeQuery.isFirstUserConfirmed1(tradeID) : !tradeQuery.isSecondUserConfirmed1(tradeID);\r\n        }\r\n\r\n        tradeConfirmButton.setText(!isTraderAbleToConfirm ? \"Confirmed\" : \"Confirm\");\r\n        tradeConfirmButton.setFont((!isTraderAbleToConfirm ? boldItalic : bold).deriveFont(20f));\r\n        tradeConfirmButton.setForeground(Color.WHITE);\r\n        tradeConfirmButton.setBackground(!isTraderAbleToConfirm ? bg : green);\r\n        tradeConfirmButton.setEnabled(isTraderAbleToConfirm);\r\n        tradeConfirmButton.setBorder(BorderFactory.createLineBorder(gray, 15));\r\n\r\n        tradeConfirmButton.addActionListener(e -> {\r\n            try {\r\n                tradeManager.confirmMeetingGeneral(trader, tradeID, true);\r\n                // System.out.println(tradeQuery.isFirstUserConfirmed1(tradeID));\r\n                // System.out.println(tradeQuery.isSecondUserConfirmed1(tradeID));\r\n                // System.out.println(tradeQuery.isFirstUserConfirmed2(tradeID));\r\n                // System.out.println(tradeQuery.isSecondUserConfirmed2(tradeID));\r\n                tradeConfirmButton.setBackground(bg);\r\n                tradeConfirmButton.setText(\"Confirmed\");\r\n                tradeConfirmButton.setEnabled(false);\r\n                tradeConfirmButton.setFont(boldItalic.deriveFont(20f));\r\n                ((TradePanel) this.getParent()).refreshOngoingTradesPanel();\r\n            } catch (TradeNotFoundException | UserNotFoundException | AuthorizationException | IOException e1) {\r\n                e1.printStackTrace();\r\n            }\r\n        });\r\n\r\n        return tradeConfirmButton;\r\n    }\r\n\r\n    private JPanel createNoTradesFoundPanel(String message) {\r\n        JPanel noTradesFoundPanel = new JPanel();\r\n        noTradesFoundPanel.setPreferredSize(new Dimension(1200, 300));\r\n        noTradesFoundPanel.setBackground(gray2);\r\n        JLabel noTradesFound = new JLabel(message);\r\n        noTradesFound.setFont(bold.deriveFont(30f));\r\n        noTradesFound.setForeground(Color.WHITE);\r\n        noTradesFound.setHorizontalAlignment(JLabel.CENTER);\r\n        noTradesFound.setPreferredSize(new Dimension(1200, 300));\r\n        noTradesFoundPanel.add(noTradesFound, BorderLayout.CENTER);\r\n        return noTradesFoundPanel;\r\n    }\r\n\r\n    private JPanel setOngoingTradesHeader() {\r\n        JPanel ongoingTradesHeader = new JPanel(new GridLayout(1, 5, 25, 0));\r\n        ongoingTradesHeader.setPreferredSize(new Dimension(1200, 25));\r\n        ongoingTradesHeader.setBackground(gray);\r\n        ongoingTradesHeader.setBorder(BorderFactory.createEmptyBorder(0, 25, 0, 80));\r\n\r\n        JLabel name = new JLabel(\"Name\");\r\n        name.setFont(this.regular.deriveFont(20f));\r\n        name.setForeground(Color.BLACK);\r\n        name.setHorizontalAlignment(JLabel.LEFT);\r\n\r\n        JLabel location = new JLabel(\"Location\");\r\n        location.setFont(this.regular.deriveFont(20f));\r\n        location.setForeground(Color.BLACK);\r\n        location.setHorizontalAlignment(JLabel.CENTER);\r\n\r\n        JLabel meetingTime = new JLabel(\"           Meeting Time\");\r\n        meetingTime.setFont(this.regular.deriveFont(20f));\r\n        meetingTime.setForeground(Color.BLACK);\r\n        meetingTime.setHorizontalAlignment(JLabel.CENTER);\r\n\r\n        JLabel empty2 = new JLabel(\"\");\r\n        JLabel empty1 = new JLabel(\"\");\r\n\r\n        ongoingTradesHeader.add(name);\r\n        ongoingTradesHeader.add(location);\r\n        ongoingTradesHeader.add(meetingTime);\r\n\r\n        ongoingTradesHeader.add(empty1);\r\n        ongoingTradesHeader.add(empty2);\r\n\r\n        return ongoingTradesHeader;\r\n    }\r\n\r\n    private JButton createTradeButton(String title) {\r\n        JButton tradeButton = new JButton(title);\r\n        tradeButton.setFont(regular.deriveFont(20f));\r\n        tradeButton.setHorizontalAlignment(JButton.RIGHT);\r\n        tradeButton.setForeground(Color.cyan);\r\n        tradeButton.setBackground(bg);\r\n        tradeButton.setOpaque(true);\r\n        tradeButton.setBorderPainted(false);\r\n        tradeButton.addActionListener(this);\r\n        return tradeButton;\r\n    }\r\n\r\n    private JPanel setOngoingTradesTitleHeader() {\r\n        JPanel ongoingTradesTitleContainer = new JPanel(new GridLayout(1, 4));\r\n        ongoingTradesTitleContainer.setOpaque(false);\r\n        ongoingTradesTitleContainer.setPreferredSize(new Dimension(1200, 50));\r\n\r\n        JLabel ongoingTradesTitle = new JLabel(\"Ongoing Trades\");\r\n        ongoingTradesTitle.setFont(regular.deriveFont(30f));\r\n        ongoingTradesTitle.setForeground(Color.WHITE);\r\n        ongoingTradesTitle.setBackground(bg);\r\n        ongoingTradesTitle.setHorizontalAlignment(JLabel.LEFT);\r\n        ongoingTradesTitle.setOpaque(true);\r\n        ongoingTradesTitleContainer.add(ongoingTradesTitle);\r\n\r\n        JButton suggestLendButton = createTradeButton(\"<html><b><i><u>Suggest Lend</u></i></b></html>\");\r\n        JButton suggestTradeButton = createTradeButton(\"<html><b><i><u>Suggest Trade</u></i></b></html>\");\r\n        JButton addNewTradeButton = createTradeButton(\"<html><b><i><u>Add New Trade</u></i></b></html>\");\r\n\r\n        ongoingTradesTitleContainer.add(ongoingTradesTitle);\r\n        ongoingTradesTitleContainer.add(suggestLendButton);\r\n        ongoingTradesTitleContainer.add(suggestTradeButton);\r\n        ongoingTradesTitleContainer.add(addNewTradeButton);\r\n\r\n        return ongoingTradesTitleContainer;\r\n    }\r\n\r\n    /**\r\n     * For responding to any events\r\n     * @param e the event\r\n     */\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        // same as actionPreformed in TradePanel\r\n        if (trader.equals(\"\"))\r\n            return;\r\n\r\n        boolean isSuggestedTrade = e.getActionCommand().equals(\"<html><b><i><u>Suggest Trade</u></i></b></html>\");\r\n        boolean isSuggestedLend = e.getActionCommand().equals(\"<html><b><i><u>Suggest Lend</u></i></b></html>\");\r\n\r\n        Suggestion suggested = null;\r\n        try {\r\n            if (isSuggestedLend) {\r\n                suggested = infoManager.suggestLend(trader, true, normalSuggestLendStrategy);\r\n                if (suggested == null){\r\n                    suggested = infoManager.suggestLend(trader, true, similarSuggestLendStrategy);\r\n                }\r\n            }\r\n            else if (isSuggestedTrade) {\r\n                suggested = infoManager.suggestTrade(trader, true, normalSuggestTradeStrategy);\r\n                if (suggested == null) {\r\n                    suggested = infoManager.suggestTrade(trader, true, similarSuggestTradeStrategy);\r\n                }\r\n            }\r\n        } catch (UserNotFoundException | AuthorizationException e1) {\r\n            e1.printStackTrace();\r\n        }\r\n\r\n        if (suggested == null && (isSuggestedLend || isSuggestedTrade)) {\r\n            JDialog noSuggestionsFoundModal = createNoSuggestsFoundModal();\r\n            noSuggestionsFoundModal.setVisible(true);\r\n        }\r\n\r\n        try {\r\n            JDialog newTradeModal = new AddNewTradeModal(trader, suggested, regular, bold, italic, boldItalic);\r\n            newTradeModal.setVisible(true);\r\n        } catch (IOException | UserNotFoundException | TradableItemNotFoundException | AuthorizationException e1) {\r\n            e1.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    private JDialog createNoSuggestsFoundModal() {\r\n        JDialog noSuggestionsFound = new JDialog();\r\n        noSuggestionsFound.setTitle(\"No Suggestions Found\");\r\n        noSuggestionsFound.setSize(500, 200);\r\n        noSuggestionsFound.setResizable(false);\r\n        noSuggestionsFound.setLocationRelativeTo(null);\r\n\r\n        JTextArea noSuggestionsTitle = new JTextArea(\r\n                \"Unfortunately, we are not able to find a trade suggestion for you.\\n\\nClosing this pop-up will take you to the\\n'Add New Trade' menu.\");\r\n        noSuggestionsTitle.setFont(regular.deriveFont(22f));\r\n        noSuggestionsTitle.setBackground(bg);\r\n        noSuggestionsTitle.setForeground(Color.WHITE);\r\n        noSuggestionsTitle.setPreferredSize(new Dimension(500, 200));\r\n        noSuggestionsTitle.setOpaque(true);\r\n        noSuggestionsTitle.setEditable(false);\r\n        noSuggestionsTitle.setLineWrap(true);\r\n        noSuggestionsTitle.setWrapStyleWord(true);\r\n        noSuggestionsTitle.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n\r\n        noSuggestionsFound.add(noSuggestionsTitle);\r\n        noSuggestionsFound.setModal(true);\r\n\r\n        return noSuggestionsFound;\r\n    }\r\n    \r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/frontend/panels/trader_panel/trader_subpanels/trade_panels/OngoingTradesPanel.java	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ src/frontend/panels/trader_panel/trader_subpanels/trade_panels/OngoingTradesPanel.java	(date 1596843388912)
@@ -232,7 +232,7 @@
 
         tradeConfirmButton.addActionListener(e -> {
             try {
-                tradeManager.confirmMeetingGeneral(trader, tradeID, true);
+                tradeManager.confirmMeetingGeneral(trader, tradeID);
                 // System.out.println(tradeQuery.isFirstUserConfirmed1(tradeID));
                 // System.out.println(tradeQuery.isSecondUserConfirmed1(tradeID));
                 // System.out.println(tradeQuery.isFirstUserConfirmed2(tradeID));
Index: test/TestTradingInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import backend.exceptions.*;\r\nimport backend.tradesystem.suggestion_strategies.Suggestion;\r\nimport backend.models.TradableItem;\r\nimport backend.models.Trade;\r\nimport backend.models.users.Admin;\r\nimport backend.models.users.Trader;\r\nimport backend.tradesystem.TraderProperties;\r\nimport backend.tradesystem.UserTypes;\r\nimport backend.tradesystem.admin_managers.HandleItemRequestsManager;\r\nimport backend.tradesystem.general_managers.LoginManager;\r\nimport backend.Database;\r\n\r\nimport java.util.Date;\r\n\r\nimport backend.tradesystem.suggestion_strategies.ExactWishlistSuggestion;\r\nimport backend.tradesystem.suggestion_strategies.SimilarWishlistSuggestion;\r\nimport backend.tradesystem.trader_managers.TraderManager;\r\nimport backend.tradesystem.trader_managers.TradingInfoManager;\r\nimport backend.tradesystem.trader_managers.TradingManager;\r\nimport org.junit.*;\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Properties;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\npublic class TestTradingInfo extends TestManager {\r\n    private TraderManager traderManager;\r\n    private LoginManager loginManager;\r\n    private HandleItemRequestsManager handleRequestsManager;\r\n    private TradingInfoManager tradingInfoManager;\r\n    private TradingManager tradingManager;\r\n    private Database<TradableItem> tradableItemDatabase;\r\n\r\n    private Trader[] traders;\r\n\r\n    //Variables for testAutomatedTrade below\r\n    Trader t1;\r\n    Trader t2;\r\n    Trader t3;\r\n    Trader t4;\r\n    Trader t5;\r\n    Trader t6;\r\n    Trader t7;\r\n\r\n\r\n\r\n\r\n    private Admin admin;\r\n    private final String USER_PATH = \"./test/testUsers.ser\";\r\n    private final String TRADABLE_ITEM_PATH = \"./test/testTradableItems.ser\";\r\n    private final String TRADE_PATH = \"./test/testTrades.ser\";\r\n    private final String TRADER_PROPERTY_FILE_PATH = \"./test/trader.properties\";\r\n    private Date goodDate = new Date(System.currentTimeMillis() + 99999999);\r\n    private Date goodDate2 = new Date(System.currentTimeMillis() + 999999999);\r\n\r\n    public TestTradingInfo() throws IOException {\r\n        super();\r\n    }\r\n\r\n    @Before\r\n    public void beforeEach() {\r\n        try {\r\n            traderManager = new TraderManager(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            loginManager = new LoginManager(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH, TRADER_PROPERTY_FILE_PATH);\r\n            tradingManager = new TradingManager(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            handleRequestsManager = new HandleItemRequestsManager(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            tradingInfoManager = new TradingInfoManager(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH);\r\n            tradableItemDatabase = new Database<>(TRADABLE_ITEM_PATH);\r\n            traders = new Trader[10];\r\n            for (int i = 0; i < traders.length; i++) {\r\n                traders[i] = getTrader(loginManager.registerUser(\"user\" + i, \"passssssssS11\", UserTypes.TRADER));\r\n                traderManager.addRequestItem(traders[i].getId(), \"apple\" + i, \"desc\" + i);\r\n                traderManager.addRequestItem(traders[i].getId(), \"fruit\" + i, \"desc second\" + i);\r\n                traderManager.addRequestItem(traders[i].getId(), \"another\" + i, \"desc third\" + i);\r\n                traders[i] = getTrader(traders[i].getId());\r\n                handleRequestsManager.processItemRequest(traders[i].getId(), traders[i].getRequestedItems().get(0), true);\r\n                handleRequestsManager.processItemRequest(traders[i].getId(), traders[i].getRequestedItems().get(1), true);\r\n                handleRequestsManager.processItemRequest(traders[i].getId(), traders[i].getRequestedItems().get(2), true);\r\n                traders[i] = getTrader(traders[i].getId());\r\n            }\r\n            for (int i = 1; i < traders.length - 1; i++) {\r\n                traderManager.addToWishList(traders[i].getId(), traders[i + 1].getAvailableItems().get(0));\r\n//                traderManager.addToWishList(traders[i].getId(), traders[i - 1].getAvailableItems().get(0));\r\n                traders[i] = getTrader(traders[i].getId());\r\n            }\r\n            admin = (Admin) getUser(loginManager.registerUser(\"admin\", \"PASDASDFDSAFpadsf1\", UserTypes.ADMIN));\r\n\r\n            //-------------Tests for automatedTradeSuggestion below----------------------------------------\r\n\r\n            /*\r\n                        - info for createNewTrader helper function\r\n                 createNewTrader(String name, String city, ArrayList<String> listOfNamesInventory, ArrayList<String> listOfNamesWishlist)\r\n                 * @param name is the name of the trader\r\n                 * @param city is the city of the trader\r\n                 * @param listOfNamesInventory is a list of the names of the items that will be added to this traders inventory\r\n                 * @param listOfNamesWishlist is a list of the names of the items that will be added to this traders wishlist\r\n                 * @return the updated trader\r\n             */\r\n\r\n            ArrayList<String> t1Inventory = new ArrayList<>();\r\n            t1Inventory.add(\"ball\");\r\n            t1Inventory.add(\"rocketz\");\r\n            ArrayList<String> t1Wishlist = new ArrayList<>();\r\n            t1Wishlist.add(\"johns dad\");\r\n            t1Wishlist.add(\"nice iphone\");\r\n            t1 = createNewTrader(\"john\", \"toronto\", t1Inventory, t1Wishlist);\r\n            ArrayList<String> t2Inventory = new ArrayList<>();\r\n            t2Inventory.add(\"nice iphone7\");\r\n            t2Inventory.add(\"sandwich\");\r\n            t2Inventory.add(\"mouse\");\r\n            ArrayList<String> t2Wishlist = new ArrayList<>();\r\n            t2Wishlist.add(\"ballz\");\r\n            t2Wishlist.add(\"rocket\");\r\n            t2 = createNewTrader(\"johns dad\", \"toronto\", t2Inventory, t2Wishlist);\r\n            ArrayList<String> t3Inventory = new ArrayList<>();\r\n            ArrayList<String> t3Wishlist = new ArrayList<>();\r\n            t3Inventory.add(\"red apple\");\r\n            t3Inventory.add(\"wallets\");\r\n            t3Inventory.add(\"acer computer\");\r\n            t3Wishlist.add(\"bandage\");\r\n            t3 = createNewTrader(\"trader3\", \"Markham\", t3Inventory, t3Wishlist);\r\n            ArrayList<String> t4Inventory = new ArrayList<>();\r\n            ArrayList<String> t4Wishlist = new ArrayList<>();\r\n            t4Inventory.add(\"red bandage\");\r\n            t4Wishlist.add(\"wallet\");\r\n            t4 = createNewTrader(\"trader4\", \"Toronto\", t4Inventory, t4Wishlist);\r\n            ArrayList<String> t5Inventory = new ArrayList<>();\r\n            ArrayList<String> t5Wishlist = new ArrayList<>();\r\n            t5Inventory.add(\"WHAT I WANT YOU CANNOT GIVE ME\");\r\n            t5Wishlist.add(\"WEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\");\r\n            t5 = createNewTrader(\"trader5\", \"Toronto\", t5Inventory, t5Wishlist);\r\n            ArrayList<String> t6Inventory = new ArrayList<>();\r\n            ArrayList<String> t6Wishlist = new ArrayList<>();\r\n            t5Inventory.add(\"12345678\");\r\n            t5Inventory.add(\"1234567\");\r\n\r\n\r\n\r\n        } catch (IOException ignored) {\r\n            fail(\"ERRORS WITH SETTING UP DATABASE FILES\");\r\n        } catch (UserAlreadyExistsException ignored) {\r\n            fail(\"REGISTERING USER ERROR\");\r\n        } catch (UserNotFoundException | AuthorizationException | TradableItemNotFoundException | BadPasswordException e) {\r\n            e.printStackTrace();\r\n            fail();\r\n        }\r\n    }\r\n\r\n    @After\r\n    public void afterEach() {\r\n        String[] paths = {USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH};\r\n        for (String path : paths) {\r\n            try {\r\n                OutputStream buffer = new BufferedOutputStream(new FileOutputStream(path));\r\n                ObjectOutput output = new ObjectOutputStream(buffer);\r\n                output.writeObject(new ArrayList<>());\r\n                output.close();\r\n            } catch (IOException ignored) {\r\n            }\r\n        }\r\n        setProperty(TraderProperties.INCOMPLETE_TRADE_LIM, 3);\r\n        setProperty(TraderProperties.MINIMUM_AMOUNT_NEEDED_TO_BORROW, 1);\r\n        setProperty(TraderProperties.TRADE_LIMIT, 10);\r\n    }\r\n\r\n    @Test\r\n    public void testFrequentTraders() {\r\n        try {\r\n            int n = traders.length;\r\n            for (int j = 0; j < 3; j++) {\r\n                for (int i = 0; i < traders.length / 2; i++) {\r\n                    String item1 = traders[i].getAvailableItems().get(0);\r\n                    String item2 = traders[traders.length - i - 1].getAvailableItems().get(0);\r\n                    Trade trade = getTrade(tradingManager.requestTrade(traders[i].getId(), traders[traders.length - i - 1].getId(), goodDate, goodDate2, \"home\",\r\n                            item1, item2, 3, \"This is a trade\"));\r\n                    tradingManager.acceptRequest(traders[traders.length - i - 1].getId(), trade.getId());\r\n                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);\r\n                    tradingManager.confirmMeetingGeneral(traders[traders.length - i - 1].getId(), trade.getId(), true);\r\n                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);\r\n                    tradingManager.confirmMeetingGeneral(traders[traders.length - i - 1].getId(), trade.getId(), true);\r\n                }\r\n            }\r\n            for (int i = 0; i < n; i++) {\r\n                assertEquals(tradingInfoManager.getFrequentTraders(traders[i].getId()).get(0), traders[n - 1 - i].getId());\r\n            }\r\n\r\n            for (int j = 0; j < 2; j++) {\r\n                for (int i = 0; i < traders.length - 1; i += 2) {\r\n                    String item1 = traders[i].getAvailableItems().get(2);\r\n                    String item2 = traders[i + 1].getAvailableItems().get(2);\r\n                    Trade trade = getTrade(tradingManager.requestTrade(traders[i].getId(), traders[i + 1].getId(), goodDate, goodDate2, \"home\",\r\n                            item1, item2, 3, \"This is a trade\"));\r\n                    tradingManager.acceptRequest(traders[i + 1].getId(), trade.getId());\r\n                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);\r\n                    tradingManager.confirmMeetingGeneral(traders[i + 1].getId(), trade.getId(), true);\r\n                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);\r\n                    tradingManager.confirmMeetingGeneral(traders[i + 1].getId(), trade.getId(), true);\r\n                }\r\n            }\r\n            for (int i = 0; i < n; i++) {\r\n                assertEquals(tradingInfoManager.getFrequentTraders(traders[i].getId()).get(0), traders[n - 1 - i].getId());\r\n            }\r\n            for (int i = 0; i < n - 1; i += 2) {\r\n                if (i == 4) {\r\n                    // This is becasue 4->5, and so 4 traded with 5 3 times\r\n                    assertEquals(tradingInfoManager.getFrequentTraders(traders[4].getId()).get(0), traders[5].getId());\r\n                    continue;\r\n                }\r\n                assertEquals(tradingInfoManager.getFrequentTraders(traders[i].getId()).get(1), traders[i + 1].getId());\r\n            }\r\n\r\n\r\n            update();\r\n            for (int i = 0; i < traders.length - 2; i += 3) {\r\n                String item1 = traders[i].getAvailableItems().get(0);\r\n                String item2 = traders[i + 2].getAvailableItems().get(0);\r\n                Trade trade = getTrade(tradingManager.requestTrade(traders[i].getId(), traders[i + 2].getId(), goodDate, goodDate2, \"home\",\r\n                        item1, item2, 3, \"This is a trade\"));\r\n                tradingManager.acceptRequest(traders[i + 2].getId(), trade.getId());\r\n                tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);\r\n                tradingManager.confirmMeetingGeneral(traders[i + 2].getId(), trade.getId(), true);\r\n                tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);\r\n                tradingManager.confirmMeetingGeneral(traders[i + 2].getId(), trade.getId(), true);\r\n            }\r\n\r\n            for (int i = 0; i < n; i++) {\r\n                assertEquals(tradingInfoManager.getFrequentTraders(traders[i].getId()).get(0), traders[n - 1 - i].getId());\r\n            }\r\n            for (int i = 0; i < n - 1; i += 2) {\r\n                if (i == 4) {\r\n                    // This is becasue 4->5, and so 4 traded with 5 3 times\r\n                    assertEquals(tradingInfoManager.getFrequentTraders(traders[4].getId()).get(0), traders[5].getId());\r\n                    continue;\r\n                }\r\n                assertEquals(tradingInfoManager.getFrequentTraders(traders[i].getId()).get(1), traders[i + 1].getId());\r\n            }\r\n            for (int i = 0; i < traders.length - 2; i += 3) {\r\n                assertEquals(tradingInfoManager.getFrequentTraders(traders[i].getId()).get(2), traders[i + 2].getId());\r\n            }\r\n\r\n        } catch (UserNotFoundException | AuthorizationException | CannotTradeException | TradeNotFoundException e) {\r\n            fail(e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testSuggestLend() {\r\n        try {\r\n            for (int i = 2; i < traders.length - 2; i++) {\r\n                Suggestion suggested = tradingInfoManager.suggestLend(traders[i].getId(), true, new ExactWishlistSuggestion(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH));\r\n                assertEquals(suggested.getFromTraderId(), traders[i].getId());\r\n                assertEquals(suggested.getToTraderId(), traders[i - 1].getId());\r\n                assertEquals(suggested.getFromTraderOfferId(), traders[i - 1].getWishlist().get(0));\r\n\r\n            }\r\n        } catch (Exception e) {\r\n            fail(e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    @Test\r\n    public void testSuggestTrade() {\r\n        try {\r\n            for (int i = 1; i < traders.length - 1; i++) {\r\n                traderManager.addToWishList(traders[i].getId(), traders[i - 1].getAvailableItems().get(0));\r\n                traders[i] = getTrader(traders[i].getId());\r\n            }\r\n            for (int i = 2; i < traders.length - 2; i++) {\r\n                Suggestion suggested = tradingInfoManager.suggestTrade(traders[i].getId(), true, new ExactWishlistSuggestion(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH));\r\n                //[thisTraderId, toTraderId, itemIdToGive, itemIdToReceive]\r\n                assertEquals(suggested.getFromTraderId(), traders[i].getId());\r\n                if (suggested.getToTraderId().equals(traders[i + 1].getId())) {\r\n                    assertEquals(suggested.getFromTraderOfferId(), traders[i].getAvailableItems().get(0));\r\n                    assertEquals(suggested.getToTraderOfferId(), traders[i + 1].getAvailableItems().get(0));\r\n                } else if (suggested.getToTraderId().equals(traders[i - 1].getId())) {\r\n                    assertEquals(suggested.getFromTraderOfferId(), traders[i].getAvailableItems().get(0));\r\n                    assertEquals(suggested.getToTraderOfferId(), traders[i - 1].getAvailableItems().get(0));\r\n                } else {\r\n                    fail();\r\n                }\r\n\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            fail(e.getMessage());\r\n\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testAutomatedTradeSuggestion() throws UserNotFoundException, AuthorizationException, TradableItemNotFoundException, IOException {\r\n\r\n        //testAutomatedTradeSuggestion(Trader t1, Trader t2, String itemT1Name, String itemT2Name, boolean filter)\r\n\r\n\r\n        testingAutomatedTradeSuggestion(t1, t2 ,\"rocketz\", \"nice iphone7\", false);\r\n        testingAutomatedTradeSuggestion(t3,t4,\"wallets\", \"red bandage\", false);\r\n        testingAutomatedTradeSuggestion(t3,t4,\"\", \"\", true);\r\n        testingAutomatedTradeSuggestion(t5, t4, \"\", \"\", false);\r\n    }\r\n\r\n    //@Test !make sim search public\r\n    public void testSimilarSearch() throws TradableItemNotFoundException, AuthorizationException, UserNotFoundException {\r\n        // Wishlist is example\r\n        // emample would return 6/7 (replaced char)\r\n        // exawmple would return 6/7 (extra char)\r\n        // examle would return 5/7 (removing a char)\r\n        // If the similarity score isn't at least 80% of the wishlist string length, then the similarity should be 0\r\n        ArrayList<Object[]> objectList = new ArrayList<>();\r\n//        objectList.add(new Object[]{\"exampleexample\", 14});\r\n//        objectList.add(new Object[]{\"this\", 0});\r\n//        objectList.add(new Object[]{\"examplexample\", 12});\r\n//        objectList.add(new Object[]{\"axampleaxample\", 12});\r\n//        objectList.add(new Object[]{\"exampleeexample\", 13});\r\n//        objectList.add(new Object[]{\"xampleexamp\", 11});\r\n//        objectList.add(new Object[]{\"eyampleexayple\", 12});\r\n//        objectList.add(new Object[]{\"eyampleyxayple\", 11});\r\n//        objectList.add(new Object[]{\"eyampleyxayples\", 11});\r\n//        objectList.add(new Object[]{\"aaaaeyampleyxayplesaaaaa\", 11});\r\n        objectList.add(new Object[]{\"nice iphone7\", 7});\r\n        //objectList.add(new Object[]{\"examplZZexample\", 11}); //oopsies\r\n        confirmSimilarSearchWithList(\"nice iphone7\", objectList);\r\n    }\r\n\r\n    private void update() {\r\n        try {\r\n            for (int i = 0; i < traders.length; i++) {\r\n                traders[i] = getTrader(traders[i].getId());\r\n            }\r\n            admin = (Admin) getUser(admin.getId());\r\n\r\n        } catch (UserNotFoundException | AuthorizationException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the value of a property.\r\n     *\r\n     * @param propertyName  the property to change\r\n     * @param propertyValue the new value of that property\r\n     */\r\n    private void setProperty(TraderProperties propertyName, int propertyValue) {\r\n        try {\r\n            // get the file\r\n            File propertyFile = new File(TRADER_PROPERTY_FILE_PATH);\r\n            // initialize reader\r\n            FileReader reader = new FileReader(propertyFile);\r\n            // initialize properties object (to set data)\r\n            Properties properties = new Properties();\r\n            // associate this properties object with the file\r\n            properties.load(reader);\r\n            // set the property\r\n            properties.setProperty(propertyName.getProperty(), \"\" + propertyValue);\r\n\r\n            //update the file\r\n            FileWriter writer = new FileWriter(propertyFile);\r\n            properties.store(writer, \"\");\r\n            reader.close();\r\n            writer.close();\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    private void confirmSimilarSearch(String itemToSearchId, String expectedItemName, int expectedSimilarityScore, ArrayList<String> list) throws TradableItemNotFoundException, AuthorizationException, UserNotFoundException {\r\n        /*\r\n        Object[] similarItem = tradingInfoManager.similarSearch(itemToSearchId, list);//tests for missing char\r\n        String expectedItemId = null;\r\n        for (String itemIds : list) {\r\n            String itemName = getTradableItem(itemIds).getName();\r\n            if (itemName.equals(expectedItemName)) {\r\n                expectedItemId = itemIds;\r\n            }\r\n        }\r\n        if ((similarItem == null || expectedItemId == null)) { // Threshold test\r\n            assertEquals(\"Below threshold \" + expectedItemName, expectedSimilarityScore, 0);\r\n        } else {\r\n            assertEquals(expectedItemName, expectedItemId, similarItem[0]);\r\n            assertEquals(expectedItemName, expectedSimilarityScore, similarItem[1]);\r\n        }\r\n\r\n        */\r\n\r\n    }\r\n\r\n\r\n    private void confirmSimilarSearchWithList(String itemToSearchName, ArrayList<Object[]> itemNameAndScore) throws TradableItemNotFoundException, UserNotFoundException, AuthorizationException {\r\n        TradableItem item = new TradableItem(itemToSearchName, \"desc\");\r\n        tradableItemDatabase.update(item);\r\n        for (Object[] items : itemNameAndScore) {\r\n            ArrayList<String> list = new ArrayList<>();\r\n            list = addToItemList(list, (String) items[0], \"desc\");\r\n            confirmSimilarSearch(item.getId(), (String) items[0], (int) items[1], list);\r\n        }\r\n\r\n    }\r\n\r\n    private ArrayList<String> addToItemList(ArrayList<String> list, String itemName, String itemDesc) {\r\n        TradableItem item = new TradableItem(itemName, itemDesc);\r\n        tradableItemDatabase.update(item);\r\n        list.add(item.getId());\r\n        return list;\r\n    }\r\n\r\n    private void testingAutomatedTradeSuggestion(Trader t1, Trader t2, String itemT1Name, String itemT2Name, boolean filter) throws UserNotFoundException, AuthorizationException, TradableItemNotFoundException, IOException {\r\n\r\n        Suggestion test = tradingInfoManager.suggestTrade(t1.getId(), filter, new SimilarWishlistSuggestion(USER_PATH, TRADABLE_ITEM_PATH, TRADE_PATH));\r\n        String itemT1Id = null;\r\n        String itemT2Id = null;\r\n        for(String ids: getTradableItemDatabase().getItems().keySet()){\r\n            if(getTradableItem(ids).getName().equals(itemT1Name)){\r\n                itemT1Id = ids;\r\n            }\r\n            if(getTradableItem(ids).getName().equals(itemT2Name)){\r\n                itemT2Id = ids;\r\n            }\r\n        }\r\n\r\n        if(itemT1Name.length() == 0 && itemT2Name.length() == 0 && test == null){\r\n            return;\r\n        }\r\n\r\n        t1 = getTrader(t1.getId());\r\n        t2 = getTrader(t2.getId());\r\n        System.out.println(\"---------------------------------------------------------------------------------------------\");\r\n        System.out.println(\"item name expected: \" + itemT1Name + \"--- item id expected: \" + itemT1Id);\r\n        System.out.println(\"item name actual: \" + getTradableItem(test.getFromTraderOfferId()).getName() + \"--- item id expected: \" + test.getFromTraderOfferId());\r\n        assertEquals(t1.getId(), test.getFromTraderId());\r\n        assertEquals(t2.getId(), test.getToTraderId());\r\n        System.out.println(\"item2 name expected: \" + itemT2Name +  \"--- item id expected: \" + itemT2Id);\r\n        System.out.println(\"item2 name actual: \" + getTradableItem(test.getToTraderOfferId()).getName() + \"--- item id expected: \" + test.getToTraderOfferId());\r\n        System.out.println(\"---------------------------------------------------------------------------------------------\");\r\n        assertEquals(itemT1Id, test.getFromTraderOfferId());\r\n        assertEquals(itemT2Id, test.getToTraderOfferId());\r\n\r\n    }\r\n    /**\r\n     *\r\n     * @param name is the name of the trader\r\n     * @param city is the city of the trader\r\n     * @param listOfNamesInventory is a list of the names of the items that will be added to this traders inventory\r\n     * @param listOfNamesWishlist is a list of the names of the items that will be added to this traders wishlist\r\n     * @return the updated trader\r\n     * @throws UserNotFoundException\r\n     * @throws AuthorizationException\r\n     */\r\n    private Trader createNewTrader(String name, String city, ArrayList<String> listOfNamesInventory, ArrayList<String> listOfNamesWishlist) throws UserNotFoundException, AuthorizationException, TradableItemNotFoundException {\r\n        ArrayList<String> listIdsInventory = new ArrayList<>();\r\n        ArrayList<String> listIdsWishlist = new ArrayList<>();\r\n\r\n        Trader trader = new Trader(name,\"passssssssS11\", city, 99, 99, 0);\r\n        updateUserDatabase(trader);\r\n        for(String itemNamesInventory: listOfNamesInventory){\r\n            listIdsInventory = addToItemList(listIdsInventory , itemNamesInventory, \"desc\");\r\n        }\r\n        trader.getAvailableItems().addAll(listIdsInventory);\r\n        for(String itemNamesWishlist: listOfNamesWishlist){\r\n            listIdsWishlist = addToItemList(listIdsWishlist , itemNamesWishlist, \"desc\");\r\n        }\r\n        trader.getWishlist().addAll(listIdsWishlist);\r\n\r\n\r\n        updateUserDatabase(trader);\r\n        return getTrader(trader.getId());\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/TestTradingInfo.java	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ test/TestTradingInfo.java	(date 1596843413962)
@@ -176,10 +176,10 @@
                     Trade trade = getTrade(tradingManager.requestTrade(traders[i].getId(), traders[traders.length - i - 1].getId(), goodDate, goodDate2, "home",
                             item1, item2, 3, "This is a trade"));
                     tradingManager.acceptRequest(traders[traders.length - i - 1].getId(), trade.getId());
-                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);
-                    tradingManager.confirmMeetingGeneral(traders[traders.length - i - 1].getId(), trade.getId(), true);
-                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);
-                    tradingManager.confirmMeetingGeneral(traders[traders.length - i - 1].getId(), trade.getId(), true);
+                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId());
+                    tradingManager.confirmMeetingGeneral(traders[traders.length - i - 1].getId(), trade.getId());
+                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId());
+                    tradingManager.confirmMeetingGeneral(traders[traders.length - i - 1].getId(), trade.getId());
                 }
             }
             for (int i = 0; i < n; i++) {
@@ -193,10 +193,10 @@
                     Trade trade = getTrade(tradingManager.requestTrade(traders[i].getId(), traders[i + 1].getId(), goodDate, goodDate2, "home",
                             item1, item2, 3, "This is a trade"));
                     tradingManager.acceptRequest(traders[i + 1].getId(), trade.getId());
-                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);
-                    tradingManager.confirmMeetingGeneral(traders[i + 1].getId(), trade.getId(), true);
-                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);
-                    tradingManager.confirmMeetingGeneral(traders[i + 1].getId(), trade.getId(), true);
+                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId());
+                    tradingManager.confirmMeetingGeneral(traders[i + 1].getId(), trade.getId());
+                    tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId());
+                    tradingManager.confirmMeetingGeneral(traders[i + 1].getId(), trade.getId());
                 }
             }
             for (int i = 0; i < n; i++) {
@@ -219,10 +219,10 @@
                 Trade trade = getTrade(tradingManager.requestTrade(traders[i].getId(), traders[i + 2].getId(), goodDate, goodDate2, "home",
                         item1, item2, 3, "This is a trade"));
                 tradingManager.acceptRequest(traders[i + 2].getId(), trade.getId());
-                tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);
-                tradingManager.confirmMeetingGeneral(traders[i + 2].getId(), trade.getId(), true);
-                tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId(), true);
-                tradingManager.confirmMeetingGeneral(traders[i + 2].getId(), trade.getId(), true);
+                tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId());
+                tradingManager.confirmMeetingGeneral(traders[i + 2].getId(), trade.getId());
+                tradingManager.confirmMeetingGeneral(traders[i].getId(), trade.getId());
+                tradingManager.confirmMeetingGeneral(traders[i + 2].getId(), trade.getId());
             }
 
             for (int i = 0; i < n; i++) {
Index: src/frontend/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frontend;\r\n\r\nimport java.util.Date;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\nimport javax.swing.UIManager;\r\n\r\nimport backend.tradesystem.DetectDatabaseChange;\r\n\r\n/**\r\n * This is where the program starts running\r\n * Code partially taken from\r\n * https://stackoverflow.com/questions/54815226/how-can-i-detect-if-a-file-has-been-modified-using-lastmodified\r\n */\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        try {\r\n            //new TemporarySetup();\r\n            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());\r\n            WindowManager windowManager = new WindowManager();\r\n            windowManager.run();\r\n            TimerTask task = new DetectDatabaseChange() {\r\n                protected void onChange() {\r\n                    // If backend files change, this gets called\r\n                    try {\r\n                        if (!windowManager.getUserId().equals(\"\")) {\r\n                            windowManager.logout();\r\n                            windowManager.login(windowManager.getUserId());\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            };\r\n            Timer timer = new Timer();\r\n            timer.schedule(task, new Date(), 500);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/frontend/Main.java	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ src/frontend/Main.java	(date 1596844044217)
@@ -16,7 +16,7 @@
 public class Main {
     public static void main(String[] args) {
         try {
-            //new TemporarySetup();
+            new TemporarySetup();
             UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
             WindowManager windowManager = new WindowManager();
             windowManager.run();
Index: src/backend/tradesystem/trader.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#\r\n#Fri Aug 07 17:47:42 EDT 2020\r\nlastTradeCountUpdate=2640\r\ndefaultIncompleteTradeLim=1\r\ndefaultTradeLimit=10\r\ndefaultMinimumAmountNeededToBorrow=1\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/backend/tradesystem/trader.properties	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ src/backend/tradesystem/trader.properties	(date 1596844045589)
@@ -1,6 +1,6 @@
 #
-#Fri Aug 07 17:47:42 EDT 2020
+#Fri Aug 07 19:47:25 EDT 2020
 lastTradeCountUpdate=2640
-defaultIncompleteTradeLim=1
+defaultIncompleteTradeLim=3
 defaultTradeLimit=10
 defaultMinimumAmountNeededToBorrow=1
Index: test/trader.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#\r\n#Thu Aug 06 18:10:34 EDT 2020\r\nlastTradeCountUpdate=2640\r\ndefaultIncompleteTradeLim=3\r\ndefaultTradeLimit=10\r\ndefaultMinimumAmountNeededToBorrow=1\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- test/trader.properties	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ test/trader.properties	(date 1596844030267)
@@ -1,5 +1,5 @@
 #
-#Thu Aug 06 18:10:34 EDT 2020
+#Fri Aug 07 19:47:10 EDT 2020
 lastTradeCountUpdate=2640
 defaultIncompleteTradeLim=3
 defaultTradeLimit=10
Index: src/backend/databasefiles/tradableitems.ser
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>��\u0000\u0005sr\u0000\u0011java.util.HashMap\u0005\u0007���\u0016`�\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000`w\b\u0000\u0000\u0000�\u0000\u0000\u00002t\u0000$6d14cb84-2065-4a6e-b8de-ddf9a49f077csr\u0000\u001Bbackend.models.TradableItemB�=���\u0007�\u0002\u0000\u0002L\u0000\u000BDESCRIPTIONt\u0000\u0012Ljava/lang/String;L\u0000\u0004NAMEq\u0000~\u0000\u0004xr\u0000\u001Bbackend.models.DatabaseIteml��\u0017@�l�\u0002\u0000\u0001L\u0000\u0006thisIdq\u0000~\u0000\u0004xpq\u0000~\u0000\u0002t\u0000\u0006sweet0t\u0000\u0006apple0t\u0000$7e0b7b52-d57f-4f1d-a375-4d9fed622f72sq\u0000~\u0000\u0003q\u0000~\u0000\tt\u0000\u0006sweet4t\u0000\u0006apple4t\u0000$74aa3b7c-b3ba-4f41-b0d1-b5d0f9cda3d7sq\u0000~\u0000\u0003q\u0000~\u0000\rt\u0000\rfrom oceania4t\u0000\u0005kiwi4t\u0000$64d290c5-388f-4052-bf71-41dacff6c98bsq\u0000~\u0000\u0003q\u0000~\u0000\u0011t\u0000\u000Bdisgusting2t\u0000\u000Bbanananana2t\u0000$15996fe2-a3d7-43b7-b0df-18c5d4631fb3sq\u0000~\u0000\u0003q\u0000~\u0000\u0015t\u0000\u000Frequested desc0t\u0000\nrequested0t\u0000$d79b1f5d-9f98-4882-8ec3-cdde5dc89179sq\u0000~\u0000\u0003q\u0000~\u0000\u0019t\u0000\u0013bad desc requested1t\u0000\u0012another requested1t\u0000$2e5ec299-57bc-41d7-a91a-93842fca46c2sq\u0000~\u0000\u0003q\u0000~\u0000\u001Dt\u0000\u0013bad desc requested6t\u0000\u0012another requested6t\u0000$b4c1e54f-ad13-4e0f-a43a-ba21e1b059b2sq\u0000~\u0000\u0003q\u0000~\u0000!t\u0000\u000Frequested desc9t\u0000\nrequested9t\u0000$38eaba5e-2696-4b23-b46f-07274ecca402sq\u0000~\u0000\u0003q\u0000~\u0000%t\u0000\u0006sweet5t\u0000\u0006apple5t\u0000$8d29bb7f-3577-4a43-a125-5af91a69d55csq\u0000~\u0000\u0003q\u0000~\u0000)t\u0000\u000Bdisgusting0t\u0000\u000Bbanananana0t\u0000$ba37475b-99d6-4da5-b7ec-0c36f81b232esq\u0000~\u0000\u0003q\u0000~\u0000-t\u0000\u000Bdisgusting9t\u0000\u000Bbanananana9t\u0000$73c6e870-6eda-4615-8a77-2f9759240625sq\u0000~\u0000\u0003q\u0000~\u00001t\u0000\u000Frequested desc5t\u0000\nrequested5t\u0000$7a712dbb-1b22-406a-aafa-51c8bddbfc13sq\u0000~\u0000\u0003q\u0000~\u00005t\u0000\u0013bad desc requested9t\u0000\u0012another requested9t\u0000$dcf7fb06-84eb-4482-94e2-836db8b5dc5csq\u0000~\u0000\u0003q\u0000~\u00009t\u0000\u0013bad desc requested3t\u0000\u0012another requested3t\u0000$d46c9cfc-8c41-4cec-b6e6-b277fba61562sq\u0000~\u0000\u0003q\u0000~\u0000=t\u0000\rfrom oceania7t\u0000\u0005kiwi7t\u0000$b5e76eee-6f6a-4dac-92a3-9d841bd1934bsq\u0000~\u0000\u0003q\u0000~\u0000At\u0000\rfrom oceania3t\u0000\u0005kiwi3t\u0000$10444217-00ef-4c48-b21d-9d3cba77e71fsq\u0000~\u0000\u0003q\u0000~\u0000Et\u0000\u000Bdisgusting4t\u0000\u000Bbanananana4t\u0000$e9efb654-f25a-4e43-9518-ddfaa5fd9404sq\u0000~\u0000\u0003q\u0000~\u0000It\u0000\u0006sweet1t\u0000\u0006apple1t\u0000$bd52a575-aceb-4273-8eb4-6656f9eacd33sq\u0000~\u0000\u0003q\u0000~\u0000Mt\u0000\rfrom oceania0t\u0000\u0005kiwi0t\u0000$cb26903e-a35a-4ea2-9e6a-3d60a6e465bcsq\u0000~\u0000\u0003q\u0000~\u0000Qt\u0000\u0006sweet8t\u0000\u0006apple8t\u0000$d49f6773-397f-467a-95b6-92896b31fdb1sq\u0000~\u0000\u0003q\u0000~\u0000Ut\u0000\u0013bad desc requested0t\u0000\u0012another requested0t\u0000$7da34d81-15df-4763-a5e8-783472285b06sq\u0000~\u0000\u0003q\u0000~\u0000Yt\u0000\u0006sweet6t\u0000\u0006apple6t\u0000$e8e72e67-9695-4e19-92a4-6b5363fa970fsq\u0000~\u0000\u0003q\u0000~\u0000]t\u0000\u0006sweet7t\u0000\u0006apple7t\u0000$80f298a8-b7ef-41e2-8551-7bef47f8bb63sq\u0000~\u0000\u0003q\u0000~\u0000at\u0000\u000Bdisgusting8t\u0000\u000Bbanananana8t\u0000$6bb02c69-dfbf-437f-9369-a9f456355d56sq\u0000~\u0000\u0003q\u0000~\u0000et\u0000\u0006sweet3t\u0000\u0006apple3t\u0000$4a9b50f1-13e5-4f71-aed9-3bf6100a1500sq\u0000~\u0000\u0003q\u0000~\u0000it\u0000\rfrom oceania6t\u0000\u0005kiwi6t\u0000$a8f72fee-57ed-4b9e-9d57-acc976026f93sq\u0000~\u0000\u0003q\u0000~\u0000mt\u0000\u0013bad desc requested7t\u0000\u0012another requested7t\u0000$101673d0-d807-434f-a9f2-43903d5476c8sq\u0000~\u0000\u0003q\u0000~\u0000qt\u0000\u000Frequested desc1t\u0000\nrequested1t\u0000$8617609e-d9c4-4961-a705-e00b18ad4467sq\u0000~\u0000\u0003q\u0000~\u0000ut\u0000\u000Frequested desc3t\u0000\nrequested3t\u0000$f017123d-897f-48c3-a4e0-f85d349309acsq\u0000~\u0000\u0003q\u0000~\u0000yt\u0000\u000Bdisgusting3t\u0000\u000Bbanananana3t\u0000$588727fc-a5f9-4f2b-b070-62734872050esq\u0000~\u0000\u0003q\u0000~\u0000}t\u0000\u000Bdisgusting5t\u0000\u000Bbanananana5t\u0000$8e79b787-87ae-426a-a582-0e2e9539d254sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u0013bad desc requested2t\u0000\u0012another requested2t\u0000$42194013-672e-4f29-a38f-d99e30c2583dsq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u000Frequested desc6t\u0000\nrequested6t\u0000$33a77131-7b33-44ba-b22b-a91c0c4a0fb4sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\rfrom oceania8t\u0000\u0005kiwi8t\u0000$af6a9b22-aa05-45e4-ab09-1de9ca66b6b6sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u0006sweet2t\u0000\u0006apple2t\u0000$dfef169e-682c-4456-90f4-587bc600817dsq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\rfrom oceania5t\u0000\u0005kiwi5t\u0000$28a9dd0d-88ef-45f2-9bc4-a7337bacd86dsq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\rfrom oceania1t\u0000\u0005kiwi1t\u0000$94b18850-6af7-4cc7-a599-eec168316875sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\rfrom oceania9t\u0000\u0005kiwi9t\u0000$5ceceb29-930c-4415-82a4-94fef43b44c3sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u000Bdisgusting6t\u0000\u000Bbanananana6t\u0000$164e10d8-aa24-4382-828f-5108c9b3ffd7sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\rfrom oceania2t\u0000\u0005kiwi2t\u0000$33dda1fb-c94b-4288-a805-7064b3d0ffbcsq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u000Frequested desc7t\u0000\nrequested7t\u0000$cc5ff068-f47f-4e19-8d33-7160bbbc9073sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u000Frequested desc8t\u0000\nrequested8t\u0000$e565f347-829a-4d68-a078-c0e717683f0fsq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u000Frequested desc2t\u0000\nrequested2t\u0000$c550ebc0-97c5-45a9-a6a9-2e01905bcbcesq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u000Bdisgusting1t\u0000\u000Bbanananana1t\u0000$1c788017-1134-4ed7-88c2-045a8bdaebc4sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u000Bdisgusting7t\u0000\u000Bbanananana7t\u0000$c6c7c751-328b-48ef-bbc9-c07e7b4070a7sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u0006sweet9t\u0000\u0006apple9t\u0000$65c8c395-6b5f-4c4f-903b-97eb2d8dc0a6sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u0013bad desc requested4t\u0000\u0012another requested4t\u0000$bcbc89bf-9eeb-4536-938c-5b4fafed75c1sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u000Frequested desc4t\u0000\nrequested4t\u0000$0b6f9474-3cbb-4c9a-b1e9-81452c0a1006sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u0013bad desc requested5t\u0000\u0012another requested5t\u0000$565d5480-5c5f-4ed0-9300-0f35739e4558sq\u0000~\u0000\u0003q\u0000~\u0000�t\u0000\u0013bad desc requested8t\u0000\u0012another requested8x
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/backend/databasefiles/tradableitems.ser	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ src/backend/databasefiles/tradableitems.ser	(date 1596844045975)
@@ -1,23 +1,22 @@
 �� sr java.util.HashMap���`� F 
-loadFactorI 	thresholdxp?@     `w   �   2t $6d14cb84-2065-4a6e-b8de-ddf9a49f077csr backend.models.TradableItemB�=���� L DESCRIPTIONt Ljava/lang/String;L NAMEq ~ xr backend.models.DatabaseIteml��@�l� L thisIdq ~ xpq ~ t sweet0t apple0t $7e0b7b52-d57f-4f1d-a375-4d9fed622f72sq ~ q ~ 	t sweet4t apple4t $74aa3b7c-b3ba-4f41-b0d1-b5d0f9cda3d7sq ~ q ~ 
-t 
-from oceania4t kiwi4t $64d290c5-388f-4052-bf71-41dacff6c98bsq ~ q ~ t disgusting2t banananana2t $15996fe2-a3d7-43b7-b0df-18c5d4631fb3sq ~ q ~ t requested desc0t 
-requested0t $d79b1f5d-9f98-4882-8ec3-cdde5dc89179sq ~ q ~ t bad desc requested1t another requested1t $2e5ec299-57bc-41d7-a91a-93842fca46c2sq ~ q ~ t bad desc requested6t another requested6t $b4c1e54f-ad13-4e0f-a43a-ba21e1b059b2sq ~ q ~ !t requested desc9t 
-requested9t $38eaba5e-2696-4b23-b46f-07274ecca402sq ~ q ~ %t sweet5t apple5t $8d29bb7f-3577-4a43-a125-5af91a69d55csq ~ q ~ )t disgusting0t banananana0t $ba37475b-99d6-4da5-b7ec-0c36f81b232esq ~ q ~ -t disgusting9t banananana9t $73c6e870-6eda-4615-8a77-2f9759240625sq ~ q ~ 1t requested desc5t 
-requested5t $7a712dbb-1b22-406a-aafa-51c8bddbfc13sq ~ q ~ 5t bad desc requested9t another requested9t $dcf7fb06-84eb-4482-94e2-836db8b5dc5csq ~ q ~ 9t bad desc requested3t another requested3t $d46c9cfc-8c41-4cec-b6e6-b277fba61562sq ~ q ~ =t 
-from oceania7t kiwi7t $b5e76eee-6f6a-4dac-92a3-9d841bd1934bsq ~ q ~ At 
-from oceania3t kiwi3t $10444217-00ef-4c48-b21d-9d3cba77e71fsq ~ q ~ Et disgusting4t banananana4t $e9efb654-f25a-4e43-9518-ddfaa5fd9404sq ~ q ~ It sweet1t apple1t $bd52a575-aceb-4273-8eb4-6656f9eacd33sq ~ q ~ Mt 
-from oceania0t kiwi0t $cb26903e-a35a-4ea2-9e6a-3d60a6e465bcsq ~ q ~ Qt sweet8t apple8t $d49f6773-397f-467a-95b6-92896b31fdb1sq ~ q ~ Ut bad desc requested0t another requested0t $7da34d81-15df-4763-a5e8-783472285b06sq ~ q ~ Yt sweet6t apple6t $e8e72e67-9695-4e19-92a4-6b5363fa970fsq ~ q ~ ]t sweet7t apple7t $80f298a8-b7ef-41e2-8551-7bef47f8bb63sq ~ q ~ at disgusting8t banananana8t $6bb02c69-dfbf-437f-9369-a9f456355d56sq ~ q ~ et sweet3t apple3t $4a9b50f1-13e5-4f71-aed9-3bf6100a1500sq ~ q ~ it 
-from oceania6t kiwi6t $a8f72fee-57ed-4b9e-9d57-acc976026f93sq ~ q ~ mt bad desc requested7t another requested7t $101673d0-d807-434f-a9f2-43903d5476c8sq ~ q ~ qt requested desc1t 
-requested1t $8617609e-d9c4-4961-a705-e00b18ad4467sq ~ q ~ ut requested desc3t 
-requested3t $f017123d-897f-48c3-a4e0-f85d349309acsq ~ q ~ yt disgusting3t banananana3t $588727fc-a5f9-4f2b-b070-62734872050esq ~ q ~ }t disgusting5t banananana5t $8e79b787-87ae-426a-a582-0e2e9539d254sq ~ q ~ �t bad desc requested2t another requested2t $42194013-672e-4f29-a38f-d99e30c2583dsq ~ q ~ �t requested desc6t 
-requested6t $33a77131-7b33-44ba-b22b-a91c0c4a0fb4sq ~ q ~ �t 
-from oceania8t kiwi8t $af6a9b22-aa05-45e4-ab09-1de9ca66b6b6sq ~ q ~ �t sweet2t apple2t $dfef169e-682c-4456-90f4-587bc600817dsq ~ q ~ �t 
-from oceania5t kiwi5t $28a9dd0d-88ef-45f2-9bc4-a7337bacd86dsq ~ q ~ �t 
-from oceania1t kiwi1t $94b18850-6af7-4cc7-a599-eec168316875sq ~ q ~ �t 
-from oceania9t kiwi9t $5ceceb29-930c-4415-82a4-94fef43b44c3sq ~ q ~ �t disgusting6t banananana6t $164e10d8-aa24-4382-828f-5108c9b3ffd7sq ~ q ~ �t 
-from oceania2t kiwi2t $33dda1fb-c94b-4288-a805-7064b3d0ffbcsq ~ q ~ �t requested desc7t 
-requested7t $cc5ff068-f47f-4e19-8d33-7160bbbc9073sq ~ q ~ �t requested desc8t 
-requested8t $e565f347-829a-4d68-a078-c0e717683f0fsq ~ q ~ �t requested desc2t 
-requested2t $c550ebc0-97c5-45a9-a6a9-2e01905bcbcesq ~ q ~ �t disgusting1t banananana1t $1c788017-1134-4ed7-88c2-045a8bdaebc4sq ~ q ~ �t disgusting7t banananana7t $c6c7c751-328b-48ef-bbc9-c07e7b4070a7sq ~ q ~ �t sweet9t apple9t $65c8c395-6b5f-4c4f-903b-97eb2d8dc0a6sq ~ q ~ �t bad desc requested4t another requested4t $bcbc89bf-9eeb-4536-938c-5b4fafed75c1sq ~ q ~ �t requested desc4t 
-requested4t $0b6f9474-3cbb-4c9a-b1e9-81452c0a1006sq ~ q ~ �t bad desc requested5t another requested5t $565d5480-5c5f-4ed0-9300-0f35739e4558sq ~ q ~ �t bad desc requested8t another requested8x
\ No newline at end of file
+loadFactorI 	thresholdxp?@     `w   �   2t $78cd49a4-2f4e-4878-9b59-0fae05a7e469sr backend.models.TradableItem:�"uˠ4 L DESCRIPTIONt Ljava/lang/String;L NAMEq ~ L idq ~ xpt requested desc2t 
+requested2q ~ t $ca4d2fc3-a854-4c59-966e-19f8badccc33sq ~ t requested desc9t 
+requested9q ~ t $8ba01ed4-40d3-42e4-be41-328b5ff0c18fsq ~ t bad desc requested4t another requested4q ~ t $45d064b3-e138-4a54-b0fa-d11fd5aa29bdsq ~ t sweet6t apple6q ~ t $75c7f083-cf65-4374-9af7-01dc00243256sq ~ t 
+from oceania2t kiwi2q ~ t $ba6d0980-0e2d-44be-b948-43c2cc872e97sq ~ t 
+from oceania9t kiwi9q ~ t $60e742bc-2742-4312-a806-232948883d84sq ~ t bad desc requested3t another requested3q ~ t $e7dc6ebb-4ffe-4632-80eb-7de31eb14df3sq ~ t sweet1t apple1q ~  t $94e80164-1ad6-477f-a58a-a1e528063621sq ~ t disgusting2t banananana2q ~ $t $6807f8e5-bf7a-4c93-bd4a-0a4c80cebec6sq ~ t 
+from oceania1t kiwi1q ~ (t $e3bab2e6-e730-4ca0-a435-6bdff0de64c8sq ~ t bad desc requested0t another requested0q ~ ,t $007d8a64-6343-4c05-97d9-5f1947ce693bsq ~ t disgusting0t banananana0q ~ 0t $63ed2129-740d-455d-87e3-0f5ea8e04a74sq ~ t 
+from oceania5t kiwi5q ~ 4t $be7e4329-da2a-4d88-98d3-9828869a7502sq ~ t requested desc6t 
+requested6q ~ 8t $0dcdf643-af58-4d14-beb6-47c7a3b84132sq ~ t sweet7t apple7q ~ <t $7545a826-5f3c-427d-84e8-c91d455b5fa8sq ~ t disgusting6t banananana6q ~ @t $b8cad713-37e6-47d5-9e5a-43946f953f3esq ~ t sweet4t apple4q ~ Dt $a9dc93d9-1d6f-49dc-8c7f-1b3150f440e6sq ~ t sweet8t apple8q ~ Ht $e9f5d233-cef4-431b-ae67-dbeb6ef56affsq ~ t bad desc requested2t another requested2q ~ Lt $b8faa0f3-7d81-4356-9eae-55b980055a99sq ~ t sweet3t apple3q ~ Pt $067479fc-da53-4229-a94b-89ab0362ee53sq ~ t disgusting3t banananana3q ~ Tt $8af73fe6-8442-4434-ba62-3e885be413e5sq ~ t requested desc4t 
+requested4q ~ Xt $e6ddb93c-8d4b-4b35-8bc3-14f0b2e89053sq ~ t sweet9t apple9q ~ \t $a33a1337-a1c1-4e2a-8a43-18ac99410bebsq ~ t 
+from oceania4t kiwi4q ~ `t $8cab76a6-c048-4094-be7e-f1e775d7042fsq ~ t sweet2t apple2q ~ dt $01bb42ce-c402-4457-a6b4-4cc9e01cd88csq ~ t requested desc7t 
+requested7q ~ ht $d8d63844-b4fd-4211-97fa-5c4d5b58d19csq ~ t bad desc requested1t another requested1q ~ lt $f6793669-ce39-437b-9018-8f3dd3bd5a5fsq ~ t bad desc requested8t another requested8q ~ pt $34235b37-508a-40b1-9c72-c241b491db2esq ~ t bad desc requested9t another requested9q ~ tt $ceb955e7-146d-4358-84ac-df6f11a10d23sq ~ t sweet0t apple0q ~ xt $abf583f1-85d3-4633-b18f-26e09542e4d4sq ~ t bad desc requested6t another requested6q ~ |t $1745f494-bcd3-4789-a92c-60a3604ddb46sq ~ t requested desc0t 
+requested0q ~ �t $34d707d1-8296-4f9e-9c4b-2607f0051721sq ~ t 
+from oceania3t kiwi3q ~ �t $151407bd-6461-48a9-950d-12be48437f49sq ~ t disgusting4t banananana4q ~ �t $42314c8a-28ad-476c-8837-babd278e5a0csq ~ t 
+from oceania0t kiwi0q ~ �t $af9c302a-ed4f-4243-955e-661242daca8dsq ~ t disgusting1t banananana1q ~ �t $6d6aa784-92ca-4b47-9f75-cf10f56c8be8sq ~ t bad desc requested5t another requested5q ~ �t $63a8847a-f0bf-4d52-aa85-d51973652dc9sq ~ t disgusting7t banananana7q ~ �t $e8e267e3-2582-4000-88c8-e8fbc840a226sq ~ t requested desc1t 
+requested1q ~ �t $b7e663fb-64ef-4a89-b3cf-16c6d3e6b4fbsq ~ t disgusting5t banananana5q ~ �t $af001af9-c4e2-44c8-8209-810d61e6c039sq ~ t sweet5t apple5q ~ �t $a6fcd81c-1924-4950-9fea-3d3b4ad7fa36sq ~ t 
+from oceania6t kiwi6q ~ �t $8f75d5c6-60a0-4b9e-8f55-5a0fb2f737a8sq ~ t 
+from oceania8t kiwi8q ~ �t $8309607f-06c5-4f39-b221-c0cfbe506246sq ~ t requested desc5t 
+requested5q ~ �t $9aadbd44-9cb5-4ca7-a8c1-55c14abf5ed9sq ~ t requested desc8t 
+requested8q ~ �t $b7513a67-4e99-4649-b4a6-0fc91686e788sq ~ t disgusting9t banananana9q ~ �t $6ec13421-5f34-4b7b-b23c-29a64d23824dsq ~ t requested desc3t 
+requested3q ~ �t $7fda2f39-35f1-49db-991a-b91d1f3e3fcdsq ~ t bad desc requested7t another requested7q ~ �t $beb9251d-2a84-4883-ba41-6361b49d9f66sq ~ t disgusting8t banananana8q ~ �t $b20d1e9e-6c0a-4cd8-8544-4696f3885150sq ~ t 
+from oceania7t kiwi7q ~ �x
\ No newline at end of file
Index: src/backend/databasefiles/trades.ser
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>��\u0000\u0005sr\u0000\u0011java.util.HashMap\u0005\u0007���\u0016`�\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0018w\b\u0000\u0000\u0000 \u0000\u0000\u0000\ft\u0000$7ab9a125-416d-46dc-b49d-87b72cb67edbsr\u0000\u0014backend.models.Trade�b�̃�\u001F�\u0002\u0000\u0011I\u0000\u0015MAX_ALLOWED_NUM_EDITSZ\u0000\u001ChasFirstUserConfirmedRequestZ\u0000\u001DhasSecondUserConfirmedRequestZ\u0000\u0015isFirstUserConfirmed1Z\u0000\u0015isFirstUserConfirmed2Z\u0000\u0016isSecondUserConfirmed1Z\u0000\u0016isSecondUserConfirmed2I\u0000\bnumEditsL\u0000\rFIRST_USER_IDt\u0000\u0012Ljava/lang/String;L\u0000\u000ESECOND_USER_IDq\u0000~\u0000\u0004L\u0000\u000EfirstUserOfferq\u0000~\u0000\u0004L\u0000\u000FmeetingLocationq\u0000~\u0000\u0004L\u0000\u000BmeetingTimet\u0000\u0010Ljava/util/Date;L\u0000\u0007messageq\u0000~\u0000\u0004L\u0000\u0011secondMeetingTimeq\u0000~\u0000\u0005L\u0000\u000FsecondUserOfferq\u0000~\u0000\u0004L\u0000\u000EuserTurnToEditq\u0000~\u0000\u0004xr\u0000\u001Bbackend.models.DatabaseIteml��\u0017@�l�\u0002\u0000\u0001L\u0000\u0006thisIdq\u0000~\u0000\u0004xpt\u0000$7ab9a125-416d-46dc-b49d-87b72cb67edb\u0000\u0000\u0000\u0006\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000t\u0000$7d5f3ba4-0dbe-4402-847c-f49111a2d5a7t\u0000$c2390df7-bd42-4883-9b00-068b85b85fcbt\u0000$7e0b7b52-d57f-4f1d-a375-4d9fed622f72t\u0000\u000E123 bay streetsr\u0000\u000Ejava.util.Datehj�\u0001KYt\u0019\u0003\u0000\u0000xpw\b\u0000\u0000\u0001s���\fxt\u0000\u0014give me your apple 4sq\u0000~\u0000\rw\b\u0000\u0000\u0001t\u0006y�\fxt\u0000$38eaba5e-2696-4b23-b46f-07274ecca402q\u0000~\u0000\nt\u0000$4dee2d71-8ddf-4eb2-964d-5a184bfb9ae3sq\u0000~\u0000\u0003t\u0000$4dee2d71-8ddf-4eb2-964d-5a184bfb9ae3\u0000\u0000\u0000\u0006\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000t\u0000$1e263628-3606-41b9-a833-217f0bc1767bt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bt\u0000$6bb02c69-dfbf-437f-9369-a9f456355d56t\u0000\u000E123 bay streetsq\u0000~\u0000\rw\b\u0000\u0000\u0001s���\fxt\u0000\u0014give me your apple 3sq\u0000~\u0000\rw\b\u0000\u0000\u0001t\u0006y�\fxt\u0000$7da34d81-15df-4763-a5e8-783472285b06q\u0000~\u0000\u0016t\u0000$23d5551d-095e-4b08-a890-d426541db05esq\u0000~\u0000\u0003t\u0000$23d5551d-095e-4b08-a890-d426541db05e\u0000\u0000\u0000\u0006\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000t\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbft\u0000$942c21bd-4943-45b7-b112-f3a71bbf91bat\u0000$e9efb654-f25a-4e43-9518-ddfaa5fd9404t\u0000\u000E123 bay streetsq\u0000~\u0000\rw\b\u0000\u0000\u0001s���\fxt\u0000\u0014give me your apple 1sq\u0000~\u0000\rw\b\u0000\u0000\u0001t\u0006y�\fxt\u0000$cb26903e-a35a-4ea2-9e6a-3d60a6e465bcq\u0000~\u0000!t\u0000$6833930a-4ac3-46ca-97a2-6bcd91492f36sq\u0000~\u0000\u0003t\u0000$6833930a-4ac3-46ca-97a2-6bcd91492f36\u0000\u0000\u0000\u0006\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000t\u0000$0cf5b831-5634-408c-ac88-247532a3bc28t\u0000$4e03863b-4808-4283-aa00-505703d24ca9t\u0000$af6a9b22-aa05-45e4-ab09-1de9ca66b6b6t\u0000\u000E123 bay streetsq\u0000~\u0000\rw\b\u0000\u0000\u0001s���\fxt\u0000\u0014give me your apple 2sq\u0000~\u0000\rw\b\u0000\u0000\u0001t\u0006y�\fxt\u0000$e8e72e67-9695-4e19-92a4-6b5363fa970fq\u0000~\u0000,t\u0000$0058df0c-1296-43d6-8938-b7a1b20509a1sq\u0000~\u0000\u0003t\u0000$0058df0c-1296-43d6-8938-b7a1b20509a1\u0000\u0000\u0000\u0006\u0001\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000t\u0000$1e263628-3606-41b9-a833-217f0bc1767bt\u0000$c2390df7-bd42-4883-9b00-068b85b85fcbt\u0000$b5e76eee-6f6a-4dac-92a3-9d841bd1934bt\u0000\u0004asdfsq\u0000~\u0000\rw\b\u0000\u0000\u0001v\u001C��xt\u0000\u0004adsfpt\u0000$dfef169e-682c-4456-90f4-587bc600817dq\u0000~\u00007t\u0000$9914c91d-58a5-4bc6-a57c-1469892e8207sq\u0000~\u0000\u0003t\u0000$9914c91d-58a5-4bc6-a57c-1469892e8207\u0000\u0000\u0000\u0006\u0001\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000t\u0000$c2390df7-bd42-4883-9b00-068b85b85fcbt\u0000$7d5f3ba4-0dbe-4402-847c-f49111a2d5a7t\u0000$b5e76eee-6f6a-4dac-92a3-9d841bd1934bt\u0000\u0004asdfsq\u0000~\u0000\rw\b\u0000\u0000\u0001u��>\u0000xt\u0000\u0000pt\u0000$74aa3b7c-b3ba-4f41-b0d1-b5d0f9cda3d7q\u0000~\u0000At\u0000$583c263a-7f86-489f-9b88-82bb9dd896besq\u0000~\u0000\u0003q\u0000~\u0000G\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbft\u0000$942c21bd-4943-45b7-b112-f3a71bbf91bat\u0000$28a9dd0d-88ef-45f2-9bc4-a7337bacd86dt\u0000\u000E123 bay streetsq\u0000~\u0000\rw\b\u0000\u0000\u0001s���\fxt\u0000\u0014I give you my kiwi 1sq\u0000~\u0000\rw\b\u0000\u0000\u0001t\u0006y�\fxt\u0000$33a77131-7b33-44ba-b22b-a91c0c4a0fb4q\u0000~\u0000Jt\u0000$b47a6707-5105-4967-b3b4-0f31560ef89dsq\u0000~\u0000\u0003q\u0000~\u0000Q\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000$0cf5b831-5634-408c-ac88-247532a3bc28t\u0000$4e03863b-4808-4283-aa00-505703d24ca9t\u0000$64d290c5-388f-4052-bf71-41dacff6c98bt\u0000\u000E123 bay streetsq\u0000~\u0000\rw\b\u0000\u0000\u0001s���\fxt\u0000\u0015give me your banana 2pt\u0000$1c788017-1134-4ed7-88c2-045a8bdaebc4q\u0000~\u0000Tt\u0000$c577a889-8d68-4be9-967a-9c16e42f2a26sq\u0000~\u0000\u0003q\u0000~\u0000Z\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000$1e263628-3606-41b9-a833-217f0bc1767bt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bt\u0000$f017123d-897f-48c3-a4e0-f85d349309act\u0000\u000E123 bay streetsq\u0000~\u0000\rw\b\u0000\u0000\u0001s���\fxt\u0000\u0015give me your banana 3pt\u0000$5ceceb29-930c-4415-82a4-94fef43b44c3q\u0000~\u0000]t\u0000$cda6fd1a-cb52-449b-989c-ada71eb8fd72sq\u0000~\u0000\u0003q\u0000~\u0000c\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000$0cf5b831-5634-408c-ac88-247532a3bc28t\u0000$4e03863b-4808-4283-aa00-505703d24ca9t\u0000$164e10d8-aa24-4382-828f-5108c9b3ffd7t\u0000\u000E123 bay streetsq\u0000~\u0000\rw\b\u0000\u0000\u0001s���\fxt\u0000\u0014I give you my kiwi 2sq\u0000~\u0000\rw\b\u0000\u0000\u0001t\u0006y�\fxt\u0000$d46c9cfc-8c41-4cec-b6e6-b277fba61562q\u0000~\u0000ft\u0000$3806d3c7-5c40-43d3-8f5c-df4b253e6189sq\u0000~\u0000\u0003q\u0000~\u0000m\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbft\u0000$942c21bd-4943-45b7-b112-f3a71bbf91bat\u0000$c550ebc0-97c5-45a9-a6a9-2e01905bcbcet\u0000\u000E123 bay streetsq\u0000~\u0000\rw\b\u0000\u0000\u0001s���\fxt\u0000\u0015give me your banana 1pt\u0000$80f298a8-b7ef-41e2-8551-7bef47f8bb63q\u0000~\u0000pt\u0000$cb3ade9a-866e-4961-8c20-c2a1e9698476sq\u0000~\u0000\u0003t\u0000$cb3ade9a-866e-4961-8c20-c2a1e9698476\u0000\u0000\u0000\u0006\u0001\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000t\u0000$7d5f3ba4-0dbe-4402-847c-f49111a2d5a7t\u0000$c2390df7-bd42-4883-9b00-068b85b85fcbt\u0000$10444217-00ef-4c48-b21d-9d3cba77e71ft\u0000\u000E123 bay streetsq\u0000~\u0000\rw\b\u0000\u0000\u0001s���\fxt\u0000\u0015give me your banana 4pt\u0000$588727fc-a5f9-4f2b-b070-62734872050eq\u0000~\u0000zx
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/backend/databasefiles/trades.ser	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ src/backend/databasefiles/trades.ser	(date 1596844046160)
@@ -1,21 +1,3 @@
 �� sr java.util.HashMap���`� F 
-loadFactorI 	thresholdxp?@     w       t $7ab9a125-416d-46dc-b49d-87b72cb67edbsr backend.models.Trade�b�̃�� I MAX_ALLOWED_NUM_EDITSZ hasFirstUserConfirmedRequestZ hasSecondUserConfirmedRequestZ isFirstUserConfirmed1Z isFirstUserConfirmed2Z isSecondUserConfirmed1Z isSecondUserConfirmed2I numEditsL 
-FIRST_USER_IDt Ljava/lang/String;L SECOND_USER_IDq ~ L firstUserOfferq ~ L meetingLocationq ~ L meetingTimet Ljava/util/Date;L messageq ~ L secondMeetingTimeq ~ L secondUserOfferq ~ L userTurnToEditq ~ xr backend.models.DatabaseIteml��@�l� L thisIdq ~ xpt $7ab9a125-416d-46dc-b49d-87b72cb67edb        t $7d5f3ba4-0dbe-4402-847c-f49111a2d5a7t $c2390df7-bd42-4883-9b00-068b85b85fcbt $7e0b7b52-d57f-4f1d-a375-4d9fed622f72t 123 bay streetsr java.util.Datehj�KYt  xpw  s���xt give me your apple 4sq ~ 
-w  ty�xt $38eaba5e-2696-4b23-b46f-07274ecca402q ~ 
-t $4dee2d71-8ddf-4eb2-964d-5a184bfb9ae3sq ~ t $4dee2d71-8ddf-4eb2-964d-5a184bfb9ae3        t $1e263628-3606-41b9-a833-217f0bc1767bt $6db9d5af-251b-4f1d-95a5-35bd23ad267bt $6bb02c69-dfbf-437f-9369-a9f456355d56t 123 bay streetsq ~ 
-w  s���xt give me your apple 3sq ~ 
-w  ty�xt $7da34d81-15df-4763-a5e8-783472285b06q ~ t $23d5551d-095e-4b08-a890-d426541db05esq ~ t $23d5551d-095e-4b08-a890-d426541db05e        t $9cbfed05-17c4-4cfc-96e9-eeec6e239cbft $942c21bd-4943-45b7-b112-f3a71bbf91bat $e9efb654-f25a-4e43-9518-ddfaa5fd9404t 123 bay streetsq ~ 
-w  s���xt give me your apple 1sq ~ 
-w  ty�xt $cb26903e-a35a-4ea2-9e6a-3d60a6e465bcq ~ !t $6833930a-4ac3-46ca-97a2-6bcd91492f36sq ~ t $6833930a-4ac3-46ca-97a2-6bcd91492f36        t $0cf5b831-5634-408c-ac88-247532a3bc28t $4e03863b-4808-4283-aa00-505703d24ca9t $af6a9b22-aa05-45e4-ab09-1de9ca66b6b6t 123 bay streetsq ~ 
-w  s���xt give me your apple 2sq ~ 
-w  ty�xt $e8e72e67-9695-4e19-92a4-6b5363fa970fq ~ ,t $0058df0c-1296-43d6-8938-b7a1b20509a1sq ~ t $0058df0c-1296-43d6-8938-b7a1b20509a1          t $1e263628-3606-41b9-a833-217f0bc1767bt $c2390df7-bd42-4883-9b00-068b85b85fcbt $b5e76eee-6f6a-4dac-92a3-9d841bd1934bt asdfsq ~ 
-w  v��xt adsfpt $dfef169e-682c-4456-90f4-587bc600817dq ~ 7t $9914c91d-58a5-4bc6-a57c-1469892e8207sq ~ t $9914c91d-58a5-4bc6-a57c-1469892e8207          t $c2390df7-bd42-4883-9b00-068b85b85fcbt $7d5f3ba4-0dbe-4402-847c-f49111a2d5a7t $b5e76eee-6f6a-4dac-92a3-9d841bd1934bt asdfsq ~ 
-w  u��> xt  pt $74aa3b7c-b3ba-4f41-b0d1-b5d0f9cda3d7q ~ At $583c263a-7f86-489f-9b88-82bb9dd896besq ~ q ~ G            t $9cbfed05-17c4-4cfc-96e9-eeec6e239cbft $942c21bd-4943-45b7-b112-f3a71bbf91bat $28a9dd0d-88ef-45f2-9bc4-a7337bacd86dt 123 bay streetsq ~ 
-w  s���xt I give you my kiwi 1sq ~ 
-w  ty�xt $33a77131-7b33-44ba-b22b-a91c0c4a0fb4q ~ Jt $b47a6707-5105-4967-b3b4-0f31560ef89dsq ~ q ~ Q            t $0cf5b831-5634-408c-ac88-247532a3bc28t $4e03863b-4808-4283-aa00-505703d24ca9t $64d290c5-388f-4052-bf71-41dacff6c98bt 123 bay streetsq ~ 
-w  s���xt give me your banana 2pt $1c788017-1134-4ed7-88c2-045a8bdaebc4q ~ Tt $c577a889-8d68-4be9-967a-9c16e42f2a26sq ~ q ~ Z            t $1e263628-3606-41b9-a833-217f0bc1767bt $6db9d5af-251b-4f1d-95a5-35bd23ad267bt $f017123d-897f-48c3-a4e0-f85d349309act 123 bay streetsq ~ 
-w  s���xt give me your banana 3pt $5ceceb29-930c-4415-82a4-94fef43b44c3q ~ ]t $cda6fd1a-cb52-449b-989c-ada71eb8fd72sq ~ q ~ c            t $0cf5b831-5634-408c-ac88-247532a3bc28t $4e03863b-4808-4283-aa00-505703d24ca9t $164e10d8-aa24-4382-828f-5108c9b3ffd7t 123 bay streetsq ~ 
-w  s���xt I give you my kiwi 2sq ~ 
-w  ty�xt $d46c9cfc-8c41-4cec-b6e6-b277fba61562q ~ ft $3806d3c7-5c40-43d3-8f5c-df4b253e6189sq ~ q ~ m            t $9cbfed05-17c4-4cfc-96e9-eeec6e239cbft $942c21bd-4943-45b7-b112-f3a71bbf91bat $c550ebc0-97c5-45a9-a6a9-2e01905bcbcet 123 bay streetsq ~ 
-w  s���xt give me your banana 1pt $80f298a8-b7ef-41e2-8551-7bef47f8bb63q ~ pt $cb3ade9a-866e-4961-8c20-c2a1e9698476sq ~ t $cb3ade9a-866e-4961-8c20-c2a1e9698476          t $7d5f3ba4-0dbe-4402-847c-f49111a2d5a7t $c2390df7-bd42-4883-9b00-068b85b85fcbt $10444217-00ef-4c48-b21d-9d3cba77e71ft 123 bay streetsq ~ 
-w  s���xt give me your banana 4pt $588727fc-a5f9-4f2b-b070-62734872050eq ~ zx
\ No newline at end of file
+loadFactorI 	thresholdxp?@     w       t $fed3cd55-678d-4d6d-8499-460ab17a130dsr backend.models.Trade�@�P�Ó� I MAX_ALLOWED_NUM_EDITSZ hasFirstUserConfirmedRequestZ hasSecondUserConfirmedRequestZ isFirstUserConfirmed1Z isFirstUserConfirmed2Z isSecondUserConfirmed1Z isSecondUserConfirmed2I numEditsL 
+FIRST_USER_IDt Ljava/lang/String;L SECOND_USER_IDq ~ L firstUserOfferq ~ L idq ~ L meetingLocationq ~ L meetingTimet Ljava/util/Date;L messageq ~ L secondMeetingTimeq ~ L secondUserOfferq ~ L userTurnToEditq ~ xp            t $49dab303-042e-459e-91d0-62ecf1dbebfft $52eb2e62-8f6f-42e7-84a0-76e02b130a4at $94e80164-1ad6-477f-a58a-a1e528063621q ~ t 123 bay streetsr java.util.Datehj�KYt  xpw  s�HW�xt give me your banana 2pt $63a8847a-f0bf-4d52-aa85-d51973652dc9q ~ t $f83487d2-587a-4597-ab32-9e93ea549a7asq ~             t $ed1e9e8e-c246-4e91-88a6-120763eecdd7t $3edac04b-a627-4231-925e-02c47ed49108t $151407bd-6461-48a9-950d-12be48437f49q ~ t 123 bay streetsq ~ w  s�HW�xt give me your banana 4pt $b7e663fb-64ef-4a89-b3cf-16c6d3e6b4fbq ~ t $787efc1b-9eb1-4bde-aa6f-462e5a7ea79esq ~             t $78121ab9-a64a-45ea-aeb3-02d9500fe8c8t $d4f521f2-2a47-4f73-a525-74ecb27ab82ft $6807f8e5-bf7a-4c93-bd4a-0a4c80cebec6q ~ t 123 bay streetsq ~ w  s�HW�xt I give you my kiwi 1sq ~ w  t�@�xt $8f75d5c6-60a0-4b9e-8f55-5a0fb2f737a8q ~ t $b6d83c15-0514-4caa-aa9c-2822135ed4besq ~             t $78121ab9-a64a-45ea-aeb3-02d9500fe8c8t $d4f521f2-2a47-4f73-a525-74ecb27ab82ft $af9c302a-ed4f-4243-955e-661242daca8dq ~ "t 123 bay streetsq ~ w  s�HW�xt give me your banana 1pt $beb9251d-2a84-4883-ba41-6361b49d9f66q ~ %t $0ac1ede1-4d65-4649-a0f5-df2ca8ff8677sq ~             t $49dab303-042e-459e-91d0-62ecf1dbebfft $52eb2e62-8f6f-42e7-84a0-76e02b130a4at $75c7f083-cf65-4374-9af7-01dc00243256q ~ +t 123 bay streetsq ~ w  s�HW�xt I give you my kiwi 2sq ~ w  t�@�xt $b20d1e9e-6c0a-4cd8-8544-4696f3885150q ~ .t $11adfeed-1ea6-4586-bf34-c7d17bd57e42sq ~             t $847548b3-cf08-4f14-aa47-888efb09e148t $86bf0312-06b5-4c49-95d3-9a692696ebcct $067479fc-da53-4229-a94b-89ab0362ee53q ~ 5t 123 bay streetsq ~ w  s�HW�xt give me your banana 3pt $7545a826-5f3c-427d-84e8-c91d455b5fa8q ~ 8t $caebfe9e-1d3e-45ab-abdb-3941c494bfe0sq ~             t $ed1e9e8e-c246-4e91-88a6-120763eecdd7t $3edac04b-a627-4231-925e-02c47ed49108t $a33a1337-a1c1-4e2a-8a43-18ac99410bebq ~ >t 123 bay streetsq ~ w  s�HW�xt I give you my kiwi 4sq ~ w  t�@�xt $63ed2129-740d-455d-87e3-0f5ea8e04a74q ~ At $706b4d0f-1071-4561-9bde-86e3f800de09sq ~             t $847548b3-cf08-4f14-aa47-888efb09e148t $86bf0312-06b5-4c49-95d3-9a692696ebcct $34d707d1-8296-4f9e-9c4b-2607f0051721q ~ Ht 123 bay streetsq ~ w  s�HW�xt I give you my kiwi 3sq ~ w  t�@�xt $a6fcd81c-1924-4950-9fea-3d3b4ad7fa36q ~ Kt $9f3ab2e8-7bf0-4c90-9326-768b121260casq ~         t $ed1e9e8e-c246-4e91-88a6-120763eecdd7t $3edac04b-a627-4231-925e-02c47ed49108t $b8cad713-37e6-47d5-9e5a-43946f953f3et $9f3ab2e8-7bf0-4c90-9326-768b121260cat 123 bay streetsq ~ w  s�HW�xt give me your apple 4sq ~ w  t�@�xt $af001af9-c4e2-44c8-8209-810d61e6c039q ~ Ut $fac82a84-fefb-49c5-a402-59fafc72c968sq ~         t $847548b3-cf08-4f14-aa47-888efb09e148t $86bf0312-06b5-4c49-95d3-9a692696ebcct $b8faa0f3-7d81-4356-9eae-55b980055a99t $fac82a84-fefb-49c5-a402-59fafc72c968t 123 bay streetsq ~ w  s�HW�xt give me your apple 3sq ~ w  t�@�xt $45d064b3-e138-4a54-b0fa-d11fd5aa29bdq ~ `t $8eb62100-8f71-42ce-8d85-2f28eca8b302sq ~         t $78121ab9-a64a-45ea-aeb3-02d9500fe8c8t $d4f521f2-2a47-4f73-a525-74ecb27ab82ft $e7dc6ebb-4ffe-4632-80eb-7de31eb14df3t $8eb62100-8f71-42ce-8d85-2f28eca8b302t 123 bay streetsq ~ w  s�HW�xt give me your apple 1sq ~ w  t�@�xt $a9dc93d9-1d6f-49dc-8c7f-1b3150f440e6q ~ kt $8b9b7f80-0af5-40a6-ae1d-6292e159b5a7sq ~         t $49dab303-042e-459e-91d0-62ecf1dbebfft $52eb2e62-8f6f-42e7-84a0-76e02b130a4at $8cab76a6-c048-4094-be7e-f1e775d7042ft $8b9b7f80-0af5-40a6-ae1d-6292e159b5a7t 123 bay streetsq ~ w  s�HW�xt give me your apple 2sq ~ w  t�@�xt $0dcdf643-af58-4d14-beb6-47c7a3b84132q ~ vx
\ No newline at end of file
Index: src/backend/databasefiles/users.ser
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>��\u0000\u0005sr\u0000\u0011java.util.HashMap\u0005\u0007���\u0016`�\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0018w\b\u0000\u0000\u0000 \u0000\u0000\u0000\u000Ft\u0000$ff51c1e6-ce89-400d-bc0b-ccbf3a4d9560sr\u0000\u001Bbackend.models.users.Trader+��!?,Uc\u0002\u0000\u0011I\u0000\u0012incompleteTradeLimZ\u0000\u0006isIdleI\u0000\u001BminimumAmountNeededToBorrowI\u0000\u0014totalAcceptedBorrowsI\u0000\u0012totalItemsBorrowedI\u0000\u000EtotalItemsLentI\u0000\ntradeCountI\u0000\ntradeLimitL\u0000\u000EacceptedTradest\u0000\u0010Ljava/util/List;L\u0000\u000EavailableItemsq\u0000~\u0000\u0004L\u0000\u0004cityt\u0000\u0012Ljava/lang/String;L\u0000\u000FcompletedTradesq\u0000~\u0000\u0004L\u0000\fongoingItemsq\u0000~\u0000\u0004L\u0000\u000ErequestedItemsq\u0000~\u0000\u0004L\u0000\u000FrequestedTradesq\u0000~\u0000\u0004L\u0000\u0007reviewsq\u0000~\u0000\u0004L\u0000\bwishListq\u0000~\u0000\u0004xr\u0000\u0019backend.models.users.User�W'8�\u0014J\u0018\u0002\u0000\u0005Z\u0000\bisFrozenZ\u0000\u0013isUnfrozenRequestedL\u0000\bmessagest\u0000\u0013Ljava/util/HashMap;L\u0000\bpasswordq\u0000~\u0000\u0005L\u0000\busernameq\u0000~\u0000\u0005xr\u0000\u001Bbackend.models.DatabaseIteml��\u0017@�l�\u0002\u0000\u0001L\u0000\u0006thisIdq\u0000~\u0000\u0005xpt\u0000$ff51c1e6-ce89-400d-bc0b-ccbf3a4d9560\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0007trader0\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nsr\u0000\u0013java.util.ArrayListx��\u001D��a�\u0003\u0000\u0001I\u0000\u0004sizexp\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0003w\u0004\u0000\u0000\u0000\u0003t\u0000$6d14cb84-2065-4a6e-b8de-ddf9a49f077ct\u0000$8d29bb7f-3577-4a43-a125-5af91a69d55ct\u0000$bd52a575-aceb-4273-8eb4-6656f9eacd33xt\u0000\u0007Torontosq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$15996fe2-a3d7-43b7-b0df-18c5d4631fb3t\u0000$d49f6773-397f-467a-95b6-92896b31fdb1xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$c6c7c751-328b-48ef-bbc9-c07e7b4070a7xt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bsq\u0000~\u0000\u0003t\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267b\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0007trader6\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\nsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$c577a889-8d68-4be9-967a-9c16e42f2a26xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$4a9b50f1-13e5-4f71-aed9-3bf6100a1500t\u0000$7da34d81-15df-4763-a5e8-783472285b06xt\u0000\u0006dallassq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$4dee2d71-8ddf-4eb2-964d-5a184bfb9ae3xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$5ceceb29-930c-4415-82a4-94fef43b44c3xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$42194013-672e-4f29-a38f-d99e30c2583dt\u0000$2e5ec299-57bc-41d7-a91a-93842fca46c2xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$dfef169e-682c-4456-90f4-587bc600817dxt\u0000$942c21bd-4943-45b7-b112-f3a71bbf91basq\u0000~\u0000\u0003t\u0000$942c21bd-4943-45b7-b112-f3a71bbf91ba\u0001\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0007trader8\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\nsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$3806d3c7-5c40-43d3-8f5c-df4b253e6189xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$33a77131-7b33-44ba-b22b-a91c0c4a0fb4t\u0000$cb26903e-a35a-4ea2-9e6a-3d60a6e465bcxt\u0000\u0007Torontosq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$23d5551d-095e-4b08-a890-d426541db05exsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$80f298a8-b7ef-41e2-8551-7bef47f8bb63xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$cc5ff068-f47f-4e19-8d33-7160bbbc9073t\u0000$565d5480-5c5f-4ed0-9300-0f35739e4558xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$583c263a-7f86-489f-9b88-82bb9dd896bexsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$d46c9cfc-8c41-4cec-b6e6-b277fba61562xt\u0000$c6e13b6a-d097-4e6a-8ad9-8f06bf2100aasr\u0000\u001Abackend.models.users.Admin���m�{Ǻ\u0002\u0000\u0001L\u0000\u0007reportsq\u0000~\u0000\u0004xq\u0000~\u0000\u0006t\u0000$c6e13b6a-d097-4e6a-8ad9-8f06bf2100aa\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0006admin1sq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002sr\u0000\u0015backend.models.Report)��6Fv�J\u0002\u0000\u0003L\u0000\fFROM_USER_IDq\u0000~\u0000\u0005L\u0000\u0007MESSAGEq\u0000~\u0000\u0005L\u0000\u0011REPORT_ON_USER_IDq\u0000~\u0000\u0005xq\u0000~\u0000\bt\u0000$24c6cfc8-c49e-4631-b2b9-a4d86eea1554t\u0000$1e263628-3606-41b9-a833-217f0bc1767bt\u0000AThis user drove off with my lambo and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bsq\u0000~\u0000Ut\u0000$bba5a788-4208-473f-9653-6db5405e105bt\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbft\u0000FThis user flew away with my helicopter and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bxt\u0000$c2390df7-bd42-4883-9b00-068b85b85fcbsq\u0000~\u0000\u0003t\u0000$c2390df7-bd42-4883-9b00-068b85b85fcb\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0007trader5\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\nsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0003w\u0004\u0000\u0000\u0000\u0003t\u0000$38eaba5e-2696-4b23-b46f-07274ecca402t\u0000$74aa3b7c-b3ba-4f41-b0d1-b5d0f9cda3d7t\u0000$10444217-00ef-4c48-b21d-9d3cba77e71fxt\u0000\bnew yorksq\u0000~\u0000\u000E\u0000\u0000\u0000\u0004w\u0004\u0000\u0000\u0000\u0004t\u0000$7ab9a125-416d-46dc-b49d-87b72cb67edbt\u0000$0058df0c-1296-43d6-8938-b7a1b20509a1t\u0000$9914c91d-58a5-4bc6-a57c-1469892e8207t\u0000$cb3ade9a-866e-4961-8c20-c2a1e9698476xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$73c6e870-6eda-4615-8a77-2f9759240625t\u0000$0b6f9474-3cbb-4c9a-b1e9-81452c0a1006xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xt\u0000$831cd1ea-bcca-4e75-a912-12a7a7146616sq\u0000~\u0000Nt\u0000$831cd1ea-bcca-4e75-a912-12a7a7146616\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0006admin3sq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002sq\u0000~\u0000Ut\u0000$24c6cfc8-c49e-4631-b2b9-a4d86eea1554t\u0000$1e263628-3606-41b9-a833-217f0bc1767bt\u0000AThis user drove off with my lambo and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bsq\u0000~\u0000Ut\u0000$bba5a788-4208-473f-9653-6db5405e105bt\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbft\u0000FThis user flew away with my helicopter and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bxt\u0000$1e263628-3606-41b9-a833-217f0bc1767bsq\u0000~\u0000\u0003t\u0000$1e263628-3606-41b9-a833-217f0bc1767b\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0007trader3\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\nsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$c577a889-8d68-4be9-967a-9c16e42f2a26xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$6bb02c69-dfbf-437f-9369-a9f456355d56t\u0000$dfef169e-682c-4456-90f4-587bc600817dxt\u0000\bnew yorksq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$4dee2d71-8ddf-4eb2-964d-5a184bfb9ae3t\u0000$0058df0c-1296-43d6-8938-b7a1b20509a1xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$f017123d-897f-48c3-a4e0-f85d349309acxsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$8617609e-d9c4-4961-a705-e00b18ad4467t\u0000$dcf7fb06-84eb-4482-94e2-836db8b5dc5cxsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002sr\u0000\u0015backend.models.Review���7���Z\u0002\u0000\u0001D\u0000\u0006RATINGxq\u0000~\u0000Ut\u0000$763300db-ab8f-4483-9cde-b30d348c26d2t\u0000$ff51c1e6-ce89-400d-bc0b-ccbf3a4d9560t\u0000\u0011This guy was rudet\u0000$1e263628-3606-41b9-a833-217f0bc1767b@\u0015333333sq\u0000~\u0000�t\u0000$437f56e1-83db-4ea2-a434-579a4df5be5ct\u0000$0cf5b831-5634-408c-ac88-247532a3bc28t\u0000\u0014This guy attacked met\u0000$1e263628-3606-41b9-a833-217f0bc1767b@\u0002ffffffxsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$164e10d8-aa24-4382-828f-5108c9b3ffd7xt\u0000$52edfb3c-1702-47c1-af8a-8f32d9fbcbd4sq\u0000~\u0000Nt\u0000$52edfb3c-1702-47c1-af8a-8f32d9fbcbd4\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0006admin0sq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002sq\u0000~\u0000Ut\u0000$24c6cfc8-c49e-4631-b2b9-a4d86eea1554t\u0000$1e263628-3606-41b9-a833-217f0bc1767bt\u0000AThis user drove off with my lambo and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bsq\u0000~\u0000Ut\u0000$bba5a788-4208-473f-9653-6db5405e105bt\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbft\u0000FThis user flew away with my helicopter and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bxt\u0000$0cf5b831-5634-408c-ac88-247532a3bc28sq\u0000~\u0000\u0003t\u0000$0cf5b831-5634-408c-ac88-247532a3bc28\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0007trader2\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\nsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$b47a6707-5105-4967-b3b4-0f31560ef89dxsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$164e10d8-aa24-4382-828f-5108c9b3ffd7t\u0000$af6a9b22-aa05-45e4-ab09-1de9ca66b6b6xt\u0000\u0007Torontosq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$6833930a-4ac3-46ca-97a2-6bcd91492f36xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$64d290c5-388f-4052-bf71-41dacff6c98bxsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$e565f347-829a-4d68-a078-c0e717683f0ft\u0000$8e79b787-87ae-426a-a582-0e2e9539d254xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$cda6fd1a-cb52-449b-989c-ada71eb8fd72xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$28a9dd0d-88ef-45f2-9bc4-a7337bacd86dxt\u0000$aed84703-a286-4c74-a3af-1e173e0b81c4sq\u0000~\u0000Nt\u0000$aed84703-a286-4c74-a3af-1e173e0b81c4\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0006admin2sq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002sq\u0000~\u0000Ut\u0000$24c6cfc8-c49e-4631-b2b9-a4d86eea1554t\u0000$1e263628-3606-41b9-a833-217f0bc1767bt\u0000AThis user drove off with my lambo and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bsq\u0000~\u0000Ut\u0000$bba5a788-4208-473f-9653-6db5405e105bt\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbft\u0000FThis user flew away with my helicopter and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bxt\u0000$18146f9f-37a6-46fe-a41e-b7ab2c42a947sq\u0000~\u0000Nt\u0000$18146f9f-37a6-46fe-a41e-b7ab2c42a947\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0006admin4sq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002sq\u0000~\u0000Ut\u0000$24c6cfc8-c49e-4631-b2b9-a4d86eea1554t\u0000$1e263628-3606-41b9-a833-217f0bc1767bt\u0000AThis user drove off with my lambo and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bsq\u0000~\u0000Ut\u0000$bba5a788-4208-473f-9653-6db5405e105bt\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbft\u0000FThis user flew away with my helicopter and never gave me what I wantedt\u0000$6db9d5af-251b-4f1d-95a5-35bd23ad267bxt\u0000$7d5f3ba4-0dbe-4402-847c-f49111a2d5a7sq\u0000~\u0000\u0003t\u0000$7d5f3ba4-0dbe-4402-847c-f49111a2d5a7\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0007trader4\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\nsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0003w\u0004\u0000\u0000\u0000\u0003t\u0000$7e0b7b52-d57f-4f1d-a375-4d9fed622f72t\u0000$b5e76eee-6f6a-4dac-92a3-9d841bd1934bt\u0000$588727fc-a5f9-4f2b-b070-62734872050ext\u0000\bnew yorksq\u0000~\u0000\u000E\u0000\u0000\u0000\u0003w\u0004\u0000\u0000\u0000\u0003t\u0000$7ab9a125-416d-46dc-b49d-87b72cb67edbt\u0000$9914c91d-58a5-4bc6-a57c-1469892e8207t\u0000$cb3ade9a-866e-4961-8c20-c2a1e9698476xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$bcbc89bf-9eeb-4536-938c-5b4fafed75c1t\u0000$65c8c395-6b5f-4c4f-903b-97eb2d8dc0a6xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001sq\u0000~\u0000�t\u0000$c6708c64-d53e-457a-8f25-46cf63df698ct\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbft\u0000\u001BThis guy gave me free moneyt\u0000$7d5f3ba4-0dbe-4402-847c-f49111a2d5a7@\"������xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xt\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbfsq\u0000~\u0000\u0003t\u0000$9cbfed05-17c4-4cfc-96e9-eeec6e239cbf\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\fw\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001t\u0000$ff51c1e6-ce89-400d-bc0b-ccbf3a4d9560sq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000/Can I buy your Ryerson hat for my pokemon cardsxxt\u0000\ruserPassword1t\u0000\u0007trader1\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\nsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$3806d3c7-5c40-43d3-8f5c-df4b253e6189xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$28a9dd0d-88ef-45f2-9bc4-a7337bacd86dt\u0000$e9efb654-f25a-4e43-9518-ddfaa5fd9404xt\u0000\u0007Torontosq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$23d5551d-095e-4b08-a890-d426541db05exsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$c550ebc0-97c5-45a9-a6a9-2e01905bcbcexsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$101673d0-d807-434f-a9f2-43903d5476c8t\u0000$d79b1f5d-9f98-4882-8ec3-cdde5dc89179xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$583c263a-7f86-489f-9b88-82bb9dd896bexsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$6d14cb84-2065-4a6e-b8de-ddf9a49f077cxt\u0000$06d20e33-1ee2-4cc5-997b-69bfbd83cad5sq\u0000~\u0000\u0003t\u0000$06d20e33-1ee2-4cc5-997b-69bfbd83cad5\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\u0000w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000xt\u0000\ruserPassword1t\u0000\u0007trader9\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0003w\u0004\u0000\u0000\u0000\u0003t\u0000$c6c7c751-328b-48ef-bbc9-c07e7b4070a7t\u0000$ba37475b-99d6-4da5-b7ec-0c36f81b232et\u0000$94b18850-6af7-4cc7-a599-eec168316875xt\u0000\u0007Torontosq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$b4c1e54f-ad13-4e0f-a43a-ba21e1b059b2t\u0000$7a712dbb-1b22-406a-aafa-51c8bddbfc13xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$33a77131-7b33-44ba-b22b-a91c0c4a0fb4xt\u0000$4e03863b-4808-4283-aa00-505703d24ca9sq\u0000~\u0000\u0003t\u0000$4e03863b-4808-4283-aa00-505703d24ca9\u0000\u0000sq\u0000~\u0000\u0000?@\u0000\u0000\u0000\u0000\u0000\fw\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002t\u0000$c2390df7-bd42-4883-9b00-068b85b85fcbsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0004w\u0004\u0000\u0000\u0000\u0004t\u00005Dallas is pretty far can you come to New York insteadt\u0000#Ik its a lot to ask but like yeehawt\u0000(Dplease i got covid19 come to new yorkkkt\u0000&uk what fine, i never liked you anywayxt\u0000$7d5f3ba4-0dbe-4402-847c-f49111a2d5a7sq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000&uk what fine, i never liked you anywayxxt\u0000\ruserPassword1t\u0000\u0007trader7\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\nsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$b47a6707-5105-4967-b3b4-0f31560ef89dxsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$d46c9cfc-8c41-4cec-b6e6-b277fba61562t\u0000$e8e72e67-9695-4e19-92a4-6b5363fa970fxt\u0000\u0006dallassq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$6833930a-4ac3-46ca-97a2-6bcd91492f36xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$1c788017-1134-4ed7-88c2-045a8bdaebc4xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0002t\u0000$33dda1fb-c94b-4288-a805-7064b3d0ffbct\u0000$a8f72fee-57ed-4b9e-9d57-acc976026f93xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$cda6fd1a-cb52-449b-989c-ada71eb8fd72xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\u0000xsq\u0000~\u0000\u000E\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\u0001t\u0000$4a9b50f1-13e5-4f71-aed9-3bf6100a1500xx
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/backend/databasefiles/users.ser	(revision 232a815b893bf8ef8cc912b8d1ec527699e6a2f7)
+++ src/backend/databasefiles/users.ser	(date 1596844046215)
@@ -1,29 +1,29 @@
 �� sr java.util.HashMap���`� F -loadFactorI 	thresholdxp?@     w       t $ff51c1e6-ce89-400d-bc0b-ccbf3a4d9560sr backend.models.users.Trader+��!?,Uc I incompleteTradeLimZ isIdleI minimumAmountNeededToBorrowI totalAcceptedBorrowsI totalItemsBorrowedI totalItemsLentI +loadFactorI 	thresholdxp?@     w       t $a72e49f5-32fe-4d49-8632-5080cfdaa385sr backend.models.users.Admin���m�{Ǻ L reportst Ljava/util/List;xr backend.models.users.User�5��,$� Z isFrozenZ isUnfrozenRequestedL idt Ljava/lang/String;L messagest Ljava/util/HashMap;L passwordq ~ L usernameq ~ xp  q ~ sq ~  ?@      w       xt +userPassword1t admin0sr java.util.ArrayListx����a� I sizexp    w    xt $78121ab9-a64a-45ea-aeb3-02d9500fe8c8sr backend.models.users.Trader�����7Hr I incompleteTradeLimZ isIdleI minimumAmountNeededToBorrowI totalAcceptedBorrowsI totalItemsBorrowedI totalItemsLentI  tradeCountI -tradeLimitL acceptedTradest Ljava/util/List;L availableItemsq ~ L cityt Ljava/lang/String;L completedTradesq ~ L ongoingItemsq ~ L requestedItemsq ~ L requestedTradesq ~ L reviewsq ~ L wishListq ~ xr backend.models.users.User�W'8�J Z isFrozenZ isUnfrozenRequestedL messagest Ljava/util/HashMap;L passwordq ~ L usernameq ~ xr backend.models.DatabaseIteml��@�l� L thisIdq ~ xpt $ff51c1e6-ce89-400d-bc0b-ccbf3a4d9560  sq ~  ?@      w       xt -userPassword1t trader0                         -sr java.util.ArrayListx����a� I sizexp    w    xsq ~    w   t $6d14cb84-2065-4a6e-b8de-ddf9a49f077ct $8d29bb7f-3577-4a43-a125-5af91a69d55ct $bd52a575-aceb-4273-8eb4-6656f9eacd33xt Torontosq ~     w    xsq ~     w    xsq ~    w   t $15996fe2-a3d7-43b7-b0df-18c5d4631fb3t $d49f6773-397f-467a-95b6-92896b31fdb1xsq ~     w    xsq ~     w    xsq ~    w   t $c6c7c751-328b-48ef-bbc9-c07e7b4070a7xt $6db9d5af-251b-4f1d-95a5-35bd23ad267bsq ~ t $6db9d5af-251b-4f1d-95a5-35bd23ad267b  sq ~  ?@      w       xt -userPassword1t trader6                         -sq ~    w   t $c577a889-8d68-4be9-967a-9c16e42f2a26xsq ~    w   t $4a9b50f1-13e5-4f71-aed9-3bf6100a1500t $7da34d81-15df-4763-a5e8-783472285b06xt dallassq ~    w   t $4dee2d71-8ddf-4eb2-964d-5a184bfb9ae3xsq ~    w   t $5ceceb29-930c-4415-82a4-94fef43b44c3xsq ~    w   t $42194013-672e-4f29-a38f-d99e30c2583dt $2e5ec299-57bc-41d7-a91a-93842fca46c2xsq ~     w    xsq ~     w    xsq ~    w   t $dfef169e-682c-4456-90f4-587bc600817dxt $942c21bd-4943-45b7-b112-f3a71bbf91basq ~ t $942c21bd-4943-45b7-b112-f3a71bbf91ba sq ~  ?@      w       xt -userPassword1t trader8                         -sq ~    w   t $3806d3c7-5c40-43d3-8f5c-df4b253e6189xsq ~    w   t $33a77131-7b33-44ba-b22b-a91c0c4a0fb4t $cb26903e-a35a-4ea2-9e6a-3d60a6e465bcxt Torontosq ~    w   t $23d5551d-095e-4b08-a890-d426541db05exsq ~    w   t $80f298a8-b7ef-41e2-8551-7bef47f8bb63xsq ~    w   t $cc5ff068-f47f-4e19-8d33-7160bbbc9073t $565d5480-5c5f-4ed0-9300-0f35739e4558xsq ~    w   t $583c263a-7f86-489f-9b88-82bb9dd896bexsq ~     w    xsq ~    w   t $d46c9cfc-8c41-4cec-b6e6-b277fba61562xt $c6e13b6a-d097-4e6a-8ad9-8f06bf2100aasr backend.models.users.Admin���m�{Ǻ L reportsq ~ xq ~ t $c6e13b6a-d097-4e6a-8ad9-8f06bf2100aa  sq ~  ?@      w       xt -userPassword1t admin1sq ~    w   sr backend.models.Report)��6Fv�J L FROM_USER_IDq ~ L MESSAGEq ~ L REPORT_ON_USER_IDq ~ xq ~ t $24c6cfc8-c49e-4631-b2b9-a4d86eea1554t $1e263628-3606-41b9-a833-217f0bc1767bt AThis user drove off with my lambo and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bsq ~ Ut $bba5a788-4208-473f-9653-6db5405e105bt $9cbfed05-17c4-4cfc-96e9-eeec6e239cbft FThis user flew away with my helicopter and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bxt $c2390df7-bd42-4883-9b00-068b85b85fcbsq ~ t $c2390df7-bd42-4883-9b00-068b85b85fcb  sq ~  ?@      w       xt -userPassword1t trader5                         -sq ~     w    xsq ~    w   t $38eaba5e-2696-4b23-b46f-07274ecca402t $74aa3b7c-b3ba-4f41-b0d1-b5d0f9cda3d7t $10444217-00ef-4c48-b21d-9d3cba77e71fxt new yorksq ~    w   t $7ab9a125-416d-46dc-b49d-87b72cb67edbt $0058df0c-1296-43d6-8938-b7a1b20509a1t $9914c91d-58a5-4bc6-a57c-1469892e8207t $cb3ade9a-866e-4961-8c20-c2a1e9698476xsq ~     w    xsq ~    w   t $73c6e870-6eda-4615-8a77-2f9759240625t $0b6f9474-3cbb-4c9a-b1e9-81452c0a1006xsq ~     w    xsq ~     w    xsq ~     w    xt $831cd1ea-bcca-4e75-a912-12a7a7146616sq ~ Nt $831cd1ea-bcca-4e75-a912-12a7a7146616  sq ~  ?@      w       xt -userPassword1t admin3sq ~    w   sq ~ Ut $24c6cfc8-c49e-4631-b2b9-a4d86eea1554t $1e263628-3606-41b9-a833-217f0bc1767bt AThis user drove off with my lambo and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bsq ~ Ut $bba5a788-4208-473f-9653-6db5405e105bt $9cbfed05-17c4-4cfc-96e9-eeec6e239cbft FThis user flew away with my helicopter and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bxt $1e263628-3606-41b9-a833-217f0bc1767bsq ~ t $1e263628-3606-41b9-a833-217f0bc1767b  sq ~  ?@      w       xt -userPassword1t trader3                         -sq ~    w   t $c577a889-8d68-4be9-967a-9c16e42f2a26xsq ~    w   t $6bb02c69-dfbf-437f-9369-a9f456355d56t $dfef169e-682c-4456-90f4-587bc600817dxt new yorksq ~    w   t $4dee2d71-8ddf-4eb2-964d-5a184bfb9ae3t $0058df0c-1296-43d6-8938-b7a1b20509a1xsq ~    w   t $f017123d-897f-48c3-a4e0-f85d349309acxsq ~    w   t $8617609e-d9c4-4961-a705-e00b18ad4467t $dcf7fb06-84eb-4482-94e2-836db8b5dc5cxsq ~     w    xsq ~    w   sr backend.models.Review���7���Z D RATINGxq ~ Ut $763300db-ab8f-4483-9cde-b30d348c26d2t $ff51c1e6-ce89-400d-bc0b-ccbf3a4d9560t This guy was rudet $1e263628-3606-41b9-a833-217f0bc1767b@333333sq ~ �t $437f56e1-83db-4ea2-a434-579a4df5be5ct $0cf5b831-5634-408c-ac88-247532a3bc28t This guy attacked met $1e263628-3606-41b9-a833-217f0bc1767b@ffffffxsq ~    w   t $164e10d8-aa24-4382-828f-5108c9b3ffd7xt $52edfb3c-1702-47c1-af8a-8f32d9fbcbd4sq ~ Nt $52edfb3c-1702-47c1-af8a-8f32d9fbcbd4  sq ~  ?@      w       xt -userPassword1t admin0sq ~    w   sq ~ Ut $24c6cfc8-c49e-4631-b2b9-a4d86eea1554t $1e263628-3606-41b9-a833-217f0bc1767bt AThis user drove off with my lambo and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bsq ~ Ut $bba5a788-4208-473f-9653-6db5405e105bt $9cbfed05-17c4-4cfc-96e9-eeec6e239cbft FThis user flew away with my helicopter and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bxt $0cf5b831-5634-408c-ac88-247532a3bc28sq ~ t $0cf5b831-5634-408c-ac88-247532a3bc28  sq ~  ?@      w       xt -userPassword1t trader2                         -sq ~    w   t $b47a6707-5105-4967-b3b4-0f31560ef89dxsq ~    w   t $164e10d8-aa24-4382-828f-5108c9b3ffd7t $af6a9b22-aa05-45e4-ab09-1de9ca66b6b6xt Torontosq ~    w   t $6833930a-4ac3-46ca-97a2-6bcd91492f36xsq ~    w   t $64d290c5-388f-4052-bf71-41dacff6c98bxsq ~    w   t $e565f347-829a-4d68-a078-c0e717683f0ft $8e79b787-87ae-426a-a582-0e2e9539d254xsq ~    w   t $cda6fd1a-cb52-449b-989c-ada71eb8fd72xsq ~     w    xsq ~    w   t $28a9dd0d-88ef-45f2-9bc4-a7337bacd86dxt $aed84703-a286-4c74-a3af-1e173e0b81c4sq ~ Nt $aed84703-a286-4c74-a3af-1e173e0b81c4  sq ~  ?@      w       xt -userPassword1t admin2sq ~    w   sq ~ Ut $24c6cfc8-c49e-4631-b2b9-a4d86eea1554t $1e263628-3606-41b9-a833-217f0bc1767bt AThis user drove off with my lambo and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bsq ~ Ut $bba5a788-4208-473f-9653-6db5405e105bt $9cbfed05-17c4-4cfc-96e9-eeec6e239cbft FThis user flew away with my helicopter and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bxt $18146f9f-37a6-46fe-a41e-b7ab2c42a947sq ~ Nt $18146f9f-37a6-46fe-a41e-b7ab2c42a947  sq ~  ?@      w       xt -userPassword1t admin4sq ~    w   sq ~ Ut $24c6cfc8-c49e-4631-b2b9-a4d86eea1554t $1e263628-3606-41b9-a833-217f0bc1767bt AThis user drove off with my lambo and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bsq ~ Ut $bba5a788-4208-473f-9653-6db5405e105bt $9cbfed05-17c4-4cfc-96e9-eeec6e239cbft FThis user flew away with my helicopter and never gave me what I wantedt $6db9d5af-251b-4f1d-95a5-35bd23ad267bxt $7d5f3ba4-0dbe-4402-847c-f49111a2d5a7sq ~ t $7d5f3ba4-0dbe-4402-847c-f49111a2d5a7  sq ~  ?@      w       xt -userPassword1t trader4                         -sq ~     w    xsq ~    w   t $7e0b7b52-d57f-4f1d-a375-4d9fed622f72t $b5e76eee-6f6a-4dac-92a3-9d841bd1934bt $588727fc-a5f9-4f2b-b070-62734872050ext new yorksq ~    w   t $7ab9a125-416d-46dc-b49d-87b72cb67edbt $9914c91d-58a5-4bc6-a57c-1469892e8207t $cb3ade9a-866e-4961-8c20-c2a1e9698476xsq ~     w    xsq ~    w   t $bcbc89bf-9eeb-4536-938c-5b4fafed75c1t $65c8c395-6b5f-4c4f-903b-97eb2d8dc0a6xsq ~     w    xsq ~    w   sq ~ �t $c6708c64-d53e-457a-8f25-46cf63df698ct $9cbfed05-17c4-4cfc-96e9-eeec6e239cbft This guy gave me free moneyt $7d5f3ba4-0dbe-4402-847c-f49111a2d5a7@"������xsq ~     w    xt $9cbfed05-17c4-4cfc-96e9-eeec6e239cbfsq ~ t $9cbfed05-17c4-4cfc-96e9-eeec6e239cbf  sq ~  ?@     w      t $ff51c1e6-ce89-400d-bc0b-ccbf3a4d9560sq ~    w   t /Can I buy your Ryerson hat for my pokemon cardsxxt -userPassword1t trader1                         -sq ~    w   t $3806d3c7-5c40-43d3-8f5c-df4b253e6189xsq ~    w   t $28a9dd0d-88ef-45f2-9bc4-a7337bacd86dt $e9efb654-f25a-4e43-9518-ddfaa5fd9404xt Torontosq ~    w   t $23d5551d-095e-4b08-a890-d426541db05exsq ~    w   t $c550ebc0-97c5-45a9-a6a9-2e01905bcbcexsq ~    w   t $101673d0-d807-434f-a9f2-43903d5476c8t $d79b1f5d-9f98-4882-8ec3-cdde5dc89179xsq ~    w   t $583c263a-7f86-489f-9b88-82bb9dd896bexsq ~     w    xsq ~    w   t $6d14cb84-2065-4a6e-b8de-ddf9a49f077cxt $06d20e33-1ee2-4cc5-997b-69bfbd83cad5sq ~ t $06d20e33-1ee2-4cc5-997b-69bfbd83cad5  sq ~  ?@      w       xt -userPassword1t trader9                          -sq ~     w    xsq ~    w   t $c6c7c751-328b-48ef-bbc9-c07e7b4070a7t $ba37475b-99d6-4da5-b7ec-0c36f81b232et $94b18850-6af7-4cc7-a599-eec168316875xt Torontosq ~     w    xsq ~     w    xsq ~    w   t $b4c1e54f-ad13-4e0f-a43a-ba21e1b059b2t $7a712dbb-1b22-406a-aafa-51c8bddbfc13xsq ~     w    xsq ~     w    xsq ~    w   t $33a77131-7b33-44ba-b22b-a91c0c4a0fb4xt $4e03863b-4808-4283-aa00-505703d24ca9sq ~ t $4e03863b-4808-4283-aa00-505703d24ca9  sq ~  ?@     w      t $c2390df7-bd42-4883-9b00-068b85b85fcbsq ~    w   t 5Dallas is pretty far can you come to New York insteadt #Ik its a lot to ask but like yeehawt (Dplease i got covid19 come to new yorkkkt &uk what fine, i never liked you anywayxt $7d5f3ba4-0dbe-4402-847c-f49111a2d5a7sq ~    w   t &uk what fine, i never liked you anywayxxt -userPassword1t trader7                         -sq ~    w   t $b47a6707-5105-4967-b3b4-0f31560ef89dxsq ~    w   t $d46c9cfc-8c41-4cec-b6e6-b277fba61562t $e8e72e67-9695-4e19-92a4-6b5363fa970fxt dallassq ~    w   t $6833930a-4ac3-46ca-97a2-6bcd91492f36xsq ~    w   t $1c788017-1134-4ed7-88c2-045a8bdaebc4xsq ~    w   t $33dda1fb-c94b-4288-a805-7064b3d0ffbct $a8f72fee-57ed-4b9e-9d57-acc976026f93xsq ~    w   t $cda6fd1a-cb52-449b-989c-ada71eb8fd72xsq ~     w    xsq ~    w   t $4a9b50f1-13e5-4f71-aed9-3bf6100a1500xx
\ No newline at end of file
+tradeLimitL acceptedTradesq ~ L availableItemsq ~ L cityq ~ L completedTradesq ~ L ongoingItemsq ~ L requestedItemsq ~ L requestedTradesq ~ L reviewsq ~ L wishListq ~ xq ~   t $78121ab9-a64a-45ea-aeb3-02d9500fe8c8sq ~  ?@      w       xt +userPassword1t trader1                         +sq ~    w   t $b6d83c15-0514-4caa-aa9c-2822135ed4bexsq ~    w   t $6807f8e5-bf7a-4c93-bd4a-0a4c80cebec6t $e7dc6ebb-4ffe-4632-80eb-7de31eb14df3xt Torontosq ~    w   t $8eb62100-8f71-42ce-8d85-2f28eca8b302xsq ~    w   t $af9c302a-ed4f-4243-955e-661242daca8dxsq ~    w   t $e8e267e3-2582-4000-88c8-e8fbc840a226t $d8d63844-b4fd-4211-97fa-5c4d5b58d19cxsq ~    w   t $787efc1b-9eb1-4bde-aa6f-462e5a7ea79exsq ~     w    xsq ~    w   t $ceb955e7-146d-4358-84ac-df6f11a10d23xt $56ac03f8-4b11-4003-9d3e-62fac73331c4sq ~   t $56ac03f8-4b11-4003-9d3e-62fac73331c4sq ~  ?@      w       xt +userPassword1t trader9                          +sq ~     w    xsq ~    w   t $e6ddb93c-8d4b-4b35-8bc3-14f0b2e89053t $b7513a67-4e99-4649-b4a6-0fc91686e788t $ba6d0980-0e2d-44be-b948-43c2cc872e97xt Torontosq ~     w    xsq ~     w    xsq ~    w   t $ca4d2fc3-a854-4c59-966e-19f8badccc33t $34235b37-508a-40b1-9c72-c241b491db2exsq ~     w    xsq ~     w    xsq ~    w   t $8f75d5c6-60a0-4b9e-8f55-5a0fb2f737a8xt $8a8219c5-26f3-4c42-a14f-fc24d8e698basq ~   q ~ <sq ~  ?@      w       xt +userPassword1t admin3sq ~     w    xt $49dab303-042e-459e-91d0-62ecf1dbebffsq ~   t $49dab303-042e-459e-91d0-62ecf1dbebffsq ~  ?@      w       xt +userPassword1t trader2                         +sq ~    w   t $fed3cd55-678d-4d6d-8499-460ab17a130dxsq ~    w   t $75c7f083-cf65-4374-9af7-01dc00243256t $8cab76a6-c048-4094-be7e-f1e775d7042fxt Torontosq ~    w   t $8b9b7f80-0af5-40a6-ae1d-6292e159b5a7xsq ~    w   t $94e80164-1ad6-477f-a58a-a1e528063621xsq ~    w   t $78cd49a4-2f4e-4878-9b59-0fae05a7e469t $e9f5d233-cef4-431b-ae67-dbeb6ef56affxsq ~    w   t $0ac1ede1-4d65-4649-a0f5-df2ca8ff8677xsq ~     w    xsq ~    w   t $6807f8e5-bf7a-4c93-bd4a-0a4c80cebec6xt $74700871-ff28-48c6-ad45-f4231b6b5522sq ~   q ~ Zsq ~  ?@      w       xt +userPassword1t admin4sq ~     w    xt $d4f521f2-2a47-4f73-a525-74ecb27ab82fsq ~   t $d4f521f2-2a47-4f73-a525-74ecb27ab82fsq ~  ?@      w       xt +userPassword1t trader8                         +sq ~    w   t $b6d83c15-0514-4caa-aa9c-2822135ed4bexsq ~    w   t $8f75d5c6-60a0-4b9e-8f55-5a0fb2f737a8t $a9dc93d9-1d6f-49dc-8c7f-1b3150f440e6xt Torontosq ~    w   t $8eb62100-8f71-42ce-8d85-2f28eca8b302xsq ~    w   t $beb9251d-2a84-4883-ba41-6361b49d9f66xsq ~    w   t $9aadbd44-9cb5-4ca7-a8c1-55c14abf5ed9t $f6793669-ce39-437b-9018-8f3dd3bd5a5fxsq ~    w   t $787efc1b-9eb1-4bde-aa6f-462e5a7ea79exsq ~     w    xsq ~    w   t $b20d1e9e-6c0a-4cd8-8544-4696f3885150xt $d8cac8a5-7e12-416d-a655-bbcbbac01152sq ~   t $d8cac8a5-7e12-416d-a655-bbcbbac01152sq ~  ?@      w       xt +userPassword1t trader0                         +sq ~     w    xsq ~    w   t $ceb955e7-146d-4358-84ac-df6f11a10d23t $007d8a64-6343-4c05-97d9-5f1947ce693bt $42314c8a-28ad-476c-8837-babd278e5a0cxt Torontosq ~     w    xsq ~     w    xsq ~    w   t $1745f494-bcd3-4789-a92c-60a3604ddb46t $e3bab2e6-e730-4ca0-a435-6bdff0de64c8xsq ~     w    xsq ~     w    xsq ~    w   t $e6ddb93c-8d4b-4b35-8bc3-14f0b2e89053xt $86bf0312-06b5-4c49-95d3-9a692696ebccsq ~   t $86bf0312-06b5-4c49-95d3-9a692696ebccsq ~  ?@      w       xt +userPassword1t trader6                         +sq ~    w   t $11adfeed-1ea6-4586-bf34-c7d17bd57e42xsq ~    w   t $a6fcd81c-1924-4950-9fea-3d3b4ad7fa36t $45d064b3-e138-4a54-b0fa-d11fd5aa29bdxt dallassq ~    w   t $fac82a84-fefb-49c5-a402-59fafc72c968xsq ~    w   t $7545a826-5f3c-427d-84e8-c91d455b5fa8xsq ~    w   t $be7e4329-da2a-4d88-98d3-9828869a7502t $abf583f1-85d3-4633-b18f-26e09542e4d4xsq ~    w   t $706b4d0f-1071-4561-9bde-86e3f800de09xsq ~     w    xsq ~    w   t $63ed2129-740d-455d-87e3-0f5ea8e04a74xt $47c695a5-02dd-4a5e-a70d-414eaacb4cf3sq ~   q ~ �sq ~  ?@      w       xt +userPassword1t admin2sq ~     w    xt $ed1e9e8e-c246-4e91-88a6-120763eecdd7sq ~   t $ed1e9e8e-c246-4e91-88a6-120763eecdd7sq ~  ?@      w       xt +userPassword1t trader4                         +sq ~    w   t $f83487d2-587a-4597-ab32-9e93ea549a7axsq ~    w   t $a33a1337-a1c1-4e2a-8a43-18ac99410bebt $b8cad713-37e6-47d5-9e5a-43946f953f3ext new yorksq ~    w   t $9f3ab2e8-7bf0-4c90-9326-768b121260caxsq ~    w   t $151407bd-6461-48a9-950d-12be48437f49xsq ~    w   t $8af73fe6-8442-4434-ba62-3e885be413e5t $8ba01ed4-40d3-42e4-be41-328b5ff0c18fxsq ~    w   t $caebfe9e-1d3e-45ab-abdb-3941c494bfe0xsq ~     w    xsq ~    w   t $34d707d1-8296-4f9e-9c4b-2607f0051721xt $52eb2e62-8f6f-42e7-84a0-76e02b130a4asq ~   t $52eb2e62-8f6f-42e7-84a0-76e02b130a4asq ~  ?@      w       xt +userPassword1t trader7                         +sq ~    w   t $fed3cd55-678d-4d6d-8499-460ab17a130dxsq ~    w   t $b20d1e9e-6c0a-4cd8-8544-4696f3885150t $0dcdf643-af58-4d14-beb6-47c7a3b84132xt dallassq ~    w   t $8b9b7f80-0af5-40a6-ae1d-6292e159b5a7xsq ~    w   t $63a8847a-f0bf-4d52-aa85-d51973652dc9xsq ~    w   t $01bb42ce-c402-4457-a6b4-4cc9e01cd88ct $7fda2f39-35f1-49db-991a-b91d1f3e3fcdxsq ~    w   t $0ac1ede1-4d65-4649-a0f5-df2ca8ff8677xsq ~     w    xsq ~    w   t $a6fcd81c-1924-4950-9fea-3d3b4ad7fa36xt $847548b3-cf08-4f14-aa47-888efb09e148sq ~   t $847548b3-cf08-4f14-aa47-888efb09e148sq ~  ?@      w       xt +userPassword1t trader3                         +sq ~    w   t $11adfeed-1ea6-4586-bf34-c7d17bd57e42xsq ~    w   t $34d707d1-8296-4f9e-9c4b-2607f0051721t $b8faa0f3-7d81-4356-9eae-55b980055a99xt new yorksq ~    w   t $fac82a84-fefb-49c5-a402-59fafc72c968xsq ~    w   t $067479fc-da53-4229-a94b-89ab0362ee53xsq ~    w   t $6ec13421-5f34-4b7b-b23c-29a64d23824dt $60e742bc-2742-4312-a806-232948883d84xsq ~    w   t $706b4d0f-1071-4561-9bde-86e3f800de09xsq ~    w   sr backend.models.Review9�Ъ�uc D RATINGxr backend.models.Report����C L FROM_USER_IDq ~ L MESSAGEq ~ L REPORT_ON_USER_IDq ~ xpt $d8cac8a5-7e12-416d-a655-bbcbbac01152t This guy was rudet $847548b3-cf08-4f14-aa47-888efb09e148@333333xsq ~    w   t $75c7f083-cf65-4374-9af7-01dc00243256xt $485eeec4-d773-4b36-8836-47b5b67b69d1sq ~   q ~ �sq ~  ?@      w       xt +userPassword1t admin1sq ~     w    xt $3edac04b-a627-4231-925e-02c47ed49108sq ~   t $3edac04b-a627-4231-925e-02c47ed49108sq ~  ?@      w       xt +userPassword1t trader5                         +sq ~    w   t $f83487d2-587a-4597-ab32-9e93ea549a7axsq ~    w   t $63ed2129-740d-455d-87e3-0f5ea8e04a74t $af001af9-c4e2-44c8-8209-810d61e6c039xt new yorksq ~    w   t $9f3ab2e8-7bf0-4c90-9326-768b121260caxsq ~    w   t $b7e663fb-64ef-4a89-b3cf-16c6d3e6b4fbxsq ~    w   t $8309607f-06c5-4f39-b221-c0cfbe506246t $6d6aa784-92ca-4b47-9f75-cf10f56c8be8xsq ~    w   t $caebfe9e-1d3e-45ab-abdb-3941c494bfe0xsq ~     w    xsq ~    w   t $a33a1337-a1c1-4e2a-8a43-18ac99410bebxx
\ No newline at end of file

Index: src/frontend/WindowManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frontend;\r\n\r\nimport backend.DatabaseFilePaths;\r\nimport backend.exceptions.AuthorizationException;\r\nimport backend.exceptions.TradableItemNotFoundException;\r\nimport backend.exceptions.TradeNotFoundException;\r\nimport backend.exceptions.UserNotFoundException;\r\nimport backend.tradesystem.UserTypes;\r\nimport backend.tradesystem.general_managers.LoginManager;\r\nimport frontend.panels.admin_panel.AdminPanel;\r\nimport frontend.panels.trader_panel.TraderPanel;\r\nimport frontend.panels.login_panel.LoginPanel;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\n/**\r\n * This is used to manage settings in the overall window itself Code inspired\r\n * from\r\n * https://stackoverflow.com/questions/54815226/how-can-i-detect-if-a-file-has-been-modified-using-lastmodified\r\n */\r\npublic class WindowManager extends JFrame {\r\n    protected Font regular, bold, italic, boldItalic;\r\n    private final LoginPanel loginPanel;\r\n    private JPanel userPanel = null;\r\n    private final BufferedImage loginBg = ImageIO.read(new File(\"./src/frontend/images/LoginPanelBg.jpg\")),\r\n            adminBg = ImageIO.read(new File(\"./src/frontend/images/IconAdmin.jpg\")),\r\n            traderBg = ImageIO.read(new File(\"./src/frontend/images/IconTrader.jpg\"));\r\n    private final LoginManager loginManager = new LoginManager();\r\n    private boolean infiltraded;\r\n\r\n    private String userId = \"bad\";\r\n\r\n    private String currentPanel = \"\";\r\n\r\n    /**\r\n     * This is where initial settings that affects the entire window is at\r\n     *\r\n     * @throws IOException         if logging causes issues\r\n     * @throws FontFormatException if the font is bad\r\n     */\r\n    public WindowManager() throws IOException, FontFormatException {\r\n        regular = Font.createFont(Font.TRUETYPE_FONT,\r\n                getClass().getResourceAsStream(\"./fonts/IBMPlexSans-Regular.ttf\"));\r\n        bold = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream(\"./fonts/IBMPlexSans-Bold.ttf\"));\r\n        italic = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream(\"./fonts/IBMPlexSans-Italic.ttf\"));\r\n        boldItalic = Font.createFont(Font.TRUETYPE_FONT,\r\n                getClass().getResourceAsStream(\"./fonts/IBMPlexSans-BoldItalic.ttf\"));\r\n        loginPanel = new LoginPanel(regular, bold, italic, boldItalic);\r\n\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        this.setContentPane(new ImagePanel(loginBg));\r\n        this.add(loginPanel, BorderLayout.CENTER);\r\n        this.setSize(loginPanel.getSize());\r\n        this.setLocationRelativeTo(null);\r\n        this.setResizable(false);\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the current userId (trader or admin)\r\n     * @return the userId\r\n     */\r\n    public String getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    /**\r\n     * Changes from login screen to the actual dashboard\r\n     *\r\n     * @param loggedInUserId the user id that is logged in\r\n     * @throws IOException            if login causes issues\r\n     * @throws TradeNotFoundException trade doesn't exist\r\n     */\r\n    public void login(String loggedInUserId) throws IOException, TradeNotFoundException {\r\n        try {\r\n            this.userId = loggedInUserId;\r\n            if (userId.equals(\"bad\"))\r\n                return;\r\n            if (loggedInUserId.equals(\"\") || loginManager.getType(loggedInUserId).equals(UserTypes.TRADER)) {\r\n                userPanel = new TraderPanel(loggedInUserId, regular, bold, italic, boldItalic, infiltraded);\r\n                if (!this.currentPanel.equals(\"\"))\r\n                    ((TraderPanel) userPanel).setCurrentPanel(this.currentPanel);\r\n                this.setContentPane(new ImagePanel(traderBg));\r\n                this.setContentPane(new ImagePanel(traderBg));\r\n            } else {\r\n                userPanel = new AdminPanel(loggedInUserId, regular, bold, italic, boldItalic);\r\n                if (!this.currentPanel.equals(\"\"))\r\n                    ((AdminPanel) userPanel).setCurrentPanel(this.currentPanel);\r\n                this.setContentPane(new ImagePanel(adminBg));\r\n            }\r\n            this.add(userPanel, BorderLayout.CENTER);\r\n            this.setSize(userPanel.getSize());\r\n        } catch (UserNotFoundException | AuthorizationException | TradableItemNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Puts the window back on the login screen\r\n     */\r\n    public void logout() {\r\n        privateLogout();\r\n        this.userId = \"bad\";\r\n    }\r\n\r\n    private void privateLogout() {\r\n        this.currentPanel = userPanel instanceof TraderPanel ? ((TraderPanel) userPanel).getCurrentPanel()\r\n                : ((AdminPanel) userPanel).getCurrentPanel();\r\n        if (userPanel != null)\r\n            this.remove(userPanel);\r\n        this.setContentPane(new ImagePanel(loginBg));\r\n        this.add(loginPanel, BorderLayout.CENTER);\r\n        this.setSize(loginPanel.getSize());\r\n    }\r\n\r\n    /**\r\n     * Sets the window to visible and refreshes the JFrame if needed\r\n     */\r\n    public void run() {\r\n        ArrayList<Long> times = new ArrayList<>();\r\n        ArrayList<File> file = new ArrayList<>();\r\n        int i = 0;\r\n        for (DatabaseFilePaths path : DatabaseFilePaths.values()) {\r\n            if (path.isConfig())\r\n                continue;\r\n            file.add(new File(path.getFilePath()));\r\n            times.add(file.get(i).lastModified());\r\n            i++;\r\n        }\r\n        Timer timer = new Timer();\r\n        timer.schedule(new TimerTask() {\r\n            @Override\r\n            public void run() {\r\n                if (userId.equals(\"bad\"))\r\n                    return;\r\n                for (int i = 0; i < times.size(); i++) {\r\n                    if (times.get(i) != file.get(i).lastModified()) {\r\n                        times.set(i, file.get(i).lastModified());\r\n                        try {\r\n                            if (!userId.equals(\"\")) {\r\n                                privateLogout();\r\n                                login(userId);\r\n                                break;\r\n                            }\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }, new Date(), 500);\r\n        addWindowListener(new WindowAdapter() {\r\n            @Override\r\n            public void windowClosing(WindowEvent ignored) {\r\n                timer.cancel();\r\n            }\r\n        });\r\n        this.setVisible(true);\r\n    }\r\n\r\n    private static class ImagePanel extends JComponent {\r\n        private final Image image;\r\n\r\n        public ImagePanel(Image image) {\r\n            this.image = image;\r\n        }\r\n\r\n        @Override\r\n        protected void paintComponent(Graphics g) {\r\n            super.paintComponent(g);\r\n            g.drawImage(image, 0, 0, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets infiltraded to true (this WindowManager was created by an admin to\r\n     * infiltrade)\r\n     */\r\n    public void setInfiltraded() {\r\n        infiltraded = true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/frontend/WindowManager.java	(revision 2e5f4db655877632dd86ded28c58b689c2bafdf0)
+++ src/frontend/WindowManager.java	(date 1596939547417)
@@ -17,6 +17,7 @@
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.awt.image.BufferedImage;
+import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -50,12 +51,10 @@
      * @throws FontFormatException if the font is bad
      */
     public WindowManager() throws IOException, FontFormatException {
-        regular = Font.createFont(Font.TRUETYPE_FONT,
-                getClass().getResourceAsStream("./fonts/IBMPlexSans-Regular.ttf"));
-        bold = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream("./fonts/IBMPlexSans-Bold.ttf"));
-        italic = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream("./fonts/IBMPlexSans-Italic.ttf"));
-        boldItalic = Font.createFont(Font.TRUETYPE_FONT,
-                getClass().getResourceAsStream("./fonts/IBMPlexSans-BoldItalic.ttf"));
+        regular = Font.createFont(Font.TRUETYPE_FONT, new File("./src/frontend/fonts/IBMPlexSans-Regular.ttf"));
+        bold = Font.createFont(Font.TRUETYPE_FONT, new File("./src/frontend/fonts/IBMPlexSans-Bold.ttf"));
+        italic = Font.createFont(Font.TRUETYPE_FONT, new File("./src/frontend/fonts/IBMPlexSans-Italic.ttf"));
+        boldItalic = Font.createFont(Font.TRUETYPE_FONT, new File("./src/frontend/fonts/IBMPlexSans-BoldItalic.ttf"));
         loginPanel = new LoginPanel(regular, bold, italic, boldItalic);
 
         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

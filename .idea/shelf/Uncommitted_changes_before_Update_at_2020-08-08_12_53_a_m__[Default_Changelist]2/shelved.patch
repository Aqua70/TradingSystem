Index: src/frontend/panels/admin_panel/admin_subpanels/OverviewPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frontend.panels.admin_panel.admin_subpanels;\r\n\r\nimport backend.exceptions.AuthorizationException;\r\nimport backend.exceptions.TradableItemNotFoundException;\r\nimport backend.exceptions.UserNotFoundException;\r\nimport backend.tradesystem.admin_managers.HandleFrozenManager;\r\nimport backend.tradesystem.admin_managers.HandleItemRequestsManager;\r\nimport backend.tradesystem.queries.ItemQuery;\r\nimport backend.tradesystem.queries.UserQuery;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * Shows the overview of what an admin can do such as freezing an account\r\n */\r\npublic class OverviewPanel extends JPanel {\r\n\r\n    private JPanel itemRequestsContainer,\r\n            unFreezeRequestsContainer, freezeTradersContainer;\r\n    private final JPanel itemRequestsHeader, unFreezeRequestsHeader, freezeTradersHeader;\r\n    private final Font regular, bold, italic, boldItalic;\r\n    private final UserQuery userQuery = new UserQuery();\r\n    private final ItemQuery itemQuery = new ItemQuery();\r\n    private final HandleItemRequestsManager itemRequestManager = new HandleItemRequestsManager();\r\n    private final HandleFrozenManager frozenManager = new HandleFrozenManager();\r\n\r\n    private final Color bg = new Color(51, 51, 51);\r\n    private final Color blue = new Color(0, 240, 239);\r\n    private final Color gray = new Color(142, 142, 142);\r\n    private final Color confirmButton = new Color(27, 158, 36);\r\n    private final Color red = new Color(219, 58, 52);\r\n\r\n    /**\r\n     * Makes an overview panel\r\n     *\r\n     * @param adminId    the admin id\r\n     * @param regular    regular font\r\n     * @param bold       bold font\r\n     * @param italic     italics font\r\n     * @param boldItalic bold italics font\r\n     * @throws IOException if issues with getting database files\r\n     */\r\n    public OverviewPanel(String adminId, Font regular, Font bold, Font italic, Font boldItalic) throws IOException {\r\n        this.regular = regular;\r\n        this.bold = bold;\r\n        this.italic = italic;\r\n        this.boldItalic = boldItalic;\r\n\r\n        this.setBorder(BorderFactory.createEmptyBorder(25, 0, 0, 25));\r\n        this.setBackground(Color.BLACK);\r\n\r\n\r\n        JPanel itemRequestsTitleContainer = makeItemRequestsTitleContainer();\r\n\r\n        makeItemRequestsTitle(itemRequestsTitleContainer);\r\n\r\n        JButton acceptAllItemRequestsButton = makeDoAllButton(itemRequestsTitleContainer, \"Accept All\", Color.black);\r\n\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n\r\n        JPanel itemRequests = new JPanel(new GridBagLayout());\r\n        gbc.fill = GridBagConstraints.BOTH;\r\n        gbc.gridy = 0;\r\n        gbc.weighty = 0.1;\r\n        itemRequests.add(itemRequestsTitleContainer, gbc);\r\n        itemRequestsHeader = new JPanel(new GridLayout(1, 5, 25, 0));\r\n        setupItemRequestsHeader(gbc, itemRequests);\r\n\r\n        getAllItemRequests();\r\n        JScrollPane itemRequestsScrollPane = new JScrollPane(itemRequestsContainer);\r\n        itemRequestsScrollPane.setPreferredSize(new Dimension(1200, 325));\r\n        itemRequestsScrollPane.setBorder(null);\r\n        gbc.insets = new Insets(0, 0, 0, 0);\r\n        gbc.gridy = 2;\r\n        gbc.weighty = 0.8;\r\n        itemRequests.add(itemRequestsScrollPane, gbc);\r\n\r\n        JPanel frozenTraderTitleContainer = new JPanel(new GridLayout(1, 4, 50, 0));\r\n        frozenTraderTitleContainer.setOpaque(false);\r\n        frozenTraderTitleContainer.setPreferredSize(new Dimension(1200, 75));\r\n\r\n        setupFreezeTitle(frozenTraderTitleContainer, \"Un-freeze Requests\");\r\n\r\n        JButton unFreezeAllTradersButton = makeDoAllButton(frozenTraderTitleContainer, \"Un-freeze All\", Color.BLACK);\r\n\r\n        setupFreezeTitle(frozenTraderTitleContainer, \"To-be-frozen Users\");\r\n\r\n        JButton freezeAllTradersButton = makeDoAllButton(frozenTraderTitleContainer, \"Freeze All\", Color.BLACK);\r\n\r\n        gbc = new GridBagConstraints();\r\n        JPanel unFreezeRequests = new JPanel(new GridBagLayout());\r\n\r\n        unFreezeRequestsHeader = new JPanel(new GridLayout(1, 5, 25, 0));\r\n        unFreezeRequestsHeader.setBackground(bg);\r\n        unFreezeRequestsHeader.setBorder(BorderFactory.createEmptyBorder(0, 25, 0, 80));\r\n        unFreezeRequestsHeader.setPreferredSize(new Dimension(575, 25));\r\n        addUnFreezeRequestsHeader();\r\n        gbc.fill = GridBagConstraints.BOTH;\r\n        gbc.insets = new Insets(0, 0, 1, 0);\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 0;\r\n        gbc.weighty = 0.1;\r\n        unFreezeRequests.add(unFreezeRequestsHeader, gbc);\r\n\r\n        getAllUnFreezeRequests();\r\n        handleFreezeTradersScrollPane(gbc, unFreezeRequests, unFreezeRequestsContainer);\r\n\r\n        JPanel freezeTraders = new JPanel(new GridBagLayout());\r\n\r\n        freezeTradersHeader = new JPanel(new GridLayout(1, 5, 25, 0));\r\n        handleFreezeTradersHeader(gbc, freezeTraders);\r\n\r\n        getAllToBeFrozenUsers();\r\n        handleFreezeTradersScrollPane(gbc, freezeTraders, freezeTradersContainer);\r\n\r\n        JPanel bottomSplitContainer = handleBottomSplitPanel(unFreezeRequests, freezeTraders);\r\n\r\n        this.add(itemRequests);\r\n        this.add(frozenTraderTitleContainer);\r\n        this.add(bottomSplitContainer);\r\n\r\n        handleButtonPress(acceptAllItemRequestsButton, unFreezeAllTradersButton, freezeAllTradersButton);\r\n\r\n    }\r\n\r\n    private JPanel handleBottomSplitPanel(JPanel unFreezeRequests, JPanel freezeTraders) {\r\n        JPanel bottomSplitContainer = new JPanel(new GridLayout(1, 2, 50, 0));\r\n        bottomSplitContainer.setPreferredSize(new Dimension(1200, 300));\r\n        bottomSplitContainer.setBackground(Color.BLACK);\r\n        bottomSplitContainer.add(unFreezeRequests);\r\n        bottomSplitContainer.add(freezeTraders);\r\n        return bottomSplitContainer;\r\n    }\r\n\r\n    private void handleFreezeTradersScrollPane(GridBagConstraints gbc, JPanel freezeTraders, JPanel freezeTradersContainer) {\r\n        JScrollPane freezeTradersScrollPane = new JScrollPane(freezeTradersContainer);\r\n        freezeTradersScrollPane.setBorder(null);\r\n        freezeTradersScrollPane.setPreferredSize(new Dimension(575, 274));\r\n        gbc.insets = new Insets(0, 0, 0, 0);\r\n        gbc.gridy = 1;\r\n        gbc.weighty = 0.9;\r\n        freezeTraders.add(freezeTradersScrollPane, gbc);\r\n    }\r\n\r\n    private void handleFreezeTradersHeader(GridBagConstraints gbc, JPanel freezeTraders) {\r\n        freezeTradersHeader.setBackground(bg);\r\n        freezeTradersHeader.setBorder(BorderFactory.createEmptyBorder(0, 25, 0, 80));\r\n        freezeTradersHeader.setPreferredSize(new Dimension(575, 25));\r\n        addFreezeTradersHeader();\r\n        gbc.insets = new Insets(0, 0, 1, 0);\r\n        gbc.gridy = 0;\r\n        gbc.weighty = 0.1;\r\n        freezeTraders.add(freezeTradersHeader, gbc);\r\n    }\r\n\r\n    private void handleButtonPress(JButton acceptAllItemRequestsButton, JButton unFreezeAllTradersButton, JButton freezeAllTradersButton) {\r\n        acceptAllItemRequestsButton.addActionListener(e -> {\r\n            for (Component itemRequest : itemRequestsContainer.getComponents()) {\r\n                for (Component c : ((JPanel) itemRequest).getComponents()) {\r\n                    if (c instanceof JButton && c.getBackground() == confirmButton) {\r\n                        ((JButton) c).doClick();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        unFreezeAllTradersButton.addActionListener(e -> {\r\n            for (Component unFreezeRequest : unFreezeRequestsContainer.getComponents()) {\r\n                for (Component c : ((JPanel) unFreezeRequest).getComponents()) {\r\n                    if (c instanceof JButton && c.getBackground() == confirmButton) {\r\n                        ((JButton) c).doClick();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        freezeAllTradersButton.addActionListener(e -> {\r\n            for (Component freezeComponent : freezeTradersContainer.getComponents()) {\r\n                for (Component c : ((JPanel) freezeComponent).getComponents()) {\r\n                    if (c instanceof JButton && c.getBackground() == blue) {\r\n                        ((JButton) c).doClick();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setupFreezeTitle(JPanel frozenTraderTitleContainer, String s) {\r\n        JLabel unFreezeRequestsTitle = new JLabel(s);\r\n        unFreezeRequestsTitle.setFont(this.regular.deriveFont(28f));\r\n        unFreezeRequestsTitle.setForeground(Color.WHITE);\r\n        unFreezeRequestsTitle.setHorizontalAlignment(JLabel.LEFT);\r\n        frozenTraderTitleContainer.add(unFreezeRequestsTitle);\r\n    }\r\n\r\n    private void setupItemRequestsHeader(GridBagConstraints gbc, JPanel itemRequests) {\r\n        itemRequestsHeader.setPreferredSize(new Dimension(1200, 25));\r\n        itemRequestsHeader.setBackground(bg);\r\n        itemRequestsHeader.setBorder(BorderFactory.createEmptyBorder(0, 25, 0, 80));\r\n        addItemRequestsHeader();\r\n        gbc.insets = new Insets(0, 0, 1, 0);\r\n        gbc.gridy = 1;\r\n        gbc.weighty = 0.1;\r\n        itemRequests.add(itemRequestsHeader, gbc);\r\n    }\r\n\r\n    private JButton makeDoAllButton(JPanel itemRequestsTitleContainer, String s, Color black) {\r\n        JButton acceptAllItemRequestsButton = new JButton(s);\r\n        acceptAllItemRequestsButton.setFont(this.boldItalic.deriveFont(20f));\r\n        acceptAllItemRequestsButton.setHorizontalAlignment(JButton.RIGHT);\r\n        acceptAllItemRequestsButton.setForeground(blue);\r\n        acceptAllItemRequestsButton.setBackground(black);\r\n        acceptAllItemRequestsButton.setOpaque(true);\r\n        acceptAllItemRequestsButton.setBorderPainted(false);\r\n        itemRequestsTitleContainer.add(acceptAllItemRequestsButton);\r\n        return acceptAllItemRequestsButton;\r\n    }\r\n\r\n    private void makeItemRequestsTitle(JPanel itemRequestsTitleContainer) {\r\n        JLabel itemRequestsTitle = new JLabel(\"Item Requests\");\r\n        itemRequestsTitle.setFont(this.regular.deriveFont(28f));\r\n        itemRequestsTitle.setForeground(Color.WHITE);\r\n        itemRequestsTitle.setHorizontalAlignment(JLabel.LEFT);\r\n        itemRequestsTitle.setBackground(Color.black);\r\n        itemRequestsTitle.setOpaque(true);\r\n        itemRequestsTitleContainer.add(itemRequestsTitle);\r\n    }\r\n\r\n    private JPanel makeItemRequestsTitleContainer() {\r\n        JPanel itemRequestsTitleContainer = new JPanel(new GridLayout(1, 2));\r\n        itemRequestsTitleContainer.setOpaque(false);\r\n        itemRequestsTitleContainer.setPreferredSize(new Dimension(1200, 50));\r\n        return itemRequestsTitleContainer;\r\n    }\r\n\r\n    private void addFreezeTradersHeader() {\r\n    }\r\n\r\n    private void addUnFreezeRequestsHeader() {\r\n    }\r\n\r\n    private void addItemRequestsHeader() {\r\n        JLabel name = new JLabel(\"Name\");\r\n        name.setFont(this.regular.deriveFont(20f));\r\n        name.setForeground(Color.WHITE);\r\n        name.setHorizontalAlignment(JLabel.LEFT);\r\n\r\n        JLabel item = new JLabel(\"Item\");\r\n        item.setFont(this.regular.deriveFont(20f));\r\n        item.setForeground(Color.WHITE);\r\n        item.setHorizontalAlignment(JLabel.LEFT);\r\n\r\n        JLabel itemDesc = new JLabel(\"    Item Description\");\r\n        itemDesc.setFont(this.regular.deriveFont(20f));\r\n        itemDesc.setForeground(Color.WHITE);\r\n        itemDesc.setHorizontalAlignment(JLabel.CENTER);\r\n\r\n        JLabel empty2 = new JLabel(\"\");\r\n        JLabel empty3 = new JLabel(\"\");\r\n\r\n        itemRequestsHeader.add(name);\r\n        itemRequestsHeader.add(item);\r\n        itemRequestsHeader.add(itemDesc);\r\n        itemRequestsHeader.add(empty2);\r\n        itemRequestsHeader.add(empty3);\r\n    }\r\n\r\n    private void getAllItemRequests() {\r\n        HashMap<String, List<String>> itemRequests = itemRequestManager.getAllItemRequests();\r\n        if (itemRequests.size() == 0) {\r\n            itemRequestsContainer = new JPanel();\r\n            itemRequestsContainer.setBackground(bg);\r\n            JLabel noItemsFound = new JLabel(\"<html><pre>No Item Requests Found</pre></html>\");\r\n            noItemsFound.setFont(regular.deriveFont(30f));\r\n            noItemsFound.setPreferredSize(new Dimension(1000, 275));\r\n            noItemsFound.setHorizontalAlignment(JLabel.CENTER);\r\n            noItemsFound.setVerticalAlignment(JLabel.CENTER);\r\n            noItemsFound.setForeground(gray);\r\n            itemRequestsContainer.add(noItemsFound);\r\n            return;\r\n        }\r\n        int numRows = 0;\r\n        for (String t : itemRequests.keySet())\r\n            numRows += itemRequests.get(t).size();\r\n        if (numRows < 4)\r\n            numRows = 4;\r\n        itemRequestsContainer = new JPanel(new GridLayout(numRows, 1));\r\n        itemRequestsContainer.setBackground(bg);\r\n        itemRequests.forEach((t, items) ->\r\n                items.forEach(item -> {\r\n                    try {\r\n                        JPanel itemRequestPanel = new JPanel(new GridLayout(1, 6, 10, 0));\r\n                        itemRequestPanel.setPreferredSize(new Dimension(1000, 75));\r\n                        itemRequestPanel.setBackground(bg);\r\n                        itemRequestPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, gray));\r\n\r\n                        JLabel traderName = new JLabel(userQuery.getUsername(t));\r\n                        traderName.setFont(regular.deriveFont(20f));\r\n                        traderName.setForeground(Color.WHITE);\r\n                        traderName.setHorizontalAlignment(JLabel.LEFT);\r\n                        traderName.setBorder(BorderFactory.createEmptyBorder(0, 25, 0, 0));\r\n\r\n                        JLabel traderItemName = new JLabel(itemQuery.getName(item));\r\n                        traderItemName.setFont(regular.deriveFont(20f));\r\n                        traderItemName.setForeground(Color.WHITE);\r\n                        traderItemName.setHorizontalAlignment(JLabel.LEFT);\r\n\r\n                        JLabel traderItemDesc = new JLabel(itemQuery.getName(item));\r\n                        traderItemDesc.setFont(regular.deriveFont(15f));\r\n                        traderItemDesc.setForeground(Color.WHITE);\r\n                        traderItemDesc.setHorizontalAlignment(JLabel.CENTER);\r\n\r\n                        JButton acceptItemRequestButton = new JButton(\"Accept\");\r\n                        acceptItemRequestButton.setFont(bold.deriveFont(20f));\r\n                        acceptItemRequestButton.setForeground(Color.WHITE);\r\n                        acceptItemRequestButton.setBackground(confirmButton);\r\n                        acceptItemRequestButton.setOpaque(true);\r\n                        acceptItemRequestButton.setBorder(BorderFactory.createMatteBorder(15, 50, 15, 50, bg));\r\n\r\n                        JButton rejectItemRequestButton = new JButton(\"Reject\");\r\n                        rejectItemRequestButton.setFont(bold.deriveFont(20f));\r\n                        rejectItemRequestButton.setForeground(Color.WHITE);\r\n                        rejectItemRequestButton.setBackground(red);\r\n                        rejectItemRequestButton.setOpaque(true);\r\n                        rejectItemRequestButton.setBorder(BorderFactory.createMatteBorder(15, 50, 15, 50, bg));\r\n\r\n                        itemRequestPanel.add(traderName);\r\n                        itemRequestPanel.add(traderItemName);\r\n                        itemRequestPanel.add(traderItemDesc);\r\n                        itemRequestPanel.add(acceptItemRequestButton);\r\n                        itemRequestPanel.add(rejectItemRequestButton);\r\n                        itemRequestsContainer.add(itemRequestPanel);\r\n\r\n                        acceptItemRequestButton.addActionListener(e -> {\r\n                            try {\r\n                                itemRequestManager.processItemRequest(t, item, true);\r\n                                itemRequestsContainer.remove(itemRequestPanel);\r\n                                itemRequestsContainer.revalidate();\r\n                                itemRequestsContainer.repaint();\r\n                            } catch (TradableItemNotFoundException | UserNotFoundException | AuthorizationException e1) {\r\n                                e1.printStackTrace();\r\n                            }\r\n                        });\r\n\r\n                        rejectItemRequestButton.addActionListener(e -> {\r\n                            try {\r\n                                itemRequestManager.processItemRequest(t, item, false);\r\n                                itemRequestsContainer.remove(itemRequestPanel);\r\n                                itemRequestsContainer.revalidate();\r\n                                itemRequestsContainer.repaint();\r\n                            } catch (TradableItemNotFoundException | UserNotFoundException | AuthorizationException e1) {\r\n                                e1.printStackTrace();\r\n                            }\r\n                        });\r\n                    } catch (TradableItemNotFoundException | UserNotFoundException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                })\r\n        );\r\n    }\r\n\r\n    private void getAllUnFreezeRequests() {\r\n        List<String> unFreezeRequests = frozenManager.getAllUnfreezeRequests();\r\n        if (unFreezeRequests.size() == 0) {\r\n            unFreezeRequestsContainer = new JPanel();\r\n            unFreezeRequestsContainer.setBackground(bg);\r\n            JLabel noTradersFound = new JLabel(\"<html><pre>No Requests Found</pre></html>\");\r\n            noTradersFound.setFont(regular.deriveFont(30f));\r\n            noTradersFound.setPreferredSize(new Dimension(400, 275));\r\n            noTradersFound.setHorizontalAlignment(JLabel.CENTER);\r\n            noTradersFound.setVerticalAlignment(JLabel.CENTER);\r\n            noTradersFound.setForeground(gray);\r\n            unFreezeRequestsContainer.add(noTradersFound);\r\n            unFreezeRequestsHeader.setVisible(false);\r\n            return;\r\n        }\r\n        int numRows = unFreezeRequests.size();\r\n        if (numRows < 4)\r\n            numRows = 4;\r\n        unFreezeRequestsContainer = new JPanel(new GridLayout(numRows, 1));\r\n        unFreezeRequestsContainer.setBackground(bg);\r\n        unFreezeRequests.forEach(user -> {\r\n            JPanel unFreezeRequestsPanel = new JPanel(new GridLayout(1, 3, 10, 0));\r\n            unFreezeRequestsPanel.setPreferredSize(new Dimension(400, 75));\r\n            unFreezeRequestsPanel.setBackground(bg);\r\n            unFreezeRequestsPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, gray));\r\n\r\n            JLabel traderName = null;\r\n            try {\r\n                traderName = new JLabel(userQuery.getUsername(user));\r\n                traderName.setFont(regular.deriveFont(20f));\r\n                traderName.setForeground(Color.WHITE);\r\n                traderName.setHorizontalAlignment(JLabel.LEFT);\r\n                traderName.setBorder(BorderFactory.createEmptyBorder(0, 25, 0, 0));\r\n            } catch (UserNotFoundException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            JButton acceptUnFreezeRequestButton = new JButton(\"Un-Freeze\");\r\n            acceptUnFreezeRequestButton.setFont(bold.deriveFont(20f));\r\n            acceptUnFreezeRequestButton.setForeground(Color.WHITE);\r\n            acceptUnFreezeRequestButton.setBackground(confirmButton);\r\n            acceptUnFreezeRequestButton.setOpaque(true);\r\n            acceptUnFreezeRequestButton.setBorder(BorderFactory.createMatteBorder(15, 30, 15, 30, bg));\r\n\r\n            JButton rejectUnFreezeRequestButton = new JButton(\"Reject\");\r\n            rejectUnFreezeRequestButton.setFont(bold.deriveFont(20f));\r\n            rejectUnFreezeRequestButton.setForeground(Color.WHITE);\r\n            rejectUnFreezeRequestButton.setBackground(red);\r\n            rejectUnFreezeRequestButton.setOpaque(true);\r\n            rejectUnFreezeRequestButton.setBorder(BorderFactory.createMatteBorder(15, 30, 15, 30, bg));\r\n\r\n            unFreezeRequestsPanel.add(traderName);\r\n            unFreezeRequestsPanel.add(acceptUnFreezeRequestButton);\r\n            unFreezeRequestsPanel.add(rejectUnFreezeRequestButton);\r\n            unFreezeRequestsContainer.add(unFreezeRequestsPanel);\r\n\r\n            acceptUnFreezeRequestButton.addActionListener(e -> {\r\n                try {\r\n                    frozenManager.setFrozen(user, false);\r\n                    unFreezeRequestsContainer.remove(unFreezeRequestsPanel);\r\n                    unFreezeRequestsContainer.revalidate();\r\n                    unFreezeRequestsContainer.repaint();\r\n                } catch (UserNotFoundException e1) {\r\n                    e1.printStackTrace();\r\n                }\r\n            });\r\n\r\n            rejectUnFreezeRequestButton.addActionListener(e -> {\r\n                unFreezeRequestsContainer.remove(unFreezeRequestsPanel);\r\n                unFreezeRequestsContainer.revalidate();\r\n                unFreezeRequestsContainer.repaint();\r\n\r\n            });\r\n        });\r\n    }\r\n\r\n    private void getAllToBeFrozenUsers() {\r\n        List<String> tobeFrozenList = frozenManager.getShouldBeFrozen();\r\n        if (tobeFrozenList.size() == 0) {\r\n            freezeTradersContainer = new JPanel();\r\n            freezeTradersContainer.setBackground(bg);\r\n            JLabel noTradersFound = new JLabel(\"<html><pre>No Traders to freeze</pre></html>\");\r\n            noTradersFound.setFont(regular.deriveFont(30f));\r\n            noTradersFound.setPreferredSize(new Dimension(400, 275));\r\n            noTradersFound.setHorizontalAlignment(JLabel.CENTER);\r\n            noTradersFound.setVerticalAlignment(JLabel.CENTER);\r\n            noTradersFound.setForeground(gray);\r\n            freezeTradersContainer.add(noTradersFound);\r\n            freezeTradersHeader.setVisible(false);\r\n            return;\r\n        }\r\n        int numRows = tobeFrozenList.size();\r\n        if (numRows < 4)\r\n            numRows = 4;\r\n        freezeTradersContainer = new JPanel(new GridLayout(numRows, 1));\r\n        freezeTradersContainer.setBackground(bg);\r\n        tobeFrozenList.forEach(trader -> {\r\n            JPanel freezeTraderPanel = new JPanel(new GridLayout(1, 2));\r\n            freezeTraderPanel.setPreferredSize(new Dimension(400, 75));\r\n            freezeTraderPanel.setBackground(bg);\r\n            freezeTraderPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, gray));\r\n\r\n            JLabel traderName = null;\r\n            try {\r\n                traderName = new JLabel(userQuery.getUsername(trader));\r\n                traderName.setFont(regular.deriveFont(20f));\r\n                traderName.setForeground(Color.WHITE);\r\n                traderName.setHorizontalAlignment(JLabel.LEFT);\r\n                traderName.setBorder(BorderFactory.createEmptyBorder(0, 25, 0, 0));\r\n            } catch (UserNotFoundException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            JButton freezeTraderButton = new JButton(\"FREEZE\");\r\n            freezeTraderButton.setFont(boldItalic.deriveFont(20f));\r\n            freezeTraderButton.setForeground(Color.WHITE);\r\n            freezeTraderButton.setBackground(blue);\r\n            freezeTraderButton.setOpaque(true);\r\n            freezeTraderButton.setBorder(BorderFactory.createMatteBorder(15, 30, 15, 30, bg));\r\n\r\n            freezeTraderPanel.add(traderName);\r\n            freezeTraderPanel.add(freezeTraderButton);\r\n            freezeTradersContainer.add(freezeTraderPanel);\r\n\r\n            freezeTraderButton.addActionListener(e -> {\r\n                try {\r\n                    frozenManager.setFrozen(trader, true);\r\n                    freezeTradersContainer.remove(freezeTraderPanel);\r\n                    freezeTradersContainer.revalidate();\r\n                    freezeTradersContainer.repaint();\r\n                } catch (UserNotFoundException e1) {\r\n                    e1.printStackTrace();\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/frontend/panels/admin_panel/admin_subpanels/OverviewPanel.java	(revision f12076c598b9223dbe658ecfc217209af6c02b5a)
+++ src/frontend/panels/admin_panel/admin_subpanels/OverviewPanel.java	(date 1596862417152)
@@ -161,33 +161,36 @@
 
     private void handleButtonPress(JButton acceptAllItemRequestsButton, JButton unFreezeAllTradersButton, JButton freezeAllTradersButton) {
         acceptAllItemRequestsButton.addActionListener(e -> {
-            for (Component itemRequest : itemRequestsContainer.getComponents()) {
-                for (Component c : ((JPanel) itemRequest).getComponents()) {
-                    if (c instanceof JButton && c.getBackground() == confirmButton) {
-                        ((JButton) c).doClick();
-                    }
-                }
-            }
+            // for (Component itemRequest : itemRequestsContainer.getComponents()) {
+            //     for (Component c : ((JPanel) itemRequest).getComponents()) {
+            //         if (c instanceof JButton && c.getBackground() == confirmButton) {
+            //             ((JButton) c).doClick();
+            //         }
+            //     }
+            // }
+            itemRequestManager.acceptAllItemRequests();
         });
 
         unFreezeAllTradersButton.addActionListener(e -> {
-            for (Component unFreezeRequest : unFreezeRequestsContainer.getComponents()) {
-                for (Component c : ((JPanel) unFreezeRequest).getComponents()) {
-                    if (c instanceof JButton && c.getBackground() == confirmButton) {
-                        ((JButton) c).doClick();
-                    }
-                }
-            }
+            // for (Component unFreezeRequest : unFreezeRequestsContainer.getComponents()) {
+            //     for (Component c : ((JPanel) unFreezeRequest).getComponents()) {
+            //         if (c instanceof JButton && c.getBackground() == confirmButton) {
+            //             ((JButton) c).doClick();
+            //         }
+            //     }
+            // }
+            frozenManager.unfreezeAllFromRequests();
         });
 
         freezeAllTradersButton.addActionListener(e -> {
-            for (Component freezeComponent : freezeTradersContainer.getComponents()) {
-                for (Component c : ((JPanel) freezeComponent).getComponents()) {
-                    if (c instanceof JButton && c.getBackground() == blue) {
-                        ((JButton) c).doClick();
-                    }
-                }
-            }
+            // for (Component freezeComponent : freezeTradersContainer.getComponents()) {
+            //     for (Component c : ((JPanel) freezeComponent).getComponents()) {
+            //         if (c instanceof JButton && c.getBackground() == blue) {
+            //             ((JButton) c).doClick();
+            //         }
+            //     }
+            // }
+            frozenManager.freezeAllShouldBeFrozen();
         });
     }
 
Index: src/backend/tradesystem/general_managers/LoginManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package backend.tradesystem.general_managers;\r\n\r\n\r\nimport backend.DatabaseFilePaths;\r\nimport backend.exceptions.*;\r\nimport backend.models.Trade;\r\nimport backend.models.users.Admin;\r\nimport backend.models.users.Trader;\r\nimport backend.models.users.User;\r\nimport backend.tradesystem.Manager;\r\nimport backend.tradesystem.TraderProperties;\r\nimport backend.tradesystem.UserTypes;\r\n\r\nimport java.io.*;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Properties;\r\nimport java.util.Set;\r\n\r\n/**\r\n * Used for logging in and registering, as well as any setup like changing global settings\r\n */\r\npublic class LoginManager extends Manager {\r\n\r\n    private final String TRADER_PROPERTY_FILE_PATH;\r\n\r\n    /**\r\n     * Initialize the objects to get items from databases\r\n     *\r\n     * @throws IOException if something goes wrong with getting database\r\n     */\r\n    public LoginManager() throws IOException {\r\n        super();\r\n        TRADER_PROPERTY_FILE_PATH = DatabaseFilePaths.TRADER_CONFIG.getFilePath();\r\n    }\r\n\r\n\r\n    /**\r\n     * Registers a user\r\n     *\r\n     * @param username username of new user\r\n     * @param password password of new user\r\n     * @param type     the type of user\r\n     * @return The ID of the newly created user\r\n     * @throws UserAlreadyExistsException username is not unique\r\n     * @throws BadPasswordException       password isn't valid\r\n     * @throws IOException                issues with getting database files\r\n     */\r\n    public String registerUser(String username, String password, UserTypes type) throws UserAlreadyExistsException, BadPasswordException, IOException {\r\n\r\n\r\n        validatePassword(password);\r\n\r\n        if (!isUsernameUnique(username))\r\n            throw new UserAlreadyExistsException();\r\n        switch (type) {\r\n            case ADMIN:\r\n                Admin admin = new Admin(username, password);\r\n                for (String userId : getAllUsers()) {\r\n                    try {\r\n                        if (getUser(userId) instanceof Admin) {\r\n                            admin.setReports(((Admin) getUser(userId)).getReports());\r\n                            break;\r\n                        }\r\n                    } catch (UserNotFoundException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                return updateUserDatabase(admin).getId();\r\n            case TRADER:\r\n                tryToRefreshTradeCount();\r\n            default:\r\n                // Get current default limits\r\n                int defaultTradeLimit = getProperty(TraderProperties.TRADE_LIMIT);\r\n                int defaultIncompleteTradeLim = getProperty(TraderProperties.INCOMPLETE_TRADE_LIM);\r\n                int defaultMinimumAmountNeededToBorrow = getProperty(TraderProperties.MINIMUM_AMOUNT_NEEDED_TO_BORROW);\r\n                return updateUserDatabase(new Trader(username, password, \"\", defaultTradeLimit, defaultIncompleteTradeLim,\r\n                        defaultMinimumAmountNeededToBorrow)).getId();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Ensuring user credentials is correct and returns the user id\r\n     *\r\n     * @param username username of user\r\n     * @param password password of user\r\n     * @return the user id of the logged in user\r\n     * @throws IOException           issues with getting database files\r\n     * @throws UserNotFoundException could not find the user\r\n     */\r\n    public String login(String username, String password) throws UserNotFoundException, IOException {\r\n        String userId = getUserByUsername(username);\r\n        User user = getUser(userId);\r\n        if (!user.getPassword().equals(password)) throw new UserNotFoundException();\r\n        if (getType(user.getId()).equals(UserTypes.TRADER)) {\r\n            try {\r\n                tryToRefreshTradeCount();\r\n            } catch (IOException ex) {\r\n                System.out.println(\"Couldn't reset trade limits\");\r\n            }\r\n        }\r\n        return user.getId();\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Checks if the username exists in the database file\r\n     *\r\n     * @param username username to check for\r\n     * @return if username is unique\r\n     */\r\n    public boolean isUsernameUnique(String username) {\r\n        try {\r\n            getUserByUsername(username);\r\n            return false;\r\n        } catch (UserNotFoundException ignored) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the type of user\r\n     *\r\n     * @param userId the user id\r\n     * @return the user type of the user\r\n     * @throws UserNotFoundException if the user id wasn't found\r\n     */\r\n    public UserTypes getType(String userId) throws UserNotFoundException {\r\n        User user = getUser(userId);\r\n        if (user instanceof Admin)\r\n            return UserTypes.ADMIN;\r\n        else {\r\n            return UserTypes.TRADER;\r\n        }\r\n\r\n    }\r\n    /**\r\n     * Checks if password is valid\r\n     *\r\n     * @param password must have no white space, length greater than 11, has a capital letter, has a number\r\n     * @throws BadPasswordException if the password is not valid\r\n     */\r\n    private void validatePassword(String password) throws BadPasswordException {\r\n        if (password.contains(\" \")) throw new BadPasswordException(\"No white space allowed\");\r\n        if (password.length() < 11) throw new BadPasswordException(\"Length of password must be at least 12\");\r\n        if (password.toLowerCase().equals(password))\r\n            throw new BadPasswordException(\"Must have at least one capital letter\");\r\n        if (!password.matches(\".*[0-9]+.*\")) throw new BadPasswordException(\"Must contain at least one number\");\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Tries to refresh the trade count of all traders (this only happens every week).\r\n     */\r\n    private void tryToRefreshTradeCount() throws IOException {\r\n        Date date = new Date();\r\n\r\n        // Gets the current time in weeks since 1970.\r\n        int currTime = (int) (date.getTime() / (1000 * 60 * 60 * 24 * 7));\r\n\r\n        // Gets the last time (in weeks) the trade count of every user has been updated\r\n        int lastTime = getProperty(TraderProperties.LAST_TRADE_COUNT_UPDATE);\r\n\r\n        // If the time is different (i.e. one week has passed)...\r\n        if (lastTime - currTime != 0) {\r\n            // Refresh the trade count\r\n            refreshTradeCount();\r\n\r\n            // Set the new date that the trade count was updated to currTime.\r\n            setProperty(TraderProperties.LAST_TRADE_COUNT_UPDATE, currTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current value of the specified trader property\r\n     *\r\n     * @param propertyType the type of property\r\n     * @return the value of the specified trader property\r\n     * @throws IOException if the input file doesn't exist\r\n     */\r\n    public int getProperty(TraderProperties propertyType) throws IOException {\r\n        // get the file\r\n        File propertyFile = new File(TRADER_PROPERTY_FILE_PATH);\r\n        // initialize the reader of this file\r\n        FileReader reader = new FileReader(propertyFile);\r\n        // initialize properties object\r\n        Properties properties = new Properties();\r\n        // associate properties object with this file.\r\n        properties.load(reader);\r\n        // we're not going to use reader anymore, so close it\r\n        reader.close();\r\n        // return the integer value of that property\r\n        return Integer.parseInt(properties.getProperty(propertyType.getProperty()));\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a property.\r\n     *\r\n     * @param propertyName  the property to change\r\n     * @param propertyValue the new value of that property\r\n     * @throws IOException if the file doesn't exist\r\n     */\r\n    public void setProperty(TraderProperties propertyName, int propertyValue) throws IOException {\r\n        // get the file\r\n        File propertyFile = new File(TRADER_PROPERTY_FILE_PATH);\r\n        // initialize reader\r\n        FileReader reader = new FileReader(propertyFile);\r\n        // initialize properties object (to set data)\r\n        Properties properties = new Properties();\r\n        // associate this properties object with the file\r\n        properties.load(reader);\r\n        // set the property\r\n        properties.setProperty(propertyName.getProperty(), \"\" + propertyValue);\r\n\r\n        //update the file\r\n        FileWriter writer = new FileWriter(propertyFile);\r\n        properties.store(writer, \"\");\r\n        reader.close();\r\n        writer.close();\r\n        updateAllTraderDefaults();\r\n    }\r\n    private void updateAllTraderDefaults() throws IOException {\r\n\r\n        int defaultTradeLimit = getProperty(TraderProperties.TRADE_LIMIT);\r\n        int defaultIncompleteTradeLim = getProperty(TraderProperties.INCOMPLETE_TRADE_LIM);\r\n        int defaultMinimumAmountNeededToBorrow = getProperty(TraderProperties.MINIMUM_AMOUNT_NEEDED_TO_BORROW);\r\n        Set<String> users = getAllUsers();\r\n\r\n        for (String user : users) {\r\n            User populatedUser = null;\r\n            try {\r\n                populatedUser = getUser(user);\r\n            } catch (UserNotFoundException e) {\r\n                e.printStackTrace();\r\n            }\r\n            if (populatedUser instanceof Trader) {\r\n                Trader t = (Trader) populatedUser;\r\n                t.setLimit(TraderProperties.TRADE_LIMIT, defaultTradeLimit);\r\n                t.setLimit(TraderProperties.INCOMPLETE_TRADE_LIM, defaultIncompleteTradeLim);\r\n                t.setLimit(TraderProperties.MINIMUM_AMOUNT_NEEDED_TO_BORROW, defaultMinimumAmountNeededToBorrow);\r\n            }\r\n            updateUserDatabase(populatedUser);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refreshes the trade count of all the traders (sets the trade count to 0)\r\n     */\r\n    private void refreshTradeCount() {\r\n        Set<String> users = getAllUsers();\r\n        for (String id : users) {\r\n            Trader trader = null;\r\n            try {\r\n                trader = getTrader(id);\r\n                trader.setTradeCount(0);\r\n            }\r\n            catch (UserNotFoundException e){\r\n                e.printStackTrace();\r\n            } catch (AuthorizationException e){\r\n\r\n            }\r\n            updateUserDatabase(trader);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/backend/tradesystem/general_managers/LoginManager.java	(revision f12076c598b9223dbe658ecfc217209af6c02b5a)
+++ src/backend/tradesystem/general_managers/LoginManager.java	(date 1596862417149)
@@ -3,7 +3,6 @@
 
 import backend.DatabaseFilePaths;
 import backend.exceptions.*;
-import backend.models.Trade;
 import backend.models.users.Admin;
 import backend.models.users.Trader;
 import backend.models.users.User;
@@ -13,7 +12,6 @@
 
 import java.io.*;
 import java.util.Date;
-import java.util.HashMap;
 import java.util.Properties;
 import java.util.Set;
 
@@ -259,9 +257,10 @@
                 trader = getTrader(id);
                 trader.setTradeCount(0);
             }
-            catch (UserNotFoundException e){
+            catch (UserNotFoundException e) {
                 e.printStackTrace();
-            } catch (AuthorizationException e){
+            }
+            catch (AuthorizationException ignored){
 
             }
             updateUserDatabase(trader);
Index: src/frontend/WindowManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frontend;\r\n\r\nimport backend.DatabaseFilePaths;\r\nimport backend.exceptions.AuthorizationException;\r\nimport backend.exceptions.TradableItemNotFoundException;\r\nimport backend.exceptions.TradeNotFoundException;\r\nimport backend.exceptions.UserNotFoundException;\r\nimport backend.tradesystem.UserTypes;\r\nimport backend.tradesystem.general_managers.LoginManager;\r\nimport frontend.panels.admin_panel.AdminPanel;\r\nimport frontend.panels.trader_panel.TraderPanel;\r\nimport frontend.panels.login_panel.LoginPanel;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\n/**\r\n * This is used to manage settings in the overall window itself\r\n * Code inspired from\r\n * https://stackoverflow.com/questions/54815226/how-can-i-detect-if-a-file-has-been-modified-using-lastmodified\r\n */\r\npublic class WindowManager extends JFrame {\r\n    protected Font regular, bold, italic, boldItalic;\r\n    private final LoginPanel loginPanel;\r\n    private JPanel userPanel = null;\r\n    private final BufferedImage loginBg = ImageIO.read(new File(\"./src/frontend/images/LoginPanelBg.jpg\")),\r\n            adminBg = ImageIO.read(new File(\"./src/frontend/images/IconAdmin.jpg\")),\r\n            traderBg = ImageIO.read(new File(\"./src/frontend/images/IconTrader.jpg\"));\r\n    private final LoginManager loginManager = new LoginManager();\r\n    private boolean infiltraded;\r\n\r\n    private String userId = \"bad\";\r\n\r\n    private String currentPanel = \"\";\r\n\r\n    /**\r\n     * This is where initial settings that affects the entire window is at\r\n     *\r\n     * @throws IOException         if logging causes issues\r\n     * @throws FontFormatException if the font is bad\r\n     */\r\n    public WindowManager() throws IOException, FontFormatException {\r\n        regular = Font.createFont(Font.TRUETYPE_FONT,\r\n                getClass().getResourceAsStream(\"./fonts/IBMPlexSans-Regular.ttf\"));\r\n        bold = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream(\"./fonts/IBMPlexSans-Bold.ttf\"));\r\n        italic = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream(\"./fonts/IBMPlexSans-Italic.ttf\"));\r\n        boldItalic = Font.createFont(Font.TRUETYPE_FONT,\r\n                getClass().getResourceAsStream(\"./fonts/IBMPlexSans-BoldItalic.ttf\"));\r\n        loginPanel = new LoginPanel(regular, bold, italic, boldItalic);\r\n\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        this.setContentPane(new ImagePanel(loginBg));\r\n        this.add(loginPanel, BorderLayout.CENTER);\r\n        this.setSize(loginPanel.getSize());\r\n        this.setLocationRelativeTo(null);\r\n        this.setResizable(false);\r\n\r\n\r\n    }\r\n\r\n    public String getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    /**\r\n     * Changes from login screen to the actual dashboard\r\n     *\r\n     * @param loggedInUserId the user id that is logged in\r\n     * @throws IOException            if login causes issues\r\n     * @throws TradeNotFoundException trade doesn't exist\r\n     */\r\n    public void login(String loggedInUserId) throws IOException, TradeNotFoundException {\r\n        try {\r\n            this.userId = loggedInUserId;\r\n            if (userId.equals(\"bad\")) return;\r\n            if (loggedInUserId.equals(\"\") || loginManager.getType(loggedInUserId).equals(UserTypes.TRADER)) {\r\n                userPanel = new TraderPanel(loggedInUserId, regular, bold, italic, boldItalic, infiltraded);\r\n                if(!this.currentPanel.equals(\"\"))\r\n                    ((TraderPanel) userPanel).setCurrentPanel(this.currentPanel);\r\n                this.setContentPane(new ImagePanel(traderBg));\r\n                this.setContentPane(new ImagePanel(traderBg));\r\n            } else {\r\n                userPanel = new AdminPanel(loggedInUserId, regular, bold, italic, boldItalic);\r\n                this.setContentPane(new ImagePanel(adminBg));\r\n            }\r\n            this.add(userPanel, BorderLayout.CENTER);\r\n            this.setSize(userPanel.getSize());\r\n        } catch (UserNotFoundException | AuthorizationException | TradableItemNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Puts the window back on the login screen\r\n     */\r\n    public void logout() {\r\n        privateLogout();\r\n        this.userId = \"bad\";\r\n    }\r\n\r\n\r\n    private void privateLogout() {\r\n        this.currentPanel = ((TraderPanel) userPanel).getCurrentPanel();\r\n        if (userPanel != null)\r\n            this.remove(userPanel);\r\n        this.setContentPane(new ImagePanel(loginBg));\r\n        this.add(loginPanel, BorderLayout.CENTER);\r\n        this.setSize(loginPanel.getSize());\r\n    }\r\n\r\n    /**\r\n     * Sets the window to visible and refreshes the JFrame if needed\r\n     */\r\n    public void run() {\r\n        ArrayList<Long> times = new ArrayList<>();\r\n        ArrayList<File> file = new ArrayList<>();\r\n        int i = 0;\r\n        for (DatabaseFilePaths path : DatabaseFilePaths.values()) {\r\n            if (path.isConfig()) continue;\r\n            file.add(new File(path.getFilePath()));\r\n            times.add(file.get(i).lastModified());\r\n            i++;\r\n        }\r\n        Timer timer = new Timer();\r\n        timer.schedule(new TimerTask() {\r\n            @Override\r\n            public void run() {\r\n                if (userId.equals(\"bad\")) return;\r\n                for (int i = 0; i < times.size(); i++) {\r\n                    if (times.get(i) != file.get(i).lastModified()) {\r\n                        times.set(i, file.get(i).lastModified());\r\n                        try {\r\n                            if (!userId.equals(\"\")) {\r\n                                privateLogout();\r\n                                login(userId);\r\n                                break;\r\n                            }\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }, new Date(), 500);\r\n        addWindowListener(new WindowAdapter() {\r\n            @Override\r\n            public void windowClosing(WindowEvent ignored) {\r\n                timer.cancel();\r\n            }\r\n        });\r\n        this.setVisible(true);\r\n    }\r\n\r\n\r\n    private static class ImagePanel extends JComponent {\r\n        private final Image image;\r\n\r\n        public ImagePanel(Image image) {\r\n            this.image = image;\r\n        }\r\n\r\n\r\n        @Override\r\n        protected void paintComponent(Graphics g) {\r\n            super.paintComponent(g);\r\n            g.drawImage(image, 0, 0, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets infiltraded to true (this WindowManager was created by an admin to infiltrade)\r\n     */\r\n    public void setInfiltraded() {\r\n        infiltraded = true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/frontend/WindowManager.java	(revision f12076c598b9223dbe658ecfc217209af6c02b5a)
+++ src/frontend/WindowManager.java	(date 1596862417150)
@@ -91,6 +91,8 @@
                 this.setContentPane(new ImagePanel(traderBg));
             } else {
                 userPanel = new AdminPanel(loggedInUserId, regular, bold, italic, boldItalic);
+                if (!this.currentPanel.equals(""))
+                    ((AdminPanel) userPanel).setCurrentPanel(this.currentPanel);
                 this.setContentPane(new ImagePanel(adminBg));
             }
             this.add(userPanel, BorderLayout.CENTER);
@@ -110,7 +112,8 @@
 
 
     private void privateLogout() {
-        this.currentPanel = ((TraderPanel) userPanel).getCurrentPanel();
+        this.currentPanel = userPanel instanceof TraderPanel ? ((TraderPanel) userPanel).getCurrentPanel() : ((AdminPanel) userPanel)
+                .getCurrentPanel();
         if (userPanel != null)
             this.remove(userPanel);
         this.setContentPane(new ImagePanel(loginBg));
Index: src/frontend/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frontend;\r\n\r\nimport javax.swing.UIManager;\r\n\r\n/**\r\n * This is where the program starts running\r\n */\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        try {\r\n           new TemporarySetup();\r\n            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());\r\n            WindowManager windowManager = new WindowManager();\r\n            windowManager.run();\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/frontend/Main.java	(revision f12076c598b9223dbe658ecfc217209af6c02b5a)
+++ src/frontend/Main.java	(date 1596862417150)
@@ -8,7 +8,7 @@
 public class Main {
     public static void main(String[] args) {
         try {
-           new TemporarySetup();
+            new TemporarySetup();
             UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
             WindowManager windowManager = new WindowManager();
             windowManager.run();
Index: src/backend/tradesystem/trader.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#\r\n#Sat Aug 08 00:25:42 EDT 2020\r\n=\\=\\=\\=\\=\\=\\=\r\nlastTradeCountUpdate=2640\r\ndefaultMinimumAmountNeededToBorrow=1\r\ndefaultTradeLimit=10\r\n>>>>>>>=15060fb201e35766b1fa2659187ba4b3cf64148f\r\n<<<<<<<=HEAD\r\ndefaultIncompleteTradeLim=3\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/backend/tradesystem/trader.properties	(revision f12076c598b9223dbe658ecfc217209af6c02b5a)
+++ src/backend/tradesystem/trader.properties	(date 1596862417149)
@@ -1,9 +1,9 @@
 #
-#Sat Aug 08 00:25:42 EDT 2020
-=\=\=\=\=\=\=
+#Sat Aug 08 00:47:15 EDT 2020
 lastTradeCountUpdate=2640
-defaultMinimumAmountNeededToBorrow=1
-defaultTradeLimit=10
+defaultIncompleteTradeLim=3
 >>>>>>>=15060fb201e35766b1fa2659187ba4b3cf64148f
+defaultTradeLimit=10
+defaultMinimumAmountNeededToBorrow=1
 <<<<<<<=HEAD
-defaultIncompleteTradeLim=3
+=\=\=\=\=\=\=
Index: src/frontend/panels/admin_panel/AdminPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frontend.panels.admin_panel;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.plaf.metal.MetalButtonUI;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.IOException;\r\n\r\nimport backend.exceptions.UserNotFoundException;\r\nimport backend.tradesystem.queries.UserQuery;\r\nimport frontend.WindowManager;\r\nimport frontend.panels.admin_panel.admin_subpanels.ControlPanel;\r\nimport frontend.panels.admin_panel.admin_subpanels.OverviewPanel;\r\nimport frontend.panels.general_panels.MessagePanel;\r\nimport frontend.panels.general_panels.search_panels.SearchPanel;\r\n\r\n/**\r\n * This is used to represent what an admin account sees\r\n */\r\npublic class AdminPanel extends JPanel implements ActionListener {\r\n\r\n    private final JPanel menuContainer = new JPanel(new GridBagLayout()), menuPanelContainer = new JPanel();\r\n    private final JButton logoutButton = new JButton(\"Logout\");\r\n    private final CardLayout cardLayout = new CardLayout();\r\n\r\n\r\n    /**\r\n     * For making a new admin panel\r\n     *\r\n     * @param admin      the admin user id\r\n     * @param regular    regular font\r\n     * @param bold       bold font\r\n     * @param italic     italicized font\r\n     * @param boldItalic bold italics font\r\n     * @throws IOException           if access to database has issues\r\n     * @throws UserNotFoundException if the admin id is bad\r\n     */\r\n    public AdminPanel(String admin, Font regular, Font bold, Font italic, Font boldItalic) throws IOException, UserNotFoundException {\r\n        this.setSize(1600, 900);\r\n        this.setOpaque(false);\r\n        this.setLayout(new BorderLayout());\r\n        Color bg = new Color(51, 51, 51);\r\n        Color current = new Color(32, 32, 32);\r\n        Color gray = new Color(184, 184, 184);\r\n        Color red = new Color(219, 58, 52);\r\n        UserQuery userQuery = new UserQuery();\r\n        JPanel overviewPanel = new OverviewPanel(admin, regular, bold, italic, boldItalic);\r\n        JPanel searchPanel = new SearchPanel(admin, regular, bold, italic, boldItalic);\r\n        JPanel controlPanel = new ControlPanel(admin, regular, bold, italic, boldItalic);\r\n        MessagePanel messagePanel = new MessagePanel(admin, regular, bold, italic, boldItalic);\r\n\r\n        messagePanel.changeToAdminColorScheme();\r\n\r\n        searchPanel.setBackground(Color.BLACK);\r\n        menuContainer.setPreferredSize(new Dimension(250, this.getHeight()));\r\n        menuContainer.setOpaque(false);\r\n        GridBagConstraints gbc = setupGbc();\r\n        setupIconText(admin, boldItalic, userQuery, gbc);\r\n        setupUsernameTitle(admin, regular, userQuery, gbc);\r\n        setupUserIdTitle(admin, regular, gray, gbc);\r\n        setupOverviewPanelButton(regular, current, gbc);\r\n        setupPanelButton(regular, current, gbc, \"Control Panel\", 4);\r\n        setupPanelButton(regular, current, gbc, \"Messages\", 5);\r\n        setupPanelButton(regular, current, gbc, \"Search\", 6);\r\n\r\n        setupLogoutButton(boldItalic, red, gbc);\r\n        setupMenuPanelContainer(bg, overviewPanel, searchPanel, controlPanel, messagePanel);\r\n        this.add(menuContainer, BorderLayout.WEST);\r\n        this.add(menuPanelContainer, BorderLayout.CENTER);\r\n\r\n    }\r\n\r\n    private void setupMenuPanelContainer(Color bg, JPanel overviewPanel, JPanel searchPanel, JPanel controlPanel,\r\n            JPanel messagePanel) {\r\n        menuPanelContainer.setLayout(cardLayout);\r\n        menuPanelContainer.setBackground(bg);\r\n        menuPanelContainer.add(overviewPanel, \"Overview\");\r\n        menuPanelContainer.add(controlPanel, \"Control Panel\");\r\n        menuPanelContainer.add(messagePanel, \"Messages\");\r\n        menuPanelContainer.add(searchPanel, \"Search\");\r\n    }\r\n\r\n    private void setupLogoutButton(Font boldItalic, Color red, GridBagConstraints gbc) {\r\n        logoutButton.setFont(boldItalic.deriveFont(25f));\r\n        logoutButton.setForeground(Color.WHITE);\r\n        logoutButton.setBackground(red);\r\n        logoutButton.setOpaque(true);\r\n        logoutButton.setBorderPainted(false);\r\n        logoutButton.addActionListener(e ->\r\n                ((WindowManager) SwingUtilities.getWindowAncestor(this)).logout()\r\n        );\r\n        gbc.weighty = 0.1;\r\n        gbc.gridy = 7;\r\n        menuContainer.add(logoutButton, gbc);\r\n    }\r\n\r\n    private void setupPanelButton(Font regular, Color current, GridBagConstraints gbc, String s, int i) {\r\n        JButton controlPanelButton = new JButton(s);\r\n        controlPanelButton.setHorizontalAlignment(SwingConstants.LEFT);\r\n        controlPanelButton.setFont(regular.deriveFont(30f));\r\n        controlPanelButton.setForeground(Color.WHITE);\r\n        controlPanelButton.setBackground(current);\r\n        controlPanelButton.setOpaque(false);\r\n        controlPanelButton.setBorderPainted(false);\r\n        controlPanelButton.addActionListener(this);\r\n        gbc.gridy = i;\r\n        menuContainer.add(controlPanelButton, gbc);\r\n    }\r\n\r\n    private void setupOverviewPanelButton(Font regular, Color current, GridBagConstraints gbc) {\r\n        JButton overviewPanelButton = new JButton(\"Overview\");\r\n        overviewPanelButton.setHorizontalAlignment(SwingConstants.LEFT);\r\n        overviewPanelButton.setFont(regular.deriveFont(30f));\r\n        overviewPanelButton.setForeground(Color.WHITE);\r\n        overviewPanelButton.setBackground(current);\r\n        overviewPanelButton.setOpaque(true);\r\n        overviewPanelButton.setBorderPainted(false);\r\n        overviewPanelButton.addActionListener(this);\r\n        gbc.weighty = 0.14;\r\n        gbc.gridy = 3;\r\n        gbc.insets = new Insets(0, 0, 0, 0);\r\n        menuContainer.add(overviewPanelButton, gbc);\r\n    }\r\n\r\n    private void setupUserIdTitle(String admin, Font regular, Color gray, GridBagConstraints gbc) {\r\n        JLabel userIdTitle = new JLabel(\"<html><pre>ID: #\" + admin.substring(admin.length() - 12) + \"</pre></html>\");\r\n        userIdTitle.setFont(regular.deriveFont(20f));\r\n        userIdTitle.setForeground(gray);\r\n        userIdTitle.setHorizontalAlignment(JLabel.CENTER);\r\n        gbc.gridy = 2;\r\n        gbc.weighty = 0.01;\r\n        gbc.insets = new Insets(0, 0, 10, 0);\r\n        menuContainer.add(userIdTitle, gbc);\r\n    }\r\n\r\n    private void setupUsernameTitle(String admin, Font regular, UserQuery userQuery, GridBagConstraints gbc) throws UserNotFoundException {\r\n        JLabel usernameTitle = new JLabel((userQuery.getUsername(admin).length() > 12 ? userQuery.getUsername(admin).substring(0, 12) + \"...\"\r\n                : userQuery.getUsername(admin)));\r\n        usernameTitle.setFont(regular.deriveFont(35f));\r\n        usernameTitle.setForeground(Color.WHITE);\r\n        usernameTitle.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 0));\r\n        usernameTitle.setHorizontalAlignment(JLabel.CENTER);\r\n        gbc.weighty = 0.01;\r\n        gbc.gridy = 1;\r\n        menuContainer.add(usernameTitle, gbc);\r\n    }\r\n\r\n    private void setupIconText(String admin, Font boldItalic, UserQuery userQuery, GridBagConstraints gbc) throws UserNotFoundException {\r\n        JLabel iconText = new JLabel(userQuery.getUsername(admin).toUpperCase().substring(0, 1));\r\n        iconText.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\r\n        iconText.setFont(boldItalic.deriveFont(55f));\r\n        iconText.setForeground(Color.WHITE);\r\n        iconText.setHorizontalAlignment(SwingConstants.CENTER);\r\n        menuContainer.add(iconText, gbc);\r\n    }\r\n\r\n    private GridBagConstraints setupGbc() {\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.fill = GridBagConstraints.BOTH;\r\n        gbc.gridx = 0;\r\n        gbc.weightx = 1.0;\r\n        gbc.gridy = 0;\r\n        gbc.weighty = 0.16;\r\n        return gbc;\r\n    }\r\n\r\n    /**\r\n     * Used for handling events\r\n     *\r\n     * @param e the event\r\n     */\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        cardLayout.show(menuPanelContainer, e.getActionCommand());\r\n        for (Component button : menuContainer.getComponents()) {\r\n            if (button instanceof JButton && !button.equals(logoutButton)) {\r\n                button.setEnabled(true);\r\n                ((JButton) button).setOpaque(false);\r\n            }\r\n        }\r\n        ((JButton) e.getSource()).setEnabled(false);\r\n        ((JButton) e.getSource()).setOpaque(true);\r\n        ((JButton) e.getSource()).setUI(new MetalButtonUI() {\r\n            protected Color getDisabledTextColor() {\r\n                return Color.WHITE;\r\n            }\r\n        });\r\n\r\n        menuContainer.repaint();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/frontend/panels/admin_panel/AdminPanel.java	(revision f12076c598b9223dbe658ecfc217209af6c02b5a)
+++ src/frontend/panels/admin_panel/AdminPanel.java	(date 1596862417151)
@@ -24,6 +24,8 @@
     private final JButton logoutButton = new JButton("Logout");
     private final CardLayout cardLayout = new CardLayout();
 
+    private String currentPanel = "";
+
 
     /**
      * For making a new admin panel
@@ -71,6 +73,34 @@
 
     }
 
+    public String getCurrentPanel() {
+        return this.currentPanel;
+    }
+
+    public void setCurrentPanel(String panelName) {
+        this.currentPanel = panelName;
+        cardLayout.show(menuPanelContainer, panelName);
+
+        for (Component button : menuContainer.getComponents()) {
+            if (button instanceof JButton) {
+                if (!button.equals(logoutButton)) {
+                    button.setEnabled(true);
+                    ((JButton) button).setOpaque(false);
+                }
+                if (((JButton) button).getName().equals(panelName)) {
+                    ((JButton) button).setEnabled(false);
+                    ((JButton) button).setOpaque(true);
+                    ((JButton) button).setUI(new MetalButtonUI() {
+                        protected Color getDisabledTextColor() {
+                            return Color.WHITE;
+                        }
+                    });
+                }
+            }
+        }
+
+    }
+
     private void setupMenuPanelContainer(Color bg, JPanel overviewPanel, JPanel searchPanel, JPanel controlPanel,
             JPanel messagePanel) {
         menuPanelContainer.setLayout(cardLayout);
@@ -83,6 +113,7 @@
 
     private void setupLogoutButton(Font boldItalic, Color red, GridBagConstraints gbc) {
         logoutButton.setFont(boldItalic.deriveFont(25f));
+        logoutButton.setName("Logout");
         logoutButton.setForeground(Color.WHITE);
         logoutButton.setBackground(red);
         logoutButton.setOpaque(true);
@@ -96,21 +127,23 @@
     }
 
     private void setupPanelButton(Font regular, Color current, GridBagConstraints gbc, String s, int i) {
-        JButton controlPanelButton = new JButton(s);
-        controlPanelButton.setHorizontalAlignment(SwingConstants.LEFT);
-        controlPanelButton.setFont(regular.deriveFont(30f));
-        controlPanelButton.setForeground(Color.WHITE);
-        controlPanelButton.setBackground(current);
-        controlPanelButton.setOpaque(false);
-        controlPanelButton.setBorderPainted(false);
-        controlPanelButton.addActionListener(this);
+        JButton panelButton = new JButton(s);
+        panelButton.setHorizontalAlignment(SwingConstants.LEFT);
+        panelButton.setName(s);
+        panelButton.setFont(regular.deriveFont(30f));
+        panelButton.setForeground(Color.WHITE);
+        panelButton.setBackground(current);
+        panelButton.setOpaque(false);
+        panelButton.setBorderPainted(false);
+        panelButton.addActionListener(this);
         gbc.gridy = i;
-        menuContainer.add(controlPanelButton, gbc);
+        menuContainer.add(panelButton, gbc);
     }
 
     private void setupOverviewPanelButton(Font regular, Color current, GridBagConstraints gbc) {
         JButton overviewPanelButton = new JButton("Overview");
         overviewPanelButton.setHorizontalAlignment(SwingConstants.LEFT);
+        overviewPanelButton.setName("Overview");
         overviewPanelButton.setFont(regular.deriveFont(30f));
         overviewPanelButton.setForeground(Color.WHITE);
         overviewPanelButton.setBackground(current);
@@ -172,21 +205,7 @@
      */
     @Override
     public void actionPerformed(ActionEvent e) {
-        cardLayout.show(menuPanelContainer, e.getActionCommand());
-        for (Component button : menuContainer.getComponents()) {
-            if (button instanceof JButton && !button.equals(logoutButton)) {
-                button.setEnabled(true);
-                ((JButton) button).setOpaque(false);
-            }
-        }
-        ((JButton) e.getSource()).setEnabled(false);
-        ((JButton) e.getSource()).setOpaque(true);
-        ((JButton) e.getSource()).setUI(new MetalButtonUI() {
-            protected Color getDisabledTextColor() {
-                return Color.WHITE;
-            }
-        });
-
+        setCurrentPanel(e.getActionCommand());
         menuContainer.repaint();
     }
 }
\ No newline at end of file
